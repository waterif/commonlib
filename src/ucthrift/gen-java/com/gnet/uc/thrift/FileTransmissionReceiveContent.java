/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class FileTransmissionReceiveContent implements org.apache.thrift.TBase<FileTransmissionReceiveContent, FileTransmissionReceiveContent._Fields>, java.io.Serializable, Cloneable, Comparable<FileTransmissionReceiveContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileTransmissionReceiveContent");

  private static final org.apache.thrift.protocol.TField SEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTaskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIVE_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTaskId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("serverList", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRANS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transType", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField TRANS_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("transPoint", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileTransmissionReceiveContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileTransmissionReceiveContentTupleSchemeFactory());
  }

  public long sendTaskId; // required
  public long receiveTaskId; // required
  public String ip; // required
  public short port; // required
  public String serverList; // required
  public byte transType; // required
  public long transPoint; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEND_TASK_ID((short)1, "sendTaskId"),
    RECEIVE_TASK_ID((short)2, "receiveTaskId"),
    IP((short)3, "ip"),
    PORT((short)4, "port"),
    SERVER_LIST((short)5, "serverList"),
    TRANS_TYPE((short)6, "transType"),
    TRANS_POINT((short)7, "transPoint");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEND_TASK_ID
          return SEND_TASK_ID;
        case 2: // RECEIVE_TASK_ID
          return RECEIVE_TASK_ID;
        case 3: // IP
          return IP;
        case 4: // PORT
          return PORT;
        case 5: // SERVER_LIST
          return SERVER_LIST;
        case 6: // TRANS_TYPE
          return TRANS_TYPE;
        case 7: // TRANS_POINT
          return TRANS_POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDTASKID_ISSET_ID = 0;
  private static final int __RECEIVETASKID_ISSET_ID = 1;
  private static final int __PORT_ISSET_ID = 2;
  private static final int __TRANSTYPE_ISSET_ID = 3;
  private static final int __TRANSPOINT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("sendTaskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVE_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("receiveTaskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SERVER_LIST, new org.apache.thrift.meta_data.FieldMetaData("serverList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TRANS_POINT, new org.apache.thrift.meta_data.FieldMetaData("transPoint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileTransmissionReceiveContent.class, metaDataMap);
  }

  public FileTransmissionReceiveContent() {
  }

  public FileTransmissionReceiveContent(
    long sendTaskId,
    long receiveTaskId,
    String ip,
    short port,
    String serverList,
    byte transType,
    long transPoint)
  {
    this();
    this.sendTaskId = sendTaskId;
    setSendTaskIdIsSet(true);
    this.receiveTaskId = receiveTaskId;
    setReceiveTaskIdIsSet(true);
    this.ip = ip;
    this.port = port;
    setPortIsSet(true);
    this.serverList = serverList;
    this.transType = transType;
    setTransTypeIsSet(true);
    this.transPoint = transPoint;
    setTransPointIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileTransmissionReceiveContent(FileTransmissionReceiveContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sendTaskId = other.sendTaskId;
    this.receiveTaskId = other.receiveTaskId;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.port = other.port;
    if (other.isSetServerList()) {
      this.serverList = other.serverList;
    }
    this.transType = other.transType;
    this.transPoint = other.transPoint;
  }

  public FileTransmissionReceiveContent deepCopy() {
    return new FileTransmissionReceiveContent(this);
  }

  @Override
  public void clear() {
    setSendTaskIdIsSet(false);
    this.sendTaskId = 0;
    setReceiveTaskIdIsSet(false);
    this.receiveTaskId = 0;
    this.ip = null;
    setPortIsSet(false);
    this.port = 0;
    this.serverList = null;
    setTransTypeIsSet(false);
    this.transType = 0;
    setTransPointIsSet(false);
    this.transPoint = 0;
  }

  public long getSendTaskId() {
    return this.sendTaskId;
  }

  public FileTransmissionReceiveContent setSendTaskId(long sendTaskId) {
    this.sendTaskId = sendTaskId;
    setSendTaskIdIsSet(true);
    return this;
  }

  public void unsetSendTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTASKID_ISSET_ID);
  }

  /** Returns true if field sendTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTASKID_ISSET_ID);
  }

  public void setSendTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTASKID_ISSET_ID, value);
  }

  public long getReceiveTaskId() {
    return this.receiveTaskId;
  }

  public FileTransmissionReceiveContent setReceiveTaskId(long receiveTaskId) {
    this.receiveTaskId = receiveTaskId;
    setReceiveTaskIdIsSet(true);
    return this;
  }

  public void unsetReceiveTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVETASKID_ISSET_ID);
  }

  /** Returns true if field receiveTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVETASKID_ISSET_ID);
  }

  public void setReceiveTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVETASKID_ISSET_ID, value);
  }

  public String getIp() {
    return this.ip;
  }

  public FileTransmissionReceiveContent setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public short getPort() {
    return this.port;
  }

  public FileTransmissionReceiveContent setPort(short port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getServerList() {
    return this.serverList;
  }

  public FileTransmissionReceiveContent setServerList(String serverList) {
    this.serverList = serverList;
    return this;
  }

  public void unsetServerList() {
    this.serverList = null;
  }

  /** Returns true if field serverList is set (has been assigned a value) and false otherwise */
  public boolean isSetServerList() {
    return this.serverList != null;
  }

  public void setServerListIsSet(boolean value) {
    if (!value) {
      this.serverList = null;
    }
  }

  public byte getTransType() {
    return this.transType;
  }

  public FileTransmissionReceiveContent setTransType(byte transType) {
    this.transType = transType;
    setTransTypeIsSet(true);
    return this;
  }

  public void unsetTransType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSTYPE_ISSET_ID);
  }

  /** Returns true if field transType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransType() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSTYPE_ISSET_ID);
  }

  public void setTransTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSTYPE_ISSET_ID, value);
  }

  public long getTransPoint() {
    return this.transPoint;
  }

  public FileTransmissionReceiveContent setTransPoint(long transPoint) {
    this.transPoint = transPoint;
    setTransPointIsSet(true);
    return this;
  }

  public void unsetTransPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSPOINT_ISSET_ID);
  }

  /** Returns true if field transPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetTransPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSPOINT_ISSET_ID);
  }

  public void setTransPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSPOINT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEND_TASK_ID:
      if (value == null) {
        unsetSendTaskId();
      } else {
        setSendTaskId((Long)value);
      }
      break;

    case RECEIVE_TASK_ID:
      if (value == null) {
        unsetReceiveTaskId();
      } else {
        setReceiveTaskId((Long)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Short)value);
      }
      break;

    case SERVER_LIST:
      if (value == null) {
        unsetServerList();
      } else {
        setServerList((String)value);
      }
      break;

    case TRANS_TYPE:
      if (value == null) {
        unsetTransType();
      } else {
        setTransType((Byte)value);
      }
      break;

    case TRANS_POINT:
      if (value == null) {
        unsetTransPoint();
      } else {
        setTransPoint((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEND_TASK_ID:
      return Long.valueOf(getSendTaskId());

    case RECEIVE_TASK_ID:
      return Long.valueOf(getReceiveTaskId());

    case IP:
      return getIp();

    case PORT:
      return Short.valueOf(getPort());

    case SERVER_LIST:
      return getServerList();

    case TRANS_TYPE:
      return Byte.valueOf(getTransType());

    case TRANS_POINT:
      return Long.valueOf(getTransPoint());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEND_TASK_ID:
      return isSetSendTaskId();
    case RECEIVE_TASK_ID:
      return isSetReceiveTaskId();
    case IP:
      return isSetIp();
    case PORT:
      return isSetPort();
    case SERVER_LIST:
      return isSetServerList();
    case TRANS_TYPE:
      return isSetTransType();
    case TRANS_POINT:
      return isSetTransPoint();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileTransmissionReceiveContent)
      return this.equals((FileTransmissionReceiveContent)that);
    return false;
  }

  public boolean equals(FileTransmissionReceiveContent that) {
    if (that == null)
      return false;

    boolean this_present_sendTaskId = true;
    boolean that_present_sendTaskId = true;
    if (this_present_sendTaskId || that_present_sendTaskId) {
      if (!(this_present_sendTaskId && that_present_sendTaskId))
        return false;
      if (this.sendTaskId != that.sendTaskId)
        return false;
    }

    boolean this_present_receiveTaskId = true;
    boolean that_present_receiveTaskId = true;
    if (this_present_receiveTaskId || that_present_receiveTaskId) {
      if (!(this_present_receiveTaskId && that_present_receiveTaskId))
        return false;
      if (this.receiveTaskId != that.receiveTaskId)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_serverList = true && this.isSetServerList();
    boolean that_present_serverList = true && that.isSetServerList();
    if (this_present_serverList || that_present_serverList) {
      if (!(this_present_serverList && that_present_serverList))
        return false;
      if (!this.serverList.equals(that.serverList))
        return false;
    }

    boolean this_present_transType = true;
    boolean that_present_transType = true;
    if (this_present_transType || that_present_transType) {
      if (!(this_present_transType && that_present_transType))
        return false;
      if (this.transType != that.transType)
        return false;
    }

    boolean this_present_transPoint = true;
    boolean that_present_transPoint = true;
    if (this_present_transPoint || that_present_transPoint) {
      if (!(this_present_transPoint && that_present_transPoint))
        return false;
      if (this.transPoint != that.transPoint)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sendTaskId = true;
    list.add(present_sendTaskId);
    if (present_sendTaskId)
      list.add(sendTaskId);

    boolean present_receiveTaskId = true;
    list.add(present_receiveTaskId);
    if (present_receiveTaskId)
      list.add(receiveTaskId);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_port = true;
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_serverList = true && (isSetServerList());
    list.add(present_serverList);
    if (present_serverList)
      list.add(serverList);

    boolean present_transType = true;
    list.add(present_transType);
    if (present_transType)
      list.add(transType);

    boolean present_transPoint = true;
    list.add(present_transPoint);
    if (present_transPoint)
      list.add(transPoint);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileTransmissionReceiveContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSendTaskId()).compareTo(other.isSetSendTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTaskId, other.sendTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveTaskId()).compareTo(other.isSetReceiveTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTaskId, other.receiveTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerList()).compareTo(other.isSetServerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverList, other.serverList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransType()).compareTo(other.isSetTransType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transType, other.transType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransPoint()).compareTo(other.isSetTransPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transPoint, other.transPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileTransmissionReceiveContent(");
    boolean first = true;

    sb.append("sendTaskId:");
    sb.append(this.sendTaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveTaskId:");
    sb.append(this.receiveTaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverList:");
    if (this.serverList == null) {
      sb.append("null");
    } else {
      sb.append(this.serverList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transType:");
    sb.append(this.transType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transPoint:");
    sb.append(this.transPoint);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sendTaskId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'receiveTaskId' because it's a primitive and you chose the non-beans generator.
    if (ip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ip' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'port' because it's a primitive and you chose the non-beans generator.
    if (serverList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'transType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'transPoint' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileTransmissionReceiveContentStandardSchemeFactory implements SchemeFactory {
    public FileTransmissionReceiveContentStandardScheme getScheme() {
      return new FileTransmissionReceiveContentStandardScheme();
    }
  }

  private static class FileTransmissionReceiveContentStandardScheme extends StandardScheme<FileTransmissionReceiveContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileTransmissionReceiveContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEND_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendTaskId = iprot.readI64();
              struct.setSendTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIVE_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiveTaskId = iprot.readI64();
              struct.setReceiveTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.port = iprot.readI16();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverList = iprot.readString();
              struct.setServerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.transType = iprot.readByte();
              struct.setTransTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRANS_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transPoint = iprot.readI64();
              struct.setTransPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSendTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sendTaskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReceiveTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'receiveTaskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'port' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransPoint()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transPoint' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileTransmissionReceiveContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEND_TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.sendTaskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.receiveTaskId);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI16(struct.port);
      oprot.writeFieldEnd();
      if (struct.serverList != null) {
        oprot.writeFieldBegin(SERVER_LIST_FIELD_DESC);
        oprot.writeString(struct.serverList);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANS_TYPE_FIELD_DESC);
      oprot.writeByte(struct.transType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANS_POINT_FIELD_DESC);
      oprot.writeI64(struct.transPoint);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileTransmissionReceiveContentTupleSchemeFactory implements SchemeFactory {
    public FileTransmissionReceiveContentTupleScheme getScheme() {
      return new FileTransmissionReceiveContentTupleScheme();
    }
  }

  private static class FileTransmissionReceiveContentTupleScheme extends TupleScheme<FileTransmissionReceiveContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileTransmissionReceiveContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sendTaskId);
      oprot.writeI64(struct.receiveTaskId);
      oprot.writeString(struct.ip);
      oprot.writeI16(struct.port);
      oprot.writeString(struct.serverList);
      oprot.writeByte(struct.transType);
      oprot.writeI64(struct.transPoint);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileTransmissionReceiveContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sendTaskId = iprot.readI64();
      struct.setSendTaskIdIsSet(true);
      struct.receiveTaskId = iprot.readI64();
      struct.setReceiveTaskIdIsSet(true);
      struct.ip = iprot.readString();
      struct.setIpIsSet(true);
      struct.port = iprot.readI16();
      struct.setPortIsSet(true);
      struct.serverList = iprot.readString();
      struct.setServerListIsSet(true);
      struct.transType = iprot.readByte();
      struct.setTransTypeIsSet(true);
      struct.transPoint = iprot.readI64();
      struct.setTransPointIsSet(true);
    }
  }

}

