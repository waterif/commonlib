/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class CodeCreateContent implements org.apache.thrift.TBase<CodeCreateContent, CodeCreateContent._Fields>, java.io.Serializable, Cloneable, Comparable<CodeCreateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CodeCreateContent");

  private static final org.apache.thrift.protocol.TField CONTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contentId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LANG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("langType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("contentHead", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATORID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorid", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DOWN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("downUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalLines", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CodeCreateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CodeCreateContentTupleSchemeFactory());
  }

  public long contentId; // required
  public String title; // required
  public String langType; // required
  public String contentHead; // required
  public String desc; // optional
  public int size; // required
  public int operatorid; // required
  public String operatorName; // optional
  public String downUrl; // required
  public int totalLines; // required
  public long createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT_ID((short)1, "contentId"),
    TITLE((short)2, "title"),
    LANG_TYPE((short)3, "langType"),
    CONTENT_HEAD((short)4, "contentHead"),
    DESC((short)5, "desc"),
    SIZE((short)6, "size"),
    OPERATORID((short)7, "operatorid"),
    OPERATOR_NAME((short)8, "operatorName"),
    DOWN_URL((short)9, "downUrl"),
    TOTAL_LINES((short)10, "totalLines"),
    CREATE_TIME((short)11, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT_ID
          return CONTENT_ID;
        case 2: // TITLE
          return TITLE;
        case 3: // LANG_TYPE
          return LANG_TYPE;
        case 4: // CONTENT_HEAD
          return CONTENT_HEAD;
        case 5: // DESC
          return DESC;
        case 6: // SIZE
          return SIZE;
        case 7: // OPERATORID
          return OPERATORID;
        case 8: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 9: // DOWN_URL
          return DOWN_URL;
        case 10: // TOTAL_LINES
          return TOTAL_LINES;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTENTID_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private static final int __OPERATORID_ISSET_ID = 2;
  private static final int __TOTALLINES_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESC,_Fields.OPERATOR_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("contentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("langType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_HEAD, new org.apache.thrift.meta_data.FieldMetaData("contentHead", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATORID, new org.apache.thrift.meta_data.FieldMetaData("operatorid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWN_URL, new org.apache.thrift.meta_data.FieldMetaData("downUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_LINES, new org.apache.thrift.meta_data.FieldMetaData("totalLines", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CodeCreateContent.class, metaDataMap);
  }

  public CodeCreateContent() {
  }

  public CodeCreateContent(
    long contentId,
    String title,
    String langType,
    String contentHead,
    int size,
    int operatorid,
    String downUrl,
    int totalLines,
    long createTime)
  {
    this();
    this.contentId = contentId;
    setContentIdIsSet(true);
    this.title = title;
    this.langType = langType;
    this.contentHead = contentHead;
    this.size = size;
    setSizeIsSet(true);
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    this.downUrl = downUrl;
    this.totalLines = totalLines;
    setTotalLinesIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CodeCreateContent(CodeCreateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.contentId = other.contentId;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetLangType()) {
      this.langType = other.langType;
    }
    if (other.isSetContentHead()) {
      this.contentHead = other.contentHead;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.size = other.size;
    this.operatorid = other.operatorid;
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
    if (other.isSetDownUrl()) {
      this.downUrl = other.downUrl;
    }
    this.totalLines = other.totalLines;
    this.createTime = other.createTime;
  }

  public CodeCreateContent deepCopy() {
    return new CodeCreateContent(this);
  }

  @Override
  public void clear() {
    setContentIdIsSet(false);
    this.contentId = 0;
    this.title = null;
    this.langType = null;
    this.contentHead = null;
    this.desc = null;
    setSizeIsSet(false);
    this.size = 0;
    setOperatoridIsSet(false);
    this.operatorid = 0;
    this.operatorName = null;
    this.downUrl = null;
    setTotalLinesIsSet(false);
    this.totalLines = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  public long getContentId() {
    return this.contentId;
  }

  public CodeCreateContent setContentId(long contentId) {
    this.contentId = contentId;
    setContentIdIsSet(true);
    return this;
  }

  public void unsetContentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  /** Returns true if field contentId is set (has been assigned a value) and false otherwise */
  public boolean isSetContentId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  public void setContentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public CodeCreateContent setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getLangType() {
    return this.langType;
  }

  public CodeCreateContent setLangType(String langType) {
    this.langType = langType;
    return this;
  }

  public void unsetLangType() {
    this.langType = null;
  }

  /** Returns true if field langType is set (has been assigned a value) and false otherwise */
  public boolean isSetLangType() {
    return this.langType != null;
  }

  public void setLangTypeIsSet(boolean value) {
    if (!value) {
      this.langType = null;
    }
  }

  public String getContentHead() {
    return this.contentHead;
  }

  public CodeCreateContent setContentHead(String contentHead) {
    this.contentHead = contentHead;
    return this;
  }

  public void unsetContentHead() {
    this.contentHead = null;
  }

  /** Returns true if field contentHead is set (has been assigned a value) and false otherwise */
  public boolean isSetContentHead() {
    return this.contentHead != null;
  }

  public void setContentHeadIsSet(boolean value) {
    if (!value) {
      this.contentHead = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public CodeCreateContent setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public CodeCreateContent setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public int getOperatorid() {
    return this.operatorid;
  }

  public CodeCreateContent setOperatorid(int operatorid) {
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    return this;
  }

  public void unsetOperatorid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorid is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorid() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatoridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public String getOperatorName() {
    return this.operatorName;
  }

  public CodeCreateContent setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  public String getDownUrl() {
    return this.downUrl;
  }

  public CodeCreateContent setDownUrl(String downUrl) {
    this.downUrl = downUrl;
    return this;
  }

  public void unsetDownUrl() {
    this.downUrl = null;
  }

  /** Returns true if field downUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDownUrl() {
    return this.downUrl != null;
  }

  public void setDownUrlIsSet(boolean value) {
    if (!value) {
      this.downUrl = null;
    }
  }

  public int getTotalLines() {
    return this.totalLines;
  }

  public CodeCreateContent setTotalLines(int totalLines) {
    this.totalLines = totalLines;
    setTotalLinesIsSet(true);
    return this;
  }

  public void unsetTotalLines() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALLINES_ISSET_ID);
  }

  /** Returns true if field totalLines is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalLines() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALLINES_ISSET_ID);
  }

  public void setTotalLinesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALLINES_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public CodeCreateContent setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENT_ID:
      if (value == null) {
        unsetContentId();
      } else {
        setContentId((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case LANG_TYPE:
      if (value == null) {
        unsetLangType();
      } else {
        setLangType((String)value);
      }
      break;

    case CONTENT_HEAD:
      if (value == null) {
        unsetContentHead();
      } else {
        setContentHead((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case OPERATORID:
      if (value == null) {
        unsetOperatorid();
      } else {
        setOperatorid((Integer)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    case DOWN_URL:
      if (value == null) {
        unsetDownUrl();
      } else {
        setDownUrl((String)value);
      }
      break;

    case TOTAL_LINES:
      if (value == null) {
        unsetTotalLines();
      } else {
        setTotalLines((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT_ID:
      return Long.valueOf(getContentId());

    case TITLE:
      return getTitle();

    case LANG_TYPE:
      return getLangType();

    case CONTENT_HEAD:
      return getContentHead();

    case DESC:
      return getDesc();

    case SIZE:
      return Integer.valueOf(getSize());

    case OPERATORID:
      return Integer.valueOf(getOperatorid());

    case OPERATOR_NAME:
      return getOperatorName();

    case DOWN_URL:
      return getDownUrl();

    case TOTAL_LINES:
      return Integer.valueOf(getTotalLines());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENT_ID:
      return isSetContentId();
    case TITLE:
      return isSetTitle();
    case LANG_TYPE:
      return isSetLangType();
    case CONTENT_HEAD:
      return isSetContentHead();
    case DESC:
      return isSetDesc();
    case SIZE:
      return isSetSize();
    case OPERATORID:
      return isSetOperatorid();
    case OPERATOR_NAME:
      return isSetOperatorName();
    case DOWN_URL:
      return isSetDownUrl();
    case TOTAL_LINES:
      return isSetTotalLines();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CodeCreateContent)
      return this.equals((CodeCreateContent)that);
    return false;
  }

  public boolean equals(CodeCreateContent that) {
    if (that == null)
      return false;

    boolean this_present_contentId = true;
    boolean that_present_contentId = true;
    if (this_present_contentId || that_present_contentId) {
      if (!(this_present_contentId && that_present_contentId))
        return false;
      if (this.contentId != that.contentId)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_langType = true && this.isSetLangType();
    boolean that_present_langType = true && that.isSetLangType();
    if (this_present_langType || that_present_langType) {
      if (!(this_present_langType && that_present_langType))
        return false;
      if (!this.langType.equals(that.langType))
        return false;
    }

    boolean this_present_contentHead = true && this.isSetContentHead();
    boolean that_present_contentHead = true && that.isSetContentHead();
    if (this_present_contentHead || that_present_contentHead) {
      if (!(this_present_contentHead && that_present_contentHead))
        return false;
      if (!this.contentHead.equals(that.contentHead))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_operatorid = true;
    boolean that_present_operatorid = true;
    if (this_present_operatorid || that_present_operatorid) {
      if (!(this_present_operatorid && that_present_operatorid))
        return false;
      if (this.operatorid != that.operatorid)
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    boolean this_present_downUrl = true && this.isSetDownUrl();
    boolean that_present_downUrl = true && that.isSetDownUrl();
    if (this_present_downUrl || that_present_downUrl) {
      if (!(this_present_downUrl && that_present_downUrl))
        return false;
      if (!this.downUrl.equals(that.downUrl))
        return false;
    }

    boolean this_present_totalLines = true;
    boolean that_present_totalLines = true;
    if (this_present_totalLines || that_present_totalLines) {
      if (!(this_present_totalLines && that_present_totalLines))
        return false;
      if (this.totalLines != that.totalLines)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_contentId = true;
    list.add(present_contentId);
    if (present_contentId)
      list.add(contentId);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_langType = true && (isSetLangType());
    list.add(present_langType);
    if (present_langType)
      list.add(langType);

    boolean present_contentHead = true && (isSetContentHead());
    list.add(present_contentHead);
    if (present_contentHead)
      list.add(contentHead);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_operatorid = true;
    list.add(present_operatorid);
    if (present_operatorid)
      list.add(operatorid);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    boolean present_downUrl = true && (isSetDownUrl());
    list.add(present_downUrl);
    if (present_downUrl)
      list.add(downUrl);

    boolean present_totalLines = true;
    list.add(present_totalLines);
    if (present_totalLines)
      list.add(totalLines);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(CodeCreateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContentId()).compareTo(other.isSetContentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentId, other.contentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLangType()).compareTo(other.isSetLangType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langType, other.langType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentHead()).compareTo(other.isSetContentHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentHead, other.contentHead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorid()).compareTo(other.isSetOperatorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorid, other.operatorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownUrl()).compareTo(other.isSetDownUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downUrl, other.downUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalLines()).compareTo(other.isSetTotalLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalLines, other.totalLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CodeCreateContent(");
    boolean first = true;

    sb.append("contentId:");
    sb.append(this.contentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("langType:");
    if (this.langType == null) {
      sb.append("null");
    } else {
      sb.append(this.langType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentHead:");
    if (this.contentHead == null) {
      sb.append("null");
    } else {
      sb.append(this.contentHead);
    }
    first = false;
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorid:");
    sb.append(this.operatorid);
    first = false;
    if (isSetOperatorName()) {
      if (!first) sb.append(", ");
      sb.append("operatorName:");
      if (this.operatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("downUrl:");
    if (this.downUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.downUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalLines:");
    sb.append(this.totalLines);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'contentId' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (langType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'langType' was not present! Struct: " + toString());
    }
    if (contentHead == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentHead' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'operatorid' because it's a primitive and you chose the non-beans generator.
    if (downUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'downUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'totalLines' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'createTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CodeCreateContentStandardSchemeFactory implements SchemeFactory {
    public CodeCreateContentStandardScheme getScheme() {
      return new CodeCreateContentStandardScheme();
    }
  }

  private static class CodeCreateContentStandardScheme extends StandardScheme<CodeCreateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CodeCreateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contentId = iprot.readI64();
              struct.setContentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.langType = iprot.readString();
              struct.setLangTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT_HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentHead = iprot.readString();
              struct.setContentHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorid = iprot.readI32();
              struct.setOperatoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOWN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downUrl = iprot.readString();
              struct.setDownUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalLines = iprot.readI32();
              struct.setTotalLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetContentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOperatorid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalLines()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalLines' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CodeCreateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CONTENT_ID_FIELD_DESC);
      oprot.writeI64(struct.contentId);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.langType != null) {
        oprot.writeFieldBegin(LANG_TYPE_FIELD_DESC);
        oprot.writeString(struct.langType);
        oprot.writeFieldEnd();
      }
      if (struct.contentHead != null) {
        oprot.writeFieldBegin(CONTENT_HEAD_FIELD_DESC);
        oprot.writeString(struct.contentHead);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERATORID_FIELD_DESC);
      oprot.writeI32(struct.operatorid);
      oprot.writeFieldEnd();
      if (struct.operatorName != null) {
        if (struct.isSetOperatorName()) {
          oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.operatorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.downUrl != null) {
        oprot.writeFieldBegin(DOWN_URL_FIELD_DESC);
        oprot.writeString(struct.downUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_LINES_FIELD_DESC);
      oprot.writeI32(struct.totalLines);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CodeCreateContentTupleSchemeFactory implements SchemeFactory {
    public CodeCreateContentTupleScheme getScheme() {
      return new CodeCreateContentTupleScheme();
    }
  }

  private static class CodeCreateContentTupleScheme extends TupleScheme<CodeCreateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CodeCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.contentId);
      oprot.writeString(struct.title);
      oprot.writeString(struct.langType);
      oprot.writeString(struct.contentHead);
      oprot.writeI32(struct.size);
      oprot.writeI32(struct.operatorid);
      oprot.writeString(struct.downUrl);
      oprot.writeI32(struct.totalLines);
      oprot.writeI64(struct.createTime);
      BitSet optionals = new BitSet();
      if (struct.isSetDesc()) {
        optionals.set(0);
      }
      if (struct.isSetOperatorName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetOperatorName()) {
        oprot.writeString(struct.operatorName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CodeCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.contentId = iprot.readI64();
      struct.setContentIdIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.langType = iprot.readString();
      struct.setLangTypeIsSet(true);
      struct.contentHead = iprot.readString();
      struct.setContentHeadIsSet(true);
      struct.size = iprot.readI32();
      struct.setSizeIsSet(true);
      struct.operatorid = iprot.readI32();
      struct.setOperatoridIsSet(true);
      struct.downUrl = iprot.readString();
      struct.setDownUrlIsSet(true);
      struct.totalLines = iprot.readI32();
      struct.setTotalLinesIsSet(true);
      struct.createTime = iprot.readI64();
      struct.setCreateTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operatorName = iprot.readString();
        struct.setOperatorNameIsSet(true);
      }
    }
  }

}

