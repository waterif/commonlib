/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class APIImageContent implements org.apache.thrift.TBase<APIImageContent, APIImageContent._Fields>, java.io.Serializable, Cloneable, Comparable<APIImageContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APIImageContent");

  private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MEDIA_THUMB_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaThumb", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APIImageContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APIImageContentTupleSchemeFactory());
  }

  public String mediaId; // required
  public byte detailType; // required
  public String mediaThumb; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_ID((short)1, "mediaId"),
    DETAIL_TYPE((short)2, "detailType"),
    MEDIA_THUMB((short)3, "mediaThumb");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_ID
          return MEDIA_ID;
        case 2: // DETAIL_TYPE
          return DETAIL_TYPE;
        case 3: // MEDIA_THUMB
          return MEDIA_THUMB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DETAILTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEDIA_THUMB};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("detailType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MEDIA_THUMB, new org.apache.thrift.meta_data.FieldMetaData("mediaThumb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APIImageContent.class, metaDataMap);
  }

  public APIImageContent() {
  }

  public APIImageContent(
    String mediaId,
    byte detailType)
  {
    this();
    this.mediaId = mediaId;
    this.detailType = detailType;
    setDetailTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APIImageContent(APIImageContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMediaId()) {
      this.mediaId = other.mediaId;
    }
    this.detailType = other.detailType;
    if (other.isSetMediaThumb()) {
      this.mediaThumb = other.mediaThumb;
    }
  }

  public APIImageContent deepCopy() {
    return new APIImageContent(this);
  }

  @Override
  public void clear() {
    this.mediaId = null;
    setDetailTypeIsSet(false);
    this.detailType = 0;
    this.mediaThumb = null;
  }

  public String getMediaId() {
    return this.mediaId;
  }

  public APIImageContent setMediaId(String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

  public void unsetMediaId() {
    this.mediaId = null;
  }

  /** Returns true if field mediaId is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaId() {
    return this.mediaId != null;
  }

  public void setMediaIdIsSet(boolean value) {
    if (!value) {
      this.mediaId = null;
    }
  }

  public byte getDetailType() {
    return this.detailType;
  }

  public APIImageContent setDetailType(byte detailType) {
    this.detailType = detailType;
    setDetailTypeIsSet(true);
    return this;
  }

  public void unsetDetailType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  /** Returns true if field detailType is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailType() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  public void setDetailTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILTYPE_ISSET_ID, value);
  }

  public String getMediaThumb() {
    return this.mediaThumb;
  }

  public APIImageContent setMediaThumb(String mediaThumb) {
    this.mediaThumb = mediaThumb;
    return this;
  }

  public void unsetMediaThumb() {
    this.mediaThumb = null;
  }

  /** Returns true if field mediaThumb is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaThumb() {
    return this.mediaThumb != null;
  }

  public void setMediaThumbIsSet(boolean value) {
    if (!value) {
      this.mediaThumb = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_ID:
      if (value == null) {
        unsetMediaId();
      } else {
        setMediaId((String)value);
      }
      break;

    case DETAIL_TYPE:
      if (value == null) {
        unsetDetailType();
      } else {
        setDetailType((Byte)value);
      }
      break;

    case MEDIA_THUMB:
      if (value == null) {
        unsetMediaThumb();
      } else {
        setMediaThumb((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_ID:
      return getMediaId();

    case DETAIL_TYPE:
      return Byte.valueOf(getDetailType());

    case MEDIA_THUMB:
      return getMediaThumb();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_ID:
      return isSetMediaId();
    case DETAIL_TYPE:
      return isSetDetailType();
    case MEDIA_THUMB:
      return isSetMediaThumb();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APIImageContent)
      return this.equals((APIImageContent)that);
    return false;
  }

  public boolean equals(APIImageContent that) {
    if (that == null)
      return false;

    boolean this_present_mediaId = true && this.isSetMediaId();
    boolean that_present_mediaId = true && that.isSetMediaId();
    if (this_present_mediaId || that_present_mediaId) {
      if (!(this_present_mediaId && that_present_mediaId))
        return false;
      if (!this.mediaId.equals(that.mediaId))
        return false;
    }

    boolean this_present_detailType = true;
    boolean that_present_detailType = true;
    if (this_present_detailType || that_present_detailType) {
      if (!(this_present_detailType && that_present_detailType))
        return false;
      if (this.detailType != that.detailType)
        return false;
    }

    boolean this_present_mediaThumb = true && this.isSetMediaThumb();
    boolean that_present_mediaThumb = true && that.isSetMediaThumb();
    if (this_present_mediaThumb || that_present_mediaThumb) {
      if (!(this_present_mediaThumb && that_present_mediaThumb))
        return false;
      if (!this.mediaThumb.equals(that.mediaThumb))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mediaId = true && (isSetMediaId());
    list.add(present_mediaId);
    if (present_mediaId)
      list.add(mediaId);

    boolean present_detailType = true;
    list.add(present_detailType);
    if (present_detailType)
      list.add(detailType);

    boolean present_mediaThumb = true && (isSetMediaThumb());
    list.add(present_mediaThumb);
    if (present_mediaThumb)
      list.add(mediaThumb);

    return list.hashCode();
  }

  @Override
  public int compareTo(APIImageContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMediaId()).compareTo(other.isSetMediaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaId, other.mediaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailType()).compareTo(other.isSetDetailType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailType, other.detailType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaThumb()).compareTo(other.isSetMediaThumb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaThumb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaThumb, other.mediaThumb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APIImageContent(");
    boolean first = true;

    sb.append("mediaId:");
    if (this.mediaId == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailType:");
    sb.append(this.detailType);
    first = false;
    if (isSetMediaThumb()) {
      if (!first) sb.append(", ");
      sb.append("mediaThumb:");
      if (this.mediaThumb == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaThumb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mediaId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'detailType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APIImageContentStandardSchemeFactory implements SchemeFactory {
    public APIImageContentStandardScheme getScheme() {
      return new APIImageContentStandardScheme();
    }
  }

  private static class APIImageContentStandardScheme extends StandardScheme<APIImageContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APIImageContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaId = iprot.readString();
              struct.setMediaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETAIL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.detailType = iprot.readByte();
              struct.setDetailTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEDIA_THUMB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaThumb = iprot.readString();
              struct.setMediaThumbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDetailType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'detailType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APIImageContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mediaId != null) {
        oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
        oprot.writeString(struct.mediaId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DETAIL_TYPE_FIELD_DESC);
      oprot.writeByte(struct.detailType);
      oprot.writeFieldEnd();
      if (struct.mediaThumb != null) {
        if (struct.isSetMediaThumb()) {
          oprot.writeFieldBegin(MEDIA_THUMB_FIELD_DESC);
          oprot.writeString(struct.mediaThumb);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APIImageContentTupleSchemeFactory implements SchemeFactory {
    public APIImageContentTupleScheme getScheme() {
      return new APIImageContentTupleScheme();
    }
  }

  private static class APIImageContentTupleScheme extends TupleScheme<APIImageContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APIImageContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.mediaId);
      oprot.writeByte(struct.detailType);
      BitSet optionals = new BitSet();
      if (struct.isSetMediaThumb()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMediaThumb()) {
        oprot.writeString(struct.mediaThumb);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APIImageContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mediaId = iprot.readString();
      struct.setMediaIdIsSet(true);
      struct.detailType = iprot.readByte();
      struct.setDetailTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.mediaThumb = iprot.readString();
        struct.setMediaThumbIsSet(true);
      }
    }
  }

}

