/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class AtMessageReadedContent implements org.apache.thrift.TBase<AtMessageReadedContent, AtMessageReadedContent._Fields>, java.io.Serializable, Cloneable, Comparable<AtMessageReadedContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AtMessageReadedContent");

  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SEQ_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("seqList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AtMessageReadedContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AtMessageReadedContentTupleSchemeFactory());
  }

  public JID to; // required
  public byte sessionType; // required
  public List<Long> seqList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TO((short)1, "to"),
    SESSION_TYPE((short)2, "sessionType"),
    SEQ_LIST((short)3, "seqList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TO
          return TO;
        case 2: // SESSION_TYPE
          return SESSION_TYPE;
        case 3: // SEQ_LIST
          return SEQ_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JID.class)));
    tmpMap.put(_Fields.SESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sessionType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SEQ_LIST, new org.apache.thrift.meta_data.FieldMetaData("seqList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AtMessageReadedContent.class, metaDataMap);
  }

  public AtMessageReadedContent() {
  }

  public AtMessageReadedContent(
    JID to,
    byte sessionType,
    List<Long> seqList)
  {
    this();
    this.to = to;
    this.sessionType = sessionType;
    setSessionTypeIsSet(true);
    this.seqList = seqList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AtMessageReadedContent(AtMessageReadedContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTo()) {
      this.to = new JID(other.to);
    }
    this.sessionType = other.sessionType;
    if (other.isSetSeqList()) {
      List<Long> __this__seqList = new ArrayList<Long>(other.seqList);
      this.seqList = __this__seqList;
    }
  }

  public AtMessageReadedContent deepCopy() {
    return new AtMessageReadedContent(this);
  }

  @Override
  public void clear() {
    this.to = null;
    setSessionTypeIsSet(false);
    this.sessionType = 0;
    this.seqList = null;
  }

  public JID getTo() {
    return this.to;
  }

  public AtMessageReadedContent setTo(JID to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public byte getSessionType() {
    return this.sessionType;
  }

  public AtMessageReadedContent setSessionType(byte sessionType) {
    this.sessionType = sessionType;
    setSessionTypeIsSet(true);
    return this;
  }

  public void unsetSessionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONTYPE_ISSET_ID);
  }

  /** Returns true if field sessionType is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionType() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONTYPE_ISSET_ID);
  }

  public void setSessionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONTYPE_ISSET_ID, value);
  }

  public int getSeqListSize() {
    return (this.seqList == null) ? 0 : this.seqList.size();
  }

  public java.util.Iterator<Long> getSeqListIterator() {
    return (this.seqList == null) ? null : this.seqList.iterator();
  }

  public void addToSeqList(long elem) {
    if (this.seqList == null) {
      this.seqList = new ArrayList<Long>();
    }
    this.seqList.add(elem);
  }

  public List<Long> getSeqList() {
    return this.seqList;
  }

  public AtMessageReadedContent setSeqList(List<Long> seqList) {
    this.seqList = seqList;
    return this;
  }

  public void unsetSeqList() {
    this.seqList = null;
  }

  /** Returns true if field seqList is set (has been assigned a value) and false otherwise */
  public boolean isSetSeqList() {
    return this.seqList != null;
  }

  public void setSeqListIsSet(boolean value) {
    if (!value) {
      this.seqList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((JID)value);
      }
      break;

    case SESSION_TYPE:
      if (value == null) {
        unsetSessionType();
      } else {
        setSessionType((Byte)value);
      }
      break;

    case SEQ_LIST:
      if (value == null) {
        unsetSeqList();
      } else {
        setSeqList((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TO:
      return getTo();

    case SESSION_TYPE:
      return Byte.valueOf(getSessionType());

    case SEQ_LIST:
      return getSeqList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TO:
      return isSetTo();
    case SESSION_TYPE:
      return isSetSessionType();
    case SEQ_LIST:
      return isSetSeqList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AtMessageReadedContent)
      return this.equals((AtMessageReadedContent)that);
    return false;
  }

  public boolean equals(AtMessageReadedContent that) {
    if (that == null)
      return false;

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_sessionType = true;
    boolean that_present_sessionType = true;
    if (this_present_sessionType || that_present_sessionType) {
      if (!(this_present_sessionType && that_present_sessionType))
        return false;
      if (this.sessionType != that.sessionType)
        return false;
    }

    boolean this_present_seqList = true && this.isSetSeqList();
    boolean that_present_seqList = true && that.isSetSeqList();
    if (this_present_seqList || that_present_seqList) {
      if (!(this_present_seqList && that_present_seqList))
        return false;
      if (!this.seqList.equals(that.seqList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_to = true && (isSetTo());
    list.add(present_to);
    if (present_to)
      list.add(to);

    boolean present_sessionType = true;
    list.add(present_sessionType);
    if (present_sessionType)
      list.add(sessionType);

    boolean present_seqList = true && (isSetSeqList());
    list.add(present_seqList);
    if (present_seqList)
      list.add(seqList);

    return list.hashCode();
  }

  @Override
  public int compareTo(AtMessageReadedContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionType()).compareTo(other.isSetSessionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionType, other.sessionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeqList()).compareTo(other.isSetSeqList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeqList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seqList, other.seqList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AtMessageReadedContent(");
    boolean first = true;

    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionType:");
    sb.append(this.sessionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seqList:");
    if (this.seqList == null) {
      sb.append("null");
    } else {
      sb.append(this.seqList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (to == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'to' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sessionType' because it's a primitive and you chose the non-beans generator.
    if (seqList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'seqList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (to != null) {
      to.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AtMessageReadedContentStandardSchemeFactory implements SchemeFactory {
    public AtMessageReadedContentStandardScheme getScheme() {
      return new AtMessageReadedContentStandardScheme();
    }
  }

  private static class AtMessageReadedContentStandardScheme extends StandardScheme<AtMessageReadedContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AtMessageReadedContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.to = new JID();
              struct.to.read(iprot);
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.sessionType = iprot.readByte();
              struct.setSessionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEQ_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.seqList = new ArrayList<Long>(_list66.size);
                long _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = iprot.readI64();
                  struct.seqList.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setSeqListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AtMessageReadedContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        struct.to.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_TYPE_FIELD_DESC);
      oprot.writeByte(struct.sessionType);
      oprot.writeFieldEnd();
      if (struct.seqList != null) {
        oprot.writeFieldBegin(SEQ_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.seqList.size()));
          for (long _iter69 : struct.seqList)
          {
            oprot.writeI64(_iter69);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AtMessageReadedContentTupleSchemeFactory implements SchemeFactory {
    public AtMessageReadedContentTupleScheme getScheme() {
      return new AtMessageReadedContentTupleScheme();
    }
  }

  private static class AtMessageReadedContentTupleScheme extends TupleScheme<AtMessageReadedContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AtMessageReadedContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.to.write(oprot);
      oprot.writeByte(struct.sessionType);
      {
        oprot.writeI32(struct.seqList.size());
        for (long _iter70 : struct.seqList)
        {
          oprot.writeI64(_iter70);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AtMessageReadedContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.to = new JID();
      struct.to.read(iprot);
      struct.setToIsSet(true);
      struct.sessionType = iprot.readByte();
      struct.setSessionTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.seqList = new ArrayList<Long>(_list71.size);
        long _elem72;
        for (int _i73 = 0; _i73 < _list71.size; ++_i73)
        {
          _elem72 = iprot.readI64();
          struct.seqList.add(_elem72);
        }
      }
      struct.setSeqListIsSet(true);
    }
  }

}

