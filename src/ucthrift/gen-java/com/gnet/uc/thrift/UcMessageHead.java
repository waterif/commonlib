/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class UcMessageHead implements org.apache.thrift.TBase<UcMessageHead, UcMessageHead._Fields>, java.io.Serializable, Cloneable, Comparable<UcMessageHead> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UcMessageHead");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField APPID_FIELD_DESC = new org.apache.thrift.protocol.TField("appid", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField PRI_FIELD_DESC = new org.apache.thrift.protocol.TField("pri", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField PROTOCOLTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("protocoltype", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField PROTOCOLID_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolid", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField CONVERSATION_FIELD_DESC = new org.apache.thrift.protocol.TField("conversation", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TO_PRIVATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toPrivate", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField CONTROL_PRI_FIELD_DESC = new org.apache.thrift.protocol.TField("controlPri", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField CHANNEL_PRI_FIELD_DESC = new org.apache.thrift.protocol.TField("channelPri", org.apache.thrift.protocol.TType.I16, (short)16);
  private static final org.apache.thrift.protocol.TField GROUP_AT_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("groupAtUsers", org.apache.thrift.protocol.TType.LIST, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UcMessageHeadStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UcMessageHeadTupleSchemeFactory());
  }

  public short version; // required
  public short appid; // required
  public byte pri; // required
  public byte protocoltype; // required
  public short protocolid; // required
  public int id; // required
  public long seq; // required
  public long timestamp; // required
  public JID from; // required
  public JID to; // required
  public int conversation; // required
  public int length; // required
  public JID toPrivate; // optional
  public byte controlPri; // optional
  public short channelPri; // optional
  public List<JID> groupAtUsers; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    APPID((short)2, "appid"),
    PRI((short)3, "pri"),
    PROTOCOLTYPE((short)4, "protocoltype"),
    PROTOCOLID((short)5, "protocolid"),
    ID((short)6, "id"),
    SEQ((short)7, "seq"),
    TIMESTAMP((short)8, "timestamp"),
    FROM((short)10, "from"),
    TO((short)11, "to"),
    CONVERSATION((short)12, "conversation"),
    LENGTH((short)13, "length"),
    TO_PRIVATE((short)14, "toPrivate"),
    CONTROL_PRI((short)15, "controlPri"),
    CHANNEL_PRI((short)16, "channelPri"),
    GROUP_AT_USERS((short)17, "groupAtUsers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // APPID
          return APPID;
        case 3: // PRI
          return PRI;
        case 4: // PROTOCOLTYPE
          return PROTOCOLTYPE;
        case 5: // PROTOCOLID
          return PROTOCOLID;
        case 6: // ID
          return ID;
        case 7: // SEQ
          return SEQ;
        case 8: // TIMESTAMP
          return TIMESTAMP;
        case 10: // FROM
          return FROM;
        case 11: // TO
          return TO;
        case 12: // CONVERSATION
          return CONVERSATION;
        case 13: // LENGTH
          return LENGTH;
        case 14: // TO_PRIVATE
          return TO_PRIVATE;
        case 15: // CONTROL_PRI
          return CONTROL_PRI;
        case 16: // CHANNEL_PRI
          return CHANNEL_PRI;
        case 17: // GROUP_AT_USERS
          return GROUP_AT_USERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private static final int __PRI_ISSET_ID = 2;
  private static final int __PROTOCOLTYPE_ISSET_ID = 3;
  private static final int __PROTOCOLID_ISSET_ID = 4;
  private static final int __ID_ISSET_ID = 5;
  private static final int __SEQ_ISSET_ID = 6;
  private static final int __TIMESTAMP_ISSET_ID = 7;
  private static final int __CONVERSATION_ISSET_ID = 8;
  private static final int __LENGTH_ISSET_ID = 9;
  private static final int __CONTROLPRI_ISSET_ID = 10;
  private static final int __CHANNELPRI_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TO_PRIVATE,_Fields.CONTROL_PRI,_Fields.CHANNEL_PRI,_Fields.GROUP_AT_USERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.APPID, new org.apache.thrift.meta_data.FieldMetaData("appid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PRI, new org.apache.thrift.meta_data.FieldMetaData("pri", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PROTOCOLTYPE, new org.apache.thrift.meta_data.FieldMetaData("protocoltype", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PROTOCOLID, new org.apache.thrift.meta_data.FieldMetaData("protocolid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JID.class)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JID.class)));
    tmpMap.put(_Fields.CONVERSATION, new org.apache.thrift.meta_data.FieldMetaData("conversation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_PRIVATE, new org.apache.thrift.meta_data.FieldMetaData("toPrivate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JID.class)));
    tmpMap.put(_Fields.CONTROL_PRI, new org.apache.thrift.meta_data.FieldMetaData("controlPri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHANNEL_PRI, new org.apache.thrift.meta_data.FieldMetaData("channelPri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GROUP_AT_USERS, new org.apache.thrift.meta_data.FieldMetaData("groupAtUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JID.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UcMessageHead.class, metaDataMap);
  }

  public UcMessageHead() {
    this.version = (short)256;

    this.pri = (byte)0;

    this.controlPri = (byte)15;

  }

  public UcMessageHead(
    short version,
    short appid,
    byte pri,
    byte protocoltype,
    short protocolid,
    int id,
    long seq,
    long timestamp,
    JID from,
    JID to,
    int conversation,
    int length)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.appid = appid;
    setAppidIsSet(true);
    this.pri = pri;
    setPriIsSet(true);
    this.protocoltype = protocoltype;
    setProtocoltypeIsSet(true);
    this.protocolid = protocolid;
    setProtocolidIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.seq = seq;
    setSeqIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.from = from;
    this.to = to;
    this.conversation = conversation;
    setConversationIsSet(true);
    this.length = length;
    setLengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UcMessageHead(UcMessageHead other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.appid = other.appid;
    this.pri = other.pri;
    this.protocoltype = other.protocoltype;
    this.protocolid = other.protocolid;
    this.id = other.id;
    this.seq = other.seq;
    this.timestamp = other.timestamp;
    if (other.isSetFrom()) {
      this.from = new JID(other.from);
    }
    if (other.isSetTo()) {
      this.to = new JID(other.to);
    }
    this.conversation = other.conversation;
    this.length = other.length;
    if (other.isSetToPrivate()) {
      this.toPrivate = new JID(other.toPrivate);
    }
    this.controlPri = other.controlPri;
    this.channelPri = other.channelPri;
    if (other.isSetGroupAtUsers()) {
      List<JID> __this__groupAtUsers = new ArrayList<JID>(other.groupAtUsers.size());
      for (JID other_element : other.groupAtUsers) {
        __this__groupAtUsers.add(new JID(other_element));
      }
      this.groupAtUsers = __this__groupAtUsers;
    }
  }

  public UcMessageHead deepCopy() {
    return new UcMessageHead(this);
  }

  @Override
  public void clear() {
    this.version = (short)256;

    setAppidIsSet(false);
    this.appid = 0;
    this.pri = (byte)0;

    setProtocoltypeIsSet(false);
    this.protocoltype = 0;
    setProtocolidIsSet(false);
    this.protocolid = 0;
    setIdIsSet(false);
    this.id = 0;
    setSeqIsSet(false);
    this.seq = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.from = null;
    this.to = null;
    setConversationIsSet(false);
    this.conversation = 0;
    setLengthIsSet(false);
    this.length = 0;
    this.toPrivate = null;
    this.controlPri = (byte)15;

    setChannelPriIsSet(false);
    this.channelPri = 0;
    this.groupAtUsers = null;
  }

  public short getVersion() {
    return this.version;
  }

  public UcMessageHead setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public short getAppid() {
    return this.appid;
  }

  public UcMessageHead setAppid(short appid) {
    this.appid = appid;
    setAppidIsSet(true);
    return this;
  }

  public void unsetAppid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appid is set (has been assigned a value) and false otherwise */
  public boolean isSetAppid() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public byte getPri() {
    return this.pri;
  }

  public UcMessageHead setPri(byte pri) {
    this.pri = pri;
    setPriIsSet(true);
    return this;
  }

  public void unsetPri() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRI_ISSET_ID);
  }

  /** Returns true if field pri is set (has been assigned a value) and false otherwise */
  public boolean isSetPri() {
    return EncodingUtils.testBit(__isset_bitfield, __PRI_ISSET_ID);
  }

  public void setPriIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRI_ISSET_ID, value);
  }

  public byte getProtocoltype() {
    return this.protocoltype;
  }

  public UcMessageHead setProtocoltype(byte protocoltype) {
    this.protocoltype = protocoltype;
    setProtocoltypeIsSet(true);
    return this;
  }

  public void unsetProtocoltype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROTOCOLTYPE_ISSET_ID);
  }

  /** Returns true if field protocoltype is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocoltype() {
    return EncodingUtils.testBit(__isset_bitfield, __PROTOCOLTYPE_ISSET_ID);
  }

  public void setProtocoltypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROTOCOLTYPE_ISSET_ID, value);
  }

  public short getProtocolid() {
    return this.protocolid;
  }

  public UcMessageHead setProtocolid(short protocolid) {
    this.protocolid = protocolid;
    setProtocolidIsSet(true);
    return this;
  }

  public void unsetProtocolid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROTOCOLID_ISSET_ID);
  }

  /** Returns true if field protocolid is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolid() {
    return EncodingUtils.testBit(__isset_bitfield, __PROTOCOLID_ISSET_ID);
  }

  public void setProtocolidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROTOCOLID_ISSET_ID, value);
  }

  public int getId() {
    return this.id;
  }

  public UcMessageHead setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getSeq() {
    return this.seq;
  }

  public UcMessageHead setSeq(long seq) {
    this.seq = seq;
    setSeqIsSet(true);
    return this;
  }

  public void unsetSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  /** Returns true if field seq is set (has been assigned a value) and false otherwise */
  public boolean isSetSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  public void setSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public UcMessageHead setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public JID getFrom() {
    return this.from;
  }

  public UcMessageHead setFrom(JID from) {
    this.from = from;
    return this;
  }

  public void unsetFrom() {
    this.from = null;
  }

  /** Returns true if field from is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom() {
    return this.from != null;
  }

  public void setFromIsSet(boolean value) {
    if (!value) {
      this.from = null;
    }
  }

  public JID getTo() {
    return this.to;
  }

  public UcMessageHead setTo(JID to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public int getConversation() {
    return this.conversation;
  }

  public UcMessageHead setConversation(int conversation) {
    this.conversation = conversation;
    setConversationIsSet(true);
    return this;
  }

  public void unsetConversation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONVERSATION_ISSET_ID);
  }

  /** Returns true if field conversation is set (has been assigned a value) and false otherwise */
  public boolean isSetConversation() {
    return EncodingUtils.testBit(__isset_bitfield, __CONVERSATION_ISSET_ID);
  }

  public void setConversationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONVERSATION_ISSET_ID, value);
  }

  public int getLength() {
    return this.length;
  }

  public UcMessageHead setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public JID getToPrivate() {
    return this.toPrivate;
  }

  public UcMessageHead setToPrivate(JID toPrivate) {
    this.toPrivate = toPrivate;
    return this;
  }

  public void unsetToPrivate() {
    this.toPrivate = null;
  }

  /** Returns true if field toPrivate is set (has been assigned a value) and false otherwise */
  public boolean isSetToPrivate() {
    return this.toPrivate != null;
  }

  public void setToPrivateIsSet(boolean value) {
    if (!value) {
      this.toPrivate = null;
    }
  }

  public byte getControlPri() {
    return this.controlPri;
  }

  public UcMessageHead setControlPri(byte controlPri) {
    this.controlPri = controlPri;
    setControlPriIsSet(true);
    return this;
  }

  public void unsetControlPri() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTROLPRI_ISSET_ID);
  }

  /** Returns true if field controlPri is set (has been assigned a value) and false otherwise */
  public boolean isSetControlPri() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTROLPRI_ISSET_ID);
  }

  public void setControlPriIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTROLPRI_ISSET_ID, value);
  }

  public short getChannelPri() {
    return this.channelPri;
  }

  public UcMessageHead setChannelPri(short channelPri) {
    this.channelPri = channelPri;
    setChannelPriIsSet(true);
    return this;
  }

  public void unsetChannelPri() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELPRI_ISSET_ID);
  }

  /** Returns true if field channelPri is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelPri() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNELPRI_ISSET_ID);
  }

  public void setChannelPriIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELPRI_ISSET_ID, value);
  }

  public int getGroupAtUsersSize() {
    return (this.groupAtUsers == null) ? 0 : this.groupAtUsers.size();
  }

  public java.util.Iterator<JID> getGroupAtUsersIterator() {
    return (this.groupAtUsers == null) ? null : this.groupAtUsers.iterator();
  }

  public void addToGroupAtUsers(JID elem) {
    if (this.groupAtUsers == null) {
      this.groupAtUsers = new ArrayList<JID>();
    }
    this.groupAtUsers.add(elem);
  }

  public List<JID> getGroupAtUsers() {
    return this.groupAtUsers;
  }

  public UcMessageHead setGroupAtUsers(List<JID> groupAtUsers) {
    this.groupAtUsers = groupAtUsers;
    return this;
  }

  public void unsetGroupAtUsers() {
    this.groupAtUsers = null;
  }

  /** Returns true if field groupAtUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupAtUsers() {
    return this.groupAtUsers != null;
  }

  public void setGroupAtUsersIsSet(boolean value) {
    if (!value) {
      this.groupAtUsers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Short)value);
      }
      break;

    case APPID:
      if (value == null) {
        unsetAppid();
      } else {
        setAppid((Short)value);
      }
      break;

    case PRI:
      if (value == null) {
        unsetPri();
      } else {
        setPri((Byte)value);
      }
      break;

    case PROTOCOLTYPE:
      if (value == null) {
        unsetProtocoltype();
      } else {
        setProtocoltype((Byte)value);
      }
      break;

    case PROTOCOLID:
      if (value == null) {
        unsetProtocolid();
      } else {
        setProtocolid((Short)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case SEQ:
      if (value == null) {
        unsetSeq();
      } else {
        setSeq((Long)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case FROM:
      if (value == null) {
        unsetFrom();
      } else {
        setFrom((JID)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((JID)value);
      }
      break;

    case CONVERSATION:
      if (value == null) {
        unsetConversation();
      } else {
        setConversation((Integer)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case TO_PRIVATE:
      if (value == null) {
        unsetToPrivate();
      } else {
        setToPrivate((JID)value);
      }
      break;

    case CONTROL_PRI:
      if (value == null) {
        unsetControlPri();
      } else {
        setControlPri((Byte)value);
      }
      break;

    case CHANNEL_PRI:
      if (value == null) {
        unsetChannelPri();
      } else {
        setChannelPri((Short)value);
      }
      break;

    case GROUP_AT_USERS:
      if (value == null) {
        unsetGroupAtUsers();
      } else {
        setGroupAtUsers((List<JID>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Short.valueOf(getVersion());

    case APPID:
      return Short.valueOf(getAppid());

    case PRI:
      return Byte.valueOf(getPri());

    case PROTOCOLTYPE:
      return Byte.valueOf(getProtocoltype());

    case PROTOCOLID:
      return Short.valueOf(getProtocolid());

    case ID:
      return Integer.valueOf(getId());

    case SEQ:
      return Long.valueOf(getSeq());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case FROM:
      return getFrom();

    case TO:
      return getTo();

    case CONVERSATION:
      return Integer.valueOf(getConversation());

    case LENGTH:
      return Integer.valueOf(getLength());

    case TO_PRIVATE:
      return getToPrivate();

    case CONTROL_PRI:
      return Byte.valueOf(getControlPri());

    case CHANNEL_PRI:
      return Short.valueOf(getChannelPri());

    case GROUP_AT_USERS:
      return getGroupAtUsers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case APPID:
      return isSetAppid();
    case PRI:
      return isSetPri();
    case PROTOCOLTYPE:
      return isSetProtocoltype();
    case PROTOCOLID:
      return isSetProtocolid();
    case ID:
      return isSetId();
    case SEQ:
      return isSetSeq();
    case TIMESTAMP:
      return isSetTimestamp();
    case FROM:
      return isSetFrom();
    case TO:
      return isSetTo();
    case CONVERSATION:
      return isSetConversation();
    case LENGTH:
      return isSetLength();
    case TO_PRIVATE:
      return isSetToPrivate();
    case CONTROL_PRI:
      return isSetControlPri();
    case CHANNEL_PRI:
      return isSetChannelPri();
    case GROUP_AT_USERS:
      return isSetGroupAtUsers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UcMessageHead)
      return this.equals((UcMessageHead)that);
    return false;
  }

  public boolean equals(UcMessageHead that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_appid = true;
    boolean that_present_appid = true;
    if (this_present_appid || that_present_appid) {
      if (!(this_present_appid && that_present_appid))
        return false;
      if (this.appid != that.appid)
        return false;
    }

    boolean this_present_pri = true;
    boolean that_present_pri = true;
    if (this_present_pri || that_present_pri) {
      if (!(this_present_pri && that_present_pri))
        return false;
      if (this.pri != that.pri)
        return false;
    }

    boolean this_present_protocoltype = true;
    boolean that_present_protocoltype = true;
    if (this_present_protocoltype || that_present_protocoltype) {
      if (!(this_present_protocoltype && that_present_protocoltype))
        return false;
      if (this.protocoltype != that.protocoltype)
        return false;
    }

    boolean this_present_protocolid = true;
    boolean that_present_protocolid = true;
    if (this_present_protocolid || that_present_protocolid) {
      if (!(this_present_protocolid && that_present_protocolid))
        return false;
      if (this.protocolid != that.protocolid)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_seq = true;
    boolean that_present_seq = true;
    if (this_present_seq || that_present_seq) {
      if (!(this_present_seq && that_present_seq))
        return false;
      if (this.seq != that.seq)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_from = true && this.isSetFrom();
    boolean that_present_from = true && that.isSetFrom();
    if (this_present_from || that_present_from) {
      if (!(this_present_from && that_present_from))
        return false;
      if (!this.from.equals(that.from))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_conversation = true;
    boolean that_present_conversation = true;
    if (this_present_conversation || that_present_conversation) {
      if (!(this_present_conversation && that_present_conversation))
        return false;
      if (this.conversation != that.conversation)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_toPrivate = true && this.isSetToPrivate();
    boolean that_present_toPrivate = true && that.isSetToPrivate();
    if (this_present_toPrivate || that_present_toPrivate) {
      if (!(this_present_toPrivate && that_present_toPrivate))
        return false;
      if (!this.toPrivate.equals(that.toPrivate))
        return false;
    }

    boolean this_present_controlPri = true && this.isSetControlPri();
    boolean that_present_controlPri = true && that.isSetControlPri();
    if (this_present_controlPri || that_present_controlPri) {
      if (!(this_present_controlPri && that_present_controlPri))
        return false;
      if (this.controlPri != that.controlPri)
        return false;
    }

    boolean this_present_channelPri = true && this.isSetChannelPri();
    boolean that_present_channelPri = true && that.isSetChannelPri();
    if (this_present_channelPri || that_present_channelPri) {
      if (!(this_present_channelPri && that_present_channelPri))
        return false;
      if (this.channelPri != that.channelPri)
        return false;
    }

    boolean this_present_groupAtUsers = true && this.isSetGroupAtUsers();
    boolean that_present_groupAtUsers = true && that.isSetGroupAtUsers();
    if (this_present_groupAtUsers || that_present_groupAtUsers) {
      if (!(this_present_groupAtUsers && that_present_groupAtUsers))
        return false;
      if (!this.groupAtUsers.equals(that.groupAtUsers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_appid = true;
    list.add(present_appid);
    if (present_appid)
      list.add(appid);

    boolean present_pri = true;
    list.add(present_pri);
    if (present_pri)
      list.add(pri);

    boolean present_protocoltype = true;
    list.add(present_protocoltype);
    if (present_protocoltype)
      list.add(protocoltype);

    boolean present_protocolid = true;
    list.add(present_protocolid);
    if (present_protocolid)
      list.add(protocolid);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_seq = true;
    list.add(present_seq);
    if (present_seq)
      list.add(seq);

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_from = true && (isSetFrom());
    list.add(present_from);
    if (present_from)
      list.add(from);

    boolean present_to = true && (isSetTo());
    list.add(present_to);
    if (present_to)
      list.add(to);

    boolean present_conversation = true;
    list.add(present_conversation);
    if (present_conversation)
      list.add(conversation);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_toPrivate = true && (isSetToPrivate());
    list.add(present_toPrivate);
    if (present_toPrivate)
      list.add(toPrivate);

    boolean present_controlPri = true && (isSetControlPri());
    list.add(present_controlPri);
    if (present_controlPri)
      list.add(controlPri);

    boolean present_channelPri = true && (isSetChannelPri());
    list.add(present_channelPri);
    if (present_channelPri)
      list.add(channelPri);

    boolean present_groupAtUsers = true && (isSetGroupAtUsers());
    list.add(present_groupAtUsers);
    if (present_groupAtUsers)
      list.add(groupAtUsers);

    return list.hashCode();
  }

  @Override
  public int compareTo(UcMessageHead other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppid()).compareTo(other.isSetAppid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appid, other.appid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPri()).compareTo(other.isSetPri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pri, other.pri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocoltype()).compareTo(other.isSetProtocoltype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocoltype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocoltype, other.protocoltype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolid()).compareTo(other.isSetProtocolid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolid, other.protocolid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom()).compareTo(other.isSetFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, other.from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConversation()).compareTo(other.isSetConversation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConversation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conversation, other.conversation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToPrivate()).compareTo(other.isSetToPrivate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToPrivate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toPrivate, other.toPrivate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControlPri()).compareTo(other.isSetControlPri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControlPri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.controlPri, other.controlPri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelPri()).compareTo(other.isSetChannelPri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelPri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelPri, other.channelPri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupAtUsers()).compareTo(other.isSetGroupAtUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupAtUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupAtUsers, other.groupAtUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UcMessageHead(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appid:");
    sb.append(this.appid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pri:");
    sb.append(this.pri);
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocoltype:");
    sb.append(this.protocoltype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolid:");
    sb.append(this.protocolid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seq:");
    sb.append(this.seq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("from:");
    if (this.from == null) {
      sb.append("null");
    } else {
      sb.append(this.from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("conversation:");
    sb.append(this.conversation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (isSetToPrivate()) {
      if (!first) sb.append(", ");
      sb.append("toPrivate:");
      if (this.toPrivate == null) {
        sb.append("null");
      } else {
        sb.append(this.toPrivate);
      }
      first = false;
    }
    if (isSetControlPri()) {
      if (!first) sb.append(", ");
      sb.append("controlPri:");
      sb.append(this.controlPri);
      first = false;
    }
    if (isSetChannelPri()) {
      if (!first) sb.append(", ");
      sb.append("channelPri:");
      sb.append(this.channelPri);
      first = false;
    }
    if (isSetGroupAtUsers()) {
      if (!first) sb.append(", ");
      sb.append("groupAtUsers:");
      if (this.groupAtUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.groupAtUsers);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'appid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pri' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'protocoltype' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'protocolid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'seq' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    if (from == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'from' was not present! Struct: " + toString());
    }
    if (to == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'to' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'conversation' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'length' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (from != null) {
      from.validate();
    }
    if (to != null) {
      to.validate();
    }
    if (toPrivate != null) {
      toPrivate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UcMessageHeadStandardSchemeFactory implements SchemeFactory {
    public UcMessageHeadStandardScheme getScheme() {
      return new UcMessageHeadStandardScheme();
    }
  }

  private static class UcMessageHeadStandardScheme extends StandardScheme<UcMessageHead> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UcMessageHead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.appid = iprot.readI16();
              struct.setAppidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRI
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.pri = iprot.readByte();
              struct.setPriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROTOCOLTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.protocoltype = iprot.readByte();
              struct.setProtocoltypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROTOCOLID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.protocolid = iprot.readI16();
              struct.setProtocolidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seq = iprot.readI64();
              struct.setSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.from = new JID();
              struct.from.read(iprot);
              struct.setFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.to = new JID();
              struct.to.read(iprot);
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONVERSATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conversation = iprot.readI32();
              struct.setConversationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TO_PRIVATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toPrivate = new JID();
              struct.toPrivate.read(iprot);
              struct.setToPrivateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CONTROL_PRI
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.controlPri = iprot.readByte();
              struct.setControlPriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CHANNEL_PRI
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.channelPri = iprot.readI16();
              struct.setChannelPriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GROUP_AT_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                struct.groupAtUsers = new ArrayList<JID>(_list74.size);
                JID _elem75;
                for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                {
                  _elem75 = new JID();
                  _elem75.read(iprot);
                  struct.groupAtUsers.add(_elem75);
                }
                iprot.readListEnd();
              }
              struct.setGroupAtUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAppid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPri()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pri' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProtocoltype()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocoltype' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProtocolid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocolid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSeq()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'seq' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConversation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'conversation' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UcMessageHead struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI16(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPID_FIELD_DESC);
      oprot.writeI16(struct.appid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRI_FIELD_DESC);
      oprot.writeByte(struct.pri);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROTOCOLTYPE_FIELD_DESC);
      oprot.writeByte(struct.protocoltype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROTOCOLID_FIELD_DESC);
      oprot.writeI16(struct.protocolid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI64(struct.seq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.from != null) {
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        struct.from.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        struct.to.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONVERSATION_FIELD_DESC);
      oprot.writeI32(struct.conversation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      if (struct.toPrivate != null) {
        if (struct.isSetToPrivate()) {
          oprot.writeFieldBegin(TO_PRIVATE_FIELD_DESC);
          struct.toPrivate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetControlPri()) {
        oprot.writeFieldBegin(CONTROL_PRI_FIELD_DESC);
        oprot.writeByte(struct.controlPri);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChannelPri()) {
        oprot.writeFieldBegin(CHANNEL_PRI_FIELD_DESC);
        oprot.writeI16(struct.channelPri);
        oprot.writeFieldEnd();
      }
      if (struct.groupAtUsers != null) {
        if (struct.isSetGroupAtUsers()) {
          oprot.writeFieldBegin(GROUP_AT_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupAtUsers.size()));
            for (JID _iter77 : struct.groupAtUsers)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UcMessageHeadTupleSchemeFactory implements SchemeFactory {
    public UcMessageHeadTupleScheme getScheme() {
      return new UcMessageHeadTupleScheme();
    }
  }

  private static class UcMessageHeadTupleScheme extends TupleScheme<UcMessageHead> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UcMessageHead struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.version);
      oprot.writeI16(struct.appid);
      oprot.writeByte(struct.pri);
      oprot.writeByte(struct.protocoltype);
      oprot.writeI16(struct.protocolid);
      oprot.writeI32(struct.id);
      oprot.writeI64(struct.seq);
      oprot.writeI64(struct.timestamp);
      struct.from.write(oprot);
      struct.to.write(oprot);
      oprot.writeI32(struct.conversation);
      oprot.writeI32(struct.length);
      BitSet optionals = new BitSet();
      if (struct.isSetToPrivate()) {
        optionals.set(0);
      }
      if (struct.isSetControlPri()) {
        optionals.set(1);
      }
      if (struct.isSetChannelPri()) {
        optionals.set(2);
      }
      if (struct.isSetGroupAtUsers()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetToPrivate()) {
        struct.toPrivate.write(oprot);
      }
      if (struct.isSetControlPri()) {
        oprot.writeByte(struct.controlPri);
      }
      if (struct.isSetChannelPri()) {
        oprot.writeI16(struct.channelPri);
      }
      if (struct.isSetGroupAtUsers()) {
        {
          oprot.writeI32(struct.groupAtUsers.size());
          for (JID _iter78 : struct.groupAtUsers)
          {
            _iter78.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UcMessageHead struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = iprot.readI16();
      struct.setVersionIsSet(true);
      struct.appid = iprot.readI16();
      struct.setAppidIsSet(true);
      struct.pri = iprot.readByte();
      struct.setPriIsSet(true);
      struct.protocoltype = iprot.readByte();
      struct.setProtocoltypeIsSet(true);
      struct.protocolid = iprot.readI16();
      struct.setProtocolidIsSet(true);
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.seq = iprot.readI64();
      struct.setSeqIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      struct.from = new JID();
      struct.from.read(iprot);
      struct.setFromIsSet(true);
      struct.to = new JID();
      struct.to.read(iprot);
      struct.setToIsSet(true);
      struct.conversation = iprot.readI32();
      struct.setConversationIsSet(true);
      struct.length = iprot.readI32();
      struct.setLengthIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.toPrivate = new JID();
        struct.toPrivate.read(iprot);
        struct.setToPrivateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.controlPri = iprot.readByte();
        struct.setControlPriIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channelPri = iprot.readI16();
        struct.setChannelPriIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupAtUsers = new ArrayList<JID>(_list79.size);
          JID _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = new JID();
            _elem80.read(iprot);
            struct.groupAtUsers.add(_elem80);
          }
        }
        struct.setGroupAtUsersIsSet(true);
      }
    }
  }

}

