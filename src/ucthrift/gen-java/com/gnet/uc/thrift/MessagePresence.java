/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class MessagePresence implements org.apache.thrift.TBase<MessagePresence, MessagePresence._Fields>, java.io.Serializable, Cloneable, Comparable<MessagePresence> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessagePresence");

  private static final org.apache.thrift.protocol.TField PRI_FIELD_DESC = new org.apache.thrift.protocol.TField("pri", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("show", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OLD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("oldStatus", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessagePresenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessagePresenceTupleSchemeFactory());
  }

  public int pri; // required
  public String show; // required
  /**
   * 
   * @see PresenceType
   */
  public PresenceType status; // required
  /**
   * 
   * @see DeviceType
   */
  public DeviceType deviceType; // required
  /**
   * 
   * @see PresenceType
   */
  public PresenceType oldStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRI((short)1, "pri"),
    SHOW((short)2, "show"),
    /**
     * 
     * @see PresenceType
     */
    STATUS((short)3, "status"),
    /**
     * 
     * @see DeviceType
     */
    DEVICE_TYPE((short)4, "deviceType"),
    /**
     * 
     * @see PresenceType
     */
    OLD_STATUS((short)5, "oldStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRI
          return PRI;
        case 2: // SHOW
          return SHOW;
        case 3: // STATUS
          return STATUS;
        case 4: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 5: // OLD_STATUS
          return OLD_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRI_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OLD_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRI, new org.apache.thrift.meta_data.FieldMetaData("pri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW, new org.apache.thrift.meta_data.FieldMetaData("show", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PresenceType.class)));
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeviceType.class)));
    tmpMap.put(_Fields.OLD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("oldStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PresenceType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessagePresence.class, metaDataMap);
  }

  public MessagePresence() {
  }

  public MessagePresence(
    int pri,
    String show,
    PresenceType status,
    DeviceType deviceType)
  {
    this();
    this.pri = pri;
    setPriIsSet(true);
    this.show = show;
    this.status = status;
    this.deviceType = deviceType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessagePresence(MessagePresence other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pri = other.pri;
    if (other.isSetShow()) {
      this.show = other.show;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDeviceType()) {
      this.deviceType = other.deviceType;
    }
    if (other.isSetOldStatus()) {
      this.oldStatus = other.oldStatus;
    }
  }

  public MessagePresence deepCopy() {
    return new MessagePresence(this);
  }

  @Override
  public void clear() {
    setPriIsSet(false);
    this.pri = 0;
    this.show = null;
    this.status = null;
    this.deviceType = null;
    this.oldStatus = null;
  }

  public int getPri() {
    return this.pri;
  }

  public MessagePresence setPri(int pri) {
    this.pri = pri;
    setPriIsSet(true);
    return this;
  }

  public void unsetPri() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRI_ISSET_ID);
  }

  /** Returns true if field pri is set (has been assigned a value) and false otherwise */
  public boolean isSetPri() {
    return EncodingUtils.testBit(__isset_bitfield, __PRI_ISSET_ID);
  }

  public void setPriIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRI_ISSET_ID, value);
  }

  public String getShow() {
    return this.show;
  }

  public MessagePresence setShow(String show) {
    this.show = show;
    return this;
  }

  public void unsetShow() {
    this.show = null;
  }

  /** Returns true if field show is set (has been assigned a value) and false otherwise */
  public boolean isSetShow() {
    return this.show != null;
  }

  public void setShowIsSet(boolean value) {
    if (!value) {
      this.show = null;
    }
  }

  /**
   * 
   * @see PresenceType
   */
  public PresenceType getStatus() {
    return this.status;
  }

  /**
   * 
   * @see PresenceType
   */
  public MessagePresence setStatus(PresenceType status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 
   * @see DeviceType
   */
  public DeviceType getDeviceType() {
    return this.deviceType;
  }

  /**
   * 
   * @see DeviceType
   */
  public MessagePresence setDeviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  public void unsetDeviceType() {
    this.deviceType = null;
  }

  /** Returns true if field deviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return this.deviceType != null;
  }

  public void setDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.deviceType = null;
    }
  }

  /**
   * 
   * @see PresenceType
   */
  public PresenceType getOldStatus() {
    return this.oldStatus;
  }

  /**
   * 
   * @see PresenceType
   */
  public MessagePresence setOldStatus(PresenceType oldStatus) {
    this.oldStatus = oldStatus;
    return this;
  }

  public void unsetOldStatus() {
    this.oldStatus = null;
  }

  /** Returns true if field oldStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOldStatus() {
    return this.oldStatus != null;
  }

  public void setOldStatusIsSet(boolean value) {
    if (!value) {
      this.oldStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRI:
      if (value == null) {
        unsetPri();
      } else {
        setPri((Integer)value);
      }
      break;

    case SHOW:
      if (value == null) {
        unsetShow();
      } else {
        setShow((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((PresenceType)value);
      }
      break;

    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((DeviceType)value);
      }
      break;

    case OLD_STATUS:
      if (value == null) {
        unsetOldStatus();
      } else {
        setOldStatus((PresenceType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRI:
      return Integer.valueOf(getPri());

    case SHOW:
      return getShow();

    case STATUS:
      return getStatus();

    case DEVICE_TYPE:
      return getDeviceType();

    case OLD_STATUS:
      return getOldStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRI:
      return isSetPri();
    case SHOW:
      return isSetShow();
    case STATUS:
      return isSetStatus();
    case DEVICE_TYPE:
      return isSetDeviceType();
    case OLD_STATUS:
      return isSetOldStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessagePresence)
      return this.equals((MessagePresence)that);
    return false;
  }

  public boolean equals(MessagePresence that) {
    if (that == null)
      return false;

    boolean this_present_pri = true;
    boolean that_present_pri = true;
    if (this_present_pri || that_present_pri) {
      if (!(this_present_pri && that_present_pri))
        return false;
      if (this.pri != that.pri)
        return false;
    }

    boolean this_present_show = true && this.isSetShow();
    boolean that_present_show = true && that.isSetShow();
    if (this_present_show || that_present_show) {
      if (!(this_present_show && that_present_show))
        return false;
      if (!this.show.equals(that.show))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_deviceType = true && this.isSetDeviceType();
    boolean that_present_deviceType = true && that.isSetDeviceType();
    if (this_present_deviceType || that_present_deviceType) {
      if (!(this_present_deviceType && that_present_deviceType))
        return false;
      if (!this.deviceType.equals(that.deviceType))
        return false;
    }

    boolean this_present_oldStatus = true && this.isSetOldStatus();
    boolean that_present_oldStatus = true && that.isSetOldStatus();
    if (this_present_oldStatus || that_present_oldStatus) {
      if (!(this_present_oldStatus && that_present_oldStatus))
        return false;
      if (!this.oldStatus.equals(that.oldStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pri = true;
    list.add(present_pri);
    if (present_pri)
      list.add(pri);

    boolean present_show = true && (isSetShow());
    list.add(present_show);
    if (present_show)
      list.add(show);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_deviceType = true && (isSetDeviceType());
    list.add(present_deviceType);
    if (present_deviceType)
      list.add(deviceType.getValue());

    boolean present_oldStatus = true && (isSetOldStatus());
    list.add(present_oldStatus);
    if (present_oldStatus)
      list.add(oldStatus.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(MessagePresence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPri()).compareTo(other.isSetPri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pri, other.pri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow()).compareTo(other.isSetShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show, other.show);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceType()).compareTo(other.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceType, other.deviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldStatus()).compareTo(other.isSetOldStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldStatus, other.oldStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessagePresence(");
    boolean first = true;

    sb.append("pri:");
    sb.append(this.pri);
    first = false;
    if (!first) sb.append(", ");
    sb.append("show:");
    if (this.show == null) {
      sb.append("null");
    } else {
      sb.append(this.show);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceType:");
    if (this.deviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceType);
    }
    first = false;
    if (isSetOldStatus()) {
      if (!first) sb.append(", ");
      sb.append("oldStatus:");
      if (this.oldStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.oldStatus);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessagePresenceStandardSchemeFactory implements SchemeFactory {
    public MessagePresenceStandardScheme getScheme() {
      return new MessagePresenceStandardScheme();
    }
  }

  private static class MessagePresenceStandardScheme extends StandardScheme<MessagePresence> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessagePresence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pri = iprot.readI32();
              struct.setPriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.show = iprot.readString();
              struct.setShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.gnet.uc.thrift.PresenceType.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceType = com.gnet.uc.thrift.DeviceType.findByValue(iprot.readI32());
              struct.setDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OLD_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oldStatus = com.gnet.uc.thrift.PresenceType.findByValue(iprot.readI32());
              struct.setOldStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessagePresence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRI_FIELD_DESC);
      oprot.writeI32(struct.pri);
      oprot.writeFieldEnd();
      if (struct.show != null) {
        oprot.writeFieldBegin(SHOW_FIELD_DESC);
        oprot.writeString(struct.show);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.deviceType != null) {
        oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.deviceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.oldStatus != null) {
        if (struct.isSetOldStatus()) {
          oprot.writeFieldBegin(OLD_STATUS_FIELD_DESC);
          oprot.writeI32(struct.oldStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessagePresenceTupleSchemeFactory implements SchemeFactory {
    public MessagePresenceTupleScheme getScheme() {
      return new MessagePresenceTupleScheme();
    }
  }

  private static class MessagePresenceTupleScheme extends TupleScheme<MessagePresence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessagePresence struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPri()) {
        optionals.set(0);
      }
      if (struct.isSetShow()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceType()) {
        optionals.set(3);
      }
      if (struct.isSetOldStatus()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPri()) {
        oprot.writeI32(struct.pri);
      }
      if (struct.isSetShow()) {
        oprot.writeString(struct.show);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetDeviceType()) {
        oprot.writeI32(struct.deviceType.getValue());
      }
      if (struct.isSetOldStatus()) {
        oprot.writeI32(struct.oldStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessagePresence struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pri = iprot.readI32();
        struct.setPriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.show = iprot.readString();
        struct.setShowIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = com.gnet.uc.thrift.PresenceType.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceType = com.gnet.uc.thrift.DeviceType.findByValue(iprot.readI32());
        struct.setDeviceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.oldStatus = com.gnet.uc.thrift.PresenceType.findByValue(iprot.readI32());
        struct.setOldStatusIsSet(true);
      }
    }
  }

}

