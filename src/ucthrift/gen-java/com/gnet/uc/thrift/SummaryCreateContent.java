/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class SummaryCreateContent implements org.apache.thrift.TBase<SummaryCreateContent, SummaryCreateContent._Fields>, java.io.Serializable, Cloneable, Comparable<SummaryCreateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SummaryCreateContent");

  private static final org.apache.thrift.protocol.TField OPERATORID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUMMARY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("summary_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOWN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("down_url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contentId", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SummaryCreateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SummaryCreateContentTupleSchemeFactory());
  }

  public int operatorid; // required
  public String summary_name; // required
  public String down_url; // optional
  public int size; // optional
  public long contentId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATORID((short)1, "operatorid"),
    SUMMARY_NAME((short)2, "summary_name"),
    DOWN_URL((short)3, "down_url"),
    SIZE((short)4, "size"),
    CONTENT_ID((short)5, "contentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATORID
          return OPERATORID;
        case 2: // SUMMARY_NAME
          return SUMMARY_NAME;
        case 3: // DOWN_URL
          return DOWN_URL;
        case 4: // SIZE
          return SIZE;
        case 5: // CONTENT_ID
          return CONTENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private static final int __CONTENTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOWN_URL,_Fields.SIZE,_Fields.CONTENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATORID, new org.apache.thrift.meta_data.FieldMetaData("operatorid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUMMARY_NAME, new org.apache.thrift.meta_data.FieldMetaData("summary_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWN_URL, new org.apache.thrift.meta_data.FieldMetaData("down_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("contentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SummaryCreateContent.class, metaDataMap);
  }

  public SummaryCreateContent() {
  }

  public SummaryCreateContent(
    int operatorid,
    String summary_name)
  {
    this();
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    this.summary_name = summary_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SummaryCreateContent(SummaryCreateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operatorid = other.operatorid;
    if (other.isSetSummary_name()) {
      this.summary_name = other.summary_name;
    }
    if (other.isSetDown_url()) {
      this.down_url = other.down_url;
    }
    this.size = other.size;
    this.contentId = other.contentId;
  }

  public SummaryCreateContent deepCopy() {
    return new SummaryCreateContent(this);
  }

  @Override
  public void clear() {
    setOperatoridIsSet(false);
    this.operatorid = 0;
    this.summary_name = null;
    this.down_url = null;
    setSizeIsSet(false);
    this.size = 0;
    setContentIdIsSet(false);
    this.contentId = 0;
  }

  public int getOperatorid() {
    return this.operatorid;
  }

  public SummaryCreateContent setOperatorid(int operatorid) {
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    return this;
  }

  public void unsetOperatorid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorid is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorid() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatoridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public String getSummary_name() {
    return this.summary_name;
  }

  public SummaryCreateContent setSummary_name(String summary_name) {
    this.summary_name = summary_name;
    return this;
  }

  public void unsetSummary_name() {
    this.summary_name = null;
  }

  /** Returns true if field summary_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary_name() {
    return this.summary_name != null;
  }

  public void setSummary_nameIsSet(boolean value) {
    if (!value) {
      this.summary_name = null;
    }
  }

  public String getDown_url() {
    return this.down_url;
  }

  public SummaryCreateContent setDown_url(String down_url) {
    this.down_url = down_url;
    return this;
  }

  public void unsetDown_url() {
    this.down_url = null;
  }

  /** Returns true if field down_url is set (has been assigned a value) and false otherwise */
  public boolean isSetDown_url() {
    return this.down_url != null;
  }

  public void setDown_urlIsSet(boolean value) {
    if (!value) {
      this.down_url = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public SummaryCreateContent setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public long getContentId() {
    return this.contentId;
  }

  public SummaryCreateContent setContentId(long contentId) {
    this.contentId = contentId;
    setContentIdIsSet(true);
    return this;
  }

  public void unsetContentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  /** Returns true if field contentId is set (has been assigned a value) and false otherwise */
  public boolean isSetContentId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  public void setContentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATORID:
      if (value == null) {
        unsetOperatorid();
      } else {
        setOperatorid((Integer)value);
      }
      break;

    case SUMMARY_NAME:
      if (value == null) {
        unsetSummary_name();
      } else {
        setSummary_name((String)value);
      }
      break;

    case DOWN_URL:
      if (value == null) {
        unsetDown_url();
      } else {
        setDown_url((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case CONTENT_ID:
      if (value == null) {
        unsetContentId();
      } else {
        setContentId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATORID:
      return Integer.valueOf(getOperatorid());

    case SUMMARY_NAME:
      return getSummary_name();

    case DOWN_URL:
      return getDown_url();

    case SIZE:
      return Integer.valueOf(getSize());

    case CONTENT_ID:
      return Long.valueOf(getContentId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATORID:
      return isSetOperatorid();
    case SUMMARY_NAME:
      return isSetSummary_name();
    case DOWN_URL:
      return isSetDown_url();
    case SIZE:
      return isSetSize();
    case CONTENT_ID:
      return isSetContentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SummaryCreateContent)
      return this.equals((SummaryCreateContent)that);
    return false;
  }

  public boolean equals(SummaryCreateContent that) {
    if (that == null)
      return false;

    boolean this_present_operatorid = true;
    boolean that_present_operatorid = true;
    if (this_present_operatorid || that_present_operatorid) {
      if (!(this_present_operatorid && that_present_operatorid))
        return false;
      if (this.operatorid != that.operatorid)
        return false;
    }

    boolean this_present_summary_name = true && this.isSetSummary_name();
    boolean that_present_summary_name = true && that.isSetSummary_name();
    if (this_present_summary_name || that_present_summary_name) {
      if (!(this_present_summary_name && that_present_summary_name))
        return false;
      if (!this.summary_name.equals(that.summary_name))
        return false;
    }

    boolean this_present_down_url = true && this.isSetDown_url();
    boolean that_present_down_url = true && that.isSetDown_url();
    if (this_present_down_url || that_present_down_url) {
      if (!(this_present_down_url && that_present_down_url))
        return false;
      if (!this.down_url.equals(that.down_url))
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_contentId = true && this.isSetContentId();
    boolean that_present_contentId = true && that.isSetContentId();
    if (this_present_contentId || that_present_contentId) {
      if (!(this_present_contentId && that_present_contentId))
        return false;
      if (this.contentId != that.contentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operatorid = true;
    list.add(present_operatorid);
    if (present_operatorid)
      list.add(operatorid);

    boolean present_summary_name = true && (isSetSummary_name());
    list.add(present_summary_name);
    if (present_summary_name)
      list.add(summary_name);

    boolean present_down_url = true && (isSetDown_url());
    list.add(present_down_url);
    if (present_down_url)
      list.add(down_url);

    boolean present_size = true && (isSetSize());
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_contentId = true && (isSetContentId());
    list.add(present_contentId);
    if (present_contentId)
      list.add(contentId);

    return list.hashCode();
  }

  @Override
  public int compareTo(SummaryCreateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperatorid()).compareTo(other.isSetOperatorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorid, other.operatorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary_name()).compareTo(other.isSetSummary_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary_name, other.summary_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDown_url()).compareTo(other.isSetDown_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDown_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down_url, other.down_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentId()).compareTo(other.isSetContentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentId, other.contentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SummaryCreateContent(");
    boolean first = true;

    sb.append("operatorid:");
    sb.append(this.operatorid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary_name:");
    if (this.summary_name == null) {
      sb.append("null");
    } else {
      sb.append(this.summary_name);
    }
    first = false;
    if (isSetDown_url()) {
      if (!first) sb.append(", ");
      sb.append("down_url:");
      if (this.down_url == null) {
        sb.append("null");
      } else {
        sb.append(this.down_url);
      }
      first = false;
    }
    if (isSetSize()) {
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
    }
    if (isSetContentId()) {
      if (!first) sb.append(", ");
      sb.append("contentId:");
      sb.append(this.contentId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operatorid' because it's a primitive and you chose the non-beans generator.
    if (summary_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'summary_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SummaryCreateContentStandardSchemeFactory implements SchemeFactory {
    public SummaryCreateContentStandardScheme getScheme() {
      return new SummaryCreateContentStandardScheme();
    }
  }

  private static class SummaryCreateContentStandardScheme extends StandardScheme<SummaryCreateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SummaryCreateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorid = iprot.readI32();
              struct.setOperatoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUMMARY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary_name = iprot.readString();
              struct.setSummary_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOWN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.down_url = iprot.readString();
              struct.setDown_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.size = iprot.readI32();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contentId = iprot.readI64();
              struct.setContentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperatorid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SummaryCreateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATORID_FIELD_DESC);
      oprot.writeI32(struct.operatorid);
      oprot.writeFieldEnd();
      if (struct.summary_name != null) {
        oprot.writeFieldBegin(SUMMARY_NAME_FIELD_DESC);
        oprot.writeString(struct.summary_name);
        oprot.writeFieldEnd();
      }
      if (struct.down_url != null) {
        if (struct.isSetDown_url()) {
          oprot.writeFieldBegin(DOWN_URL_FIELD_DESC);
          oprot.writeString(struct.down_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSize()) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetContentId()) {
        oprot.writeFieldBegin(CONTENT_ID_FIELD_DESC);
        oprot.writeI64(struct.contentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SummaryCreateContentTupleSchemeFactory implements SchemeFactory {
    public SummaryCreateContentTupleScheme getScheme() {
      return new SummaryCreateContentTupleScheme();
    }
  }

  private static class SummaryCreateContentTupleScheme extends TupleScheme<SummaryCreateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SummaryCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.operatorid);
      oprot.writeString(struct.summary_name);
      BitSet optionals = new BitSet();
      if (struct.isSetDown_url()) {
        optionals.set(0);
      }
      if (struct.isSetSize()) {
        optionals.set(1);
      }
      if (struct.isSetContentId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDown_url()) {
        oprot.writeString(struct.down_url);
      }
      if (struct.isSetSize()) {
        oprot.writeI32(struct.size);
      }
      if (struct.isSetContentId()) {
        oprot.writeI64(struct.contentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SummaryCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operatorid = iprot.readI32();
      struct.setOperatoridIsSet(true);
      struct.summary_name = iprot.readString();
      struct.setSummary_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.down_url = iprot.readString();
        struct.setDown_urlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.size = iprot.readI32();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contentId = iprot.readI64();
        struct.setContentIdIsSet(true);
      }
    }
  }

}

