/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class APIOAContent implements org.apache.thrift.TBase<APIOAContent, APIOAContent._Fields>, java.io.Serializable, Cloneable, Comparable<APIOAContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APIOAContent");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BK_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("bkColor", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("elements", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DETAIL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("detailURL", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DETAIL_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("detailAuth", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField TITLE_ELEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("titleElements", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TITLE_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("titleStyle", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EX_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("exData", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CUSTOMIZED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("customizedType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CUSTOMIZED_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("customizedData", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APIOAContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APIOAContentTupleSchemeFactory());
  }

  public String title; // required
  public short status; // optional
  public String color; // optional
  public String bkColor; // optional
  public String elements; // required
  public String detailURL; // optional
  public byte detailAuth; // optional
  public String titleElements; // optional
  public String titleStyle; // optional
  public String exData; // optional
  public String customizedType; // optional
  public String customizedData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    STATUS((short)2, "status"),
    COLOR((short)3, "color"),
    BK_COLOR((short)4, "bkColor"),
    ELEMENTS((short)5, "elements"),
    DETAIL_URL((short)6, "detailURL"),
    DETAIL_AUTH((short)7, "detailAuth"),
    TITLE_ELEMENTS((short)8, "titleElements"),
    TITLE_STYLE((short)9, "titleStyle"),
    EX_DATA((short)10, "exData"),
    CUSTOMIZED_TYPE((short)11, "customizedType"),
    CUSTOMIZED_DATA((short)12, "customizedData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // STATUS
          return STATUS;
        case 3: // COLOR
          return COLOR;
        case 4: // BK_COLOR
          return BK_COLOR;
        case 5: // ELEMENTS
          return ELEMENTS;
        case 6: // DETAIL_URL
          return DETAIL_URL;
        case 7: // DETAIL_AUTH
          return DETAIL_AUTH;
        case 8: // TITLE_ELEMENTS
          return TITLE_ELEMENTS;
        case 9: // TITLE_STYLE
          return TITLE_STYLE;
        case 10: // EX_DATA
          return EX_DATA;
        case 11: // CUSTOMIZED_TYPE
          return CUSTOMIZED_TYPE;
        case 12: // CUSTOMIZED_DATA
          return CUSTOMIZED_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __DETAILAUTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.COLOR,_Fields.BK_COLOR,_Fields.DETAIL_URL,_Fields.DETAIL_AUTH,_Fields.TITLE_ELEMENTS,_Fields.TITLE_STYLE,_Fields.EX_DATA,_Fields.CUSTOMIZED_TYPE,_Fields.CUSTOMIZED_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BK_COLOR, new org.apache.thrift.meta_data.FieldMetaData("bkColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("elements", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_URL, new org.apache.thrift.meta_data.FieldMetaData("detailURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_AUTH, new org.apache.thrift.meta_data.FieldMetaData("detailAuth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TITLE_ELEMENTS, new org.apache.thrift.meta_data.FieldMetaData("titleElements", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE_STYLE, new org.apache.thrift.meta_data.FieldMetaData("titleStyle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EX_DATA, new org.apache.thrift.meta_data.FieldMetaData("exData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMIZED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("customizedType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMIZED_DATA, new org.apache.thrift.meta_data.FieldMetaData("customizedData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APIOAContent.class, metaDataMap);
  }

  public APIOAContent() {
  }

  public APIOAContent(
    String title,
    String elements)
  {
    this();
    this.title = title;
    this.elements = elements;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APIOAContent(APIOAContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.status = other.status;
    if (other.isSetColor()) {
      this.color = other.color;
    }
    if (other.isSetBkColor()) {
      this.bkColor = other.bkColor;
    }
    if (other.isSetElements()) {
      this.elements = other.elements;
    }
    if (other.isSetDetailURL()) {
      this.detailURL = other.detailURL;
    }
    this.detailAuth = other.detailAuth;
    if (other.isSetTitleElements()) {
      this.titleElements = other.titleElements;
    }
    if (other.isSetTitleStyle()) {
      this.titleStyle = other.titleStyle;
    }
    if (other.isSetExData()) {
      this.exData = other.exData;
    }
    if (other.isSetCustomizedType()) {
      this.customizedType = other.customizedType;
    }
    if (other.isSetCustomizedData()) {
      this.customizedData = other.customizedData;
    }
  }

  public APIOAContent deepCopy() {
    return new APIOAContent(this);
  }

  @Override
  public void clear() {
    this.title = null;
    setStatusIsSet(false);
    this.status = 0;
    this.color = null;
    this.bkColor = null;
    this.elements = null;
    this.detailURL = null;
    setDetailAuthIsSet(false);
    this.detailAuth = 0;
    this.titleElements = null;
    this.titleStyle = null;
    this.exData = null;
    this.customizedType = null;
    this.customizedData = null;
  }

  public String getTitle() {
    return this.title;
  }

  public APIOAContent setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public short getStatus() {
    return this.status;
  }

  public APIOAContent setStatus(short status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getColor() {
    return this.color;
  }

  public APIOAContent setColor(String color) {
    this.color = color;
    return this;
  }

  public void unsetColor() {
    this.color = null;
  }

  /** Returns true if field color is set (has been assigned a value) and false otherwise */
  public boolean isSetColor() {
    return this.color != null;
  }

  public void setColorIsSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  public String getBkColor() {
    return this.bkColor;
  }

  public APIOAContent setBkColor(String bkColor) {
    this.bkColor = bkColor;
    return this;
  }

  public void unsetBkColor() {
    this.bkColor = null;
  }

  /** Returns true if field bkColor is set (has been assigned a value) and false otherwise */
  public boolean isSetBkColor() {
    return this.bkColor != null;
  }

  public void setBkColorIsSet(boolean value) {
    if (!value) {
      this.bkColor = null;
    }
  }

  public String getElements() {
    return this.elements;
  }

  public APIOAContent setElements(String elements) {
    this.elements = elements;
    return this;
  }

  public void unsetElements() {
    this.elements = null;
  }

  /** Returns true if field elements is set (has been assigned a value) and false otherwise */
  public boolean isSetElements() {
    return this.elements != null;
  }

  public void setElementsIsSet(boolean value) {
    if (!value) {
      this.elements = null;
    }
  }

  public String getDetailURL() {
    return this.detailURL;
  }

  public APIOAContent setDetailURL(String detailURL) {
    this.detailURL = detailURL;
    return this;
  }

  public void unsetDetailURL() {
    this.detailURL = null;
  }

  /** Returns true if field detailURL is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailURL() {
    return this.detailURL != null;
  }

  public void setDetailURLIsSet(boolean value) {
    if (!value) {
      this.detailURL = null;
    }
  }

  public byte getDetailAuth() {
    return this.detailAuth;
  }

  public APIOAContent setDetailAuth(byte detailAuth) {
    this.detailAuth = detailAuth;
    setDetailAuthIsSet(true);
    return this;
  }

  public void unsetDetailAuth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILAUTH_ISSET_ID);
  }

  /** Returns true if field detailAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailAuth() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILAUTH_ISSET_ID);
  }

  public void setDetailAuthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILAUTH_ISSET_ID, value);
  }

  public String getTitleElements() {
    return this.titleElements;
  }

  public APIOAContent setTitleElements(String titleElements) {
    this.titleElements = titleElements;
    return this;
  }

  public void unsetTitleElements() {
    this.titleElements = null;
  }

  /** Returns true if field titleElements is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleElements() {
    return this.titleElements != null;
  }

  public void setTitleElementsIsSet(boolean value) {
    if (!value) {
      this.titleElements = null;
    }
  }

  public String getTitleStyle() {
    return this.titleStyle;
  }

  public APIOAContent setTitleStyle(String titleStyle) {
    this.titleStyle = titleStyle;
    return this;
  }

  public void unsetTitleStyle() {
    this.titleStyle = null;
  }

  /** Returns true if field titleStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleStyle() {
    return this.titleStyle != null;
  }

  public void setTitleStyleIsSet(boolean value) {
    if (!value) {
      this.titleStyle = null;
    }
  }

  public String getExData() {
    return this.exData;
  }

  public APIOAContent setExData(String exData) {
    this.exData = exData;
    return this;
  }

  public void unsetExData() {
    this.exData = null;
  }

  /** Returns true if field exData is set (has been assigned a value) and false otherwise */
  public boolean isSetExData() {
    return this.exData != null;
  }

  public void setExDataIsSet(boolean value) {
    if (!value) {
      this.exData = null;
    }
  }

  public String getCustomizedType() {
    return this.customizedType;
  }

  public APIOAContent setCustomizedType(String customizedType) {
    this.customizedType = customizedType;
    return this;
  }

  public void unsetCustomizedType() {
    this.customizedType = null;
  }

  /** Returns true if field customizedType is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomizedType() {
    return this.customizedType != null;
  }

  public void setCustomizedTypeIsSet(boolean value) {
    if (!value) {
      this.customizedType = null;
    }
  }

  public String getCustomizedData() {
    return this.customizedData;
  }

  public APIOAContent setCustomizedData(String customizedData) {
    this.customizedData = customizedData;
    return this;
  }

  public void unsetCustomizedData() {
    this.customizedData = null;
  }

  /** Returns true if field customizedData is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomizedData() {
    return this.customizedData != null;
  }

  public void setCustomizedDataIsSet(boolean value) {
    if (!value) {
      this.customizedData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Short)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unsetColor();
      } else {
        setColor((String)value);
      }
      break;

    case BK_COLOR:
      if (value == null) {
        unsetBkColor();
      } else {
        setBkColor((String)value);
      }
      break;

    case ELEMENTS:
      if (value == null) {
        unsetElements();
      } else {
        setElements((String)value);
      }
      break;

    case DETAIL_URL:
      if (value == null) {
        unsetDetailURL();
      } else {
        setDetailURL((String)value);
      }
      break;

    case DETAIL_AUTH:
      if (value == null) {
        unsetDetailAuth();
      } else {
        setDetailAuth((Byte)value);
      }
      break;

    case TITLE_ELEMENTS:
      if (value == null) {
        unsetTitleElements();
      } else {
        setTitleElements((String)value);
      }
      break;

    case TITLE_STYLE:
      if (value == null) {
        unsetTitleStyle();
      } else {
        setTitleStyle((String)value);
      }
      break;

    case EX_DATA:
      if (value == null) {
        unsetExData();
      } else {
        setExData((String)value);
      }
      break;

    case CUSTOMIZED_TYPE:
      if (value == null) {
        unsetCustomizedType();
      } else {
        setCustomizedType((String)value);
      }
      break;

    case CUSTOMIZED_DATA:
      if (value == null) {
        unsetCustomizedData();
      } else {
        setCustomizedData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case STATUS:
      return Short.valueOf(getStatus());

    case COLOR:
      return getColor();

    case BK_COLOR:
      return getBkColor();

    case ELEMENTS:
      return getElements();

    case DETAIL_URL:
      return getDetailURL();

    case DETAIL_AUTH:
      return Byte.valueOf(getDetailAuth());

    case TITLE_ELEMENTS:
      return getTitleElements();

    case TITLE_STYLE:
      return getTitleStyle();

    case EX_DATA:
      return getExData();

    case CUSTOMIZED_TYPE:
      return getCustomizedType();

    case CUSTOMIZED_DATA:
      return getCustomizedData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case STATUS:
      return isSetStatus();
    case COLOR:
      return isSetColor();
    case BK_COLOR:
      return isSetBkColor();
    case ELEMENTS:
      return isSetElements();
    case DETAIL_URL:
      return isSetDetailURL();
    case DETAIL_AUTH:
      return isSetDetailAuth();
    case TITLE_ELEMENTS:
      return isSetTitleElements();
    case TITLE_STYLE:
      return isSetTitleStyle();
    case EX_DATA:
      return isSetExData();
    case CUSTOMIZED_TYPE:
      return isSetCustomizedType();
    case CUSTOMIZED_DATA:
      return isSetCustomizedData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APIOAContent)
      return this.equals((APIOAContent)that);
    return false;
  }

  public boolean equals(APIOAContent that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_color = true && this.isSetColor();
    boolean that_present_color = true && that.isSetColor();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    boolean this_present_bkColor = true && this.isSetBkColor();
    boolean that_present_bkColor = true && that.isSetBkColor();
    if (this_present_bkColor || that_present_bkColor) {
      if (!(this_present_bkColor && that_present_bkColor))
        return false;
      if (!this.bkColor.equals(that.bkColor))
        return false;
    }

    boolean this_present_elements = true && this.isSetElements();
    boolean that_present_elements = true && that.isSetElements();
    if (this_present_elements || that_present_elements) {
      if (!(this_present_elements && that_present_elements))
        return false;
      if (!this.elements.equals(that.elements))
        return false;
    }

    boolean this_present_detailURL = true && this.isSetDetailURL();
    boolean that_present_detailURL = true && that.isSetDetailURL();
    if (this_present_detailURL || that_present_detailURL) {
      if (!(this_present_detailURL && that_present_detailURL))
        return false;
      if (!this.detailURL.equals(that.detailURL))
        return false;
    }

    boolean this_present_detailAuth = true && this.isSetDetailAuth();
    boolean that_present_detailAuth = true && that.isSetDetailAuth();
    if (this_present_detailAuth || that_present_detailAuth) {
      if (!(this_present_detailAuth && that_present_detailAuth))
        return false;
      if (this.detailAuth != that.detailAuth)
        return false;
    }

    boolean this_present_titleElements = true && this.isSetTitleElements();
    boolean that_present_titleElements = true && that.isSetTitleElements();
    if (this_present_titleElements || that_present_titleElements) {
      if (!(this_present_titleElements && that_present_titleElements))
        return false;
      if (!this.titleElements.equals(that.titleElements))
        return false;
    }

    boolean this_present_titleStyle = true && this.isSetTitleStyle();
    boolean that_present_titleStyle = true && that.isSetTitleStyle();
    if (this_present_titleStyle || that_present_titleStyle) {
      if (!(this_present_titleStyle && that_present_titleStyle))
        return false;
      if (!this.titleStyle.equals(that.titleStyle))
        return false;
    }

    boolean this_present_exData = true && this.isSetExData();
    boolean that_present_exData = true && that.isSetExData();
    if (this_present_exData || that_present_exData) {
      if (!(this_present_exData && that_present_exData))
        return false;
      if (!this.exData.equals(that.exData))
        return false;
    }

    boolean this_present_customizedType = true && this.isSetCustomizedType();
    boolean that_present_customizedType = true && that.isSetCustomizedType();
    if (this_present_customizedType || that_present_customizedType) {
      if (!(this_present_customizedType && that_present_customizedType))
        return false;
      if (!this.customizedType.equals(that.customizedType))
        return false;
    }

    boolean this_present_customizedData = true && this.isSetCustomizedData();
    boolean that_present_customizedData = true && that.isSetCustomizedData();
    if (this_present_customizedData || that_present_customizedData) {
      if (!(this_present_customizedData && that_present_customizedData))
        return false;
      if (!this.customizedData.equals(that.customizedData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_color = true && (isSetColor());
    list.add(present_color);
    if (present_color)
      list.add(color);

    boolean present_bkColor = true && (isSetBkColor());
    list.add(present_bkColor);
    if (present_bkColor)
      list.add(bkColor);

    boolean present_elements = true && (isSetElements());
    list.add(present_elements);
    if (present_elements)
      list.add(elements);

    boolean present_detailURL = true && (isSetDetailURL());
    list.add(present_detailURL);
    if (present_detailURL)
      list.add(detailURL);

    boolean present_detailAuth = true && (isSetDetailAuth());
    list.add(present_detailAuth);
    if (present_detailAuth)
      list.add(detailAuth);

    boolean present_titleElements = true && (isSetTitleElements());
    list.add(present_titleElements);
    if (present_titleElements)
      list.add(titleElements);

    boolean present_titleStyle = true && (isSetTitleStyle());
    list.add(present_titleStyle);
    if (present_titleStyle)
      list.add(titleStyle);

    boolean present_exData = true && (isSetExData());
    list.add(present_exData);
    if (present_exData)
      list.add(exData);

    boolean present_customizedType = true && (isSetCustomizedType());
    list.add(present_customizedType);
    if (present_customizedType)
      list.add(customizedType);

    boolean present_customizedData = true && (isSetCustomizedData());
    list.add(present_customizedData);
    if (present_customizedData)
      list.add(customizedData);

    return list.hashCode();
  }

  @Override
  public int compareTo(APIOAContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBkColor()).compareTo(other.isSetBkColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBkColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bkColor, other.bkColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElements()).compareTo(other.isSetElements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.elements, other.elements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailURL()).compareTo(other.isSetDetailURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailURL, other.detailURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailAuth()).compareTo(other.isSetDetailAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailAuth, other.detailAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleElements()).compareTo(other.isSetTitleElements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleElements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleElements, other.titleElements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleStyle()).compareTo(other.isSetTitleStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleStyle, other.titleStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExData()).compareTo(other.isSetExData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exData, other.exData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomizedType()).compareTo(other.isSetCustomizedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomizedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customizedType, other.customizedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomizedData()).compareTo(other.isSetCustomizedData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomizedData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customizedData, other.customizedData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APIOAContent(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetColor()) {
      if (!first) sb.append(", ");
      sb.append("color:");
      if (this.color == null) {
        sb.append("null");
      } else {
        sb.append(this.color);
      }
      first = false;
    }
    if (isSetBkColor()) {
      if (!first) sb.append(", ");
      sb.append("bkColor:");
      if (this.bkColor == null) {
        sb.append("null");
      } else {
        sb.append(this.bkColor);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("elements:");
    if (this.elements == null) {
      sb.append("null");
    } else {
      sb.append(this.elements);
    }
    first = false;
    if (isSetDetailURL()) {
      if (!first) sb.append(", ");
      sb.append("detailURL:");
      if (this.detailURL == null) {
        sb.append("null");
      } else {
        sb.append(this.detailURL);
      }
      first = false;
    }
    if (isSetDetailAuth()) {
      if (!first) sb.append(", ");
      sb.append("detailAuth:");
      sb.append(this.detailAuth);
      first = false;
    }
    if (isSetTitleElements()) {
      if (!first) sb.append(", ");
      sb.append("titleElements:");
      if (this.titleElements == null) {
        sb.append("null");
      } else {
        sb.append(this.titleElements);
      }
      first = false;
    }
    if (isSetTitleStyle()) {
      if (!first) sb.append(", ");
      sb.append("titleStyle:");
      if (this.titleStyle == null) {
        sb.append("null");
      } else {
        sb.append(this.titleStyle);
      }
      first = false;
    }
    if (isSetExData()) {
      if (!first) sb.append(", ");
      sb.append("exData:");
      if (this.exData == null) {
        sb.append("null");
      } else {
        sb.append(this.exData);
      }
      first = false;
    }
    if (isSetCustomizedType()) {
      if (!first) sb.append(", ");
      sb.append("customizedType:");
      if (this.customizedType == null) {
        sb.append("null");
      } else {
        sb.append(this.customizedType);
      }
      first = false;
    }
    if (isSetCustomizedData()) {
      if (!first) sb.append(", ");
      sb.append("customizedData:");
      if (this.customizedData == null) {
        sb.append("null");
      } else {
        sb.append(this.customizedData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (elements == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'elements' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APIOAContentStandardSchemeFactory implements SchemeFactory {
    public APIOAContentStandardScheme getScheme() {
      return new APIOAContentStandardScheme();
    }
  }

  private static class APIOAContentStandardScheme extends StandardScheme<APIOAContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APIOAContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.status = iprot.readI16();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.color = iprot.readString();
              struct.setColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BK_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bkColor = iprot.readString();
              struct.setBkColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ELEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.elements = iprot.readString();
              struct.setElementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DETAIL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailURL = iprot.readString();
              struct.setDetailURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DETAIL_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.detailAuth = iprot.readByte();
              struct.setDetailAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TITLE_ELEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titleElements = iprot.readString();
              struct.setTitleElementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TITLE_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.titleStyle = iprot.readString();
              struct.setTitleStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EX_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exData = iprot.readString();
              struct.setExDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CUSTOMIZED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customizedType = iprot.readString();
              struct.setCustomizedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CUSTOMIZED_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customizedData = iprot.readString();
              struct.setCustomizedDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APIOAContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI16(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.color != null) {
        if (struct.isSetColor()) {
          oprot.writeFieldBegin(COLOR_FIELD_DESC);
          oprot.writeString(struct.color);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bkColor != null) {
        if (struct.isSetBkColor()) {
          oprot.writeFieldBegin(BK_COLOR_FIELD_DESC);
          oprot.writeString(struct.bkColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.elements != null) {
        oprot.writeFieldBegin(ELEMENTS_FIELD_DESC);
        oprot.writeString(struct.elements);
        oprot.writeFieldEnd();
      }
      if (struct.detailURL != null) {
        if (struct.isSetDetailURL()) {
          oprot.writeFieldBegin(DETAIL_URL_FIELD_DESC);
          oprot.writeString(struct.detailURL);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDetailAuth()) {
        oprot.writeFieldBegin(DETAIL_AUTH_FIELD_DESC);
        oprot.writeByte(struct.detailAuth);
        oprot.writeFieldEnd();
      }
      if (struct.titleElements != null) {
        if (struct.isSetTitleElements()) {
          oprot.writeFieldBegin(TITLE_ELEMENTS_FIELD_DESC);
          oprot.writeString(struct.titleElements);
          oprot.writeFieldEnd();
        }
      }
      if (struct.titleStyle != null) {
        if (struct.isSetTitleStyle()) {
          oprot.writeFieldBegin(TITLE_STYLE_FIELD_DESC);
          oprot.writeString(struct.titleStyle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exData != null) {
        if (struct.isSetExData()) {
          oprot.writeFieldBegin(EX_DATA_FIELD_DESC);
          oprot.writeString(struct.exData);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customizedType != null) {
        if (struct.isSetCustomizedType()) {
          oprot.writeFieldBegin(CUSTOMIZED_TYPE_FIELD_DESC);
          oprot.writeString(struct.customizedType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customizedData != null) {
        if (struct.isSetCustomizedData()) {
          oprot.writeFieldBegin(CUSTOMIZED_DATA_FIELD_DESC);
          oprot.writeString(struct.customizedData);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APIOAContentTupleSchemeFactory implements SchemeFactory {
    public APIOAContentTupleScheme getScheme() {
      return new APIOAContentTupleScheme();
    }
  }

  private static class APIOAContentTupleScheme extends TupleScheme<APIOAContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APIOAContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.title);
      oprot.writeString(struct.elements);
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetColor()) {
        optionals.set(1);
      }
      if (struct.isSetBkColor()) {
        optionals.set(2);
      }
      if (struct.isSetDetailURL()) {
        optionals.set(3);
      }
      if (struct.isSetDetailAuth()) {
        optionals.set(4);
      }
      if (struct.isSetTitleElements()) {
        optionals.set(5);
      }
      if (struct.isSetTitleStyle()) {
        optionals.set(6);
      }
      if (struct.isSetExData()) {
        optionals.set(7);
      }
      if (struct.isSetCustomizedType()) {
        optionals.set(8);
      }
      if (struct.isSetCustomizedData()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetStatus()) {
        oprot.writeI16(struct.status);
      }
      if (struct.isSetColor()) {
        oprot.writeString(struct.color);
      }
      if (struct.isSetBkColor()) {
        oprot.writeString(struct.bkColor);
      }
      if (struct.isSetDetailURL()) {
        oprot.writeString(struct.detailURL);
      }
      if (struct.isSetDetailAuth()) {
        oprot.writeByte(struct.detailAuth);
      }
      if (struct.isSetTitleElements()) {
        oprot.writeString(struct.titleElements);
      }
      if (struct.isSetTitleStyle()) {
        oprot.writeString(struct.titleStyle);
      }
      if (struct.isSetExData()) {
        oprot.writeString(struct.exData);
      }
      if (struct.isSetCustomizedType()) {
        oprot.writeString(struct.customizedType);
      }
      if (struct.isSetCustomizedData()) {
        oprot.writeString(struct.customizedData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APIOAContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.elements = iprot.readString();
      struct.setElementsIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.status = iprot.readI16();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.color = iprot.readString();
        struct.setColorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bkColor = iprot.readString();
        struct.setBkColorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.detailURL = iprot.readString();
        struct.setDetailURLIsSet(true);
      }
      if (incoming.get(4)) {
        struct.detailAuth = iprot.readByte();
        struct.setDetailAuthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.titleElements = iprot.readString();
        struct.setTitleElementsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.titleStyle = iprot.readString();
        struct.setTitleStyleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exData = iprot.readString();
        struct.setExDataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.customizedType = iprot.readString();
        struct.setCustomizedTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.customizedData = iprot.readString();
        struct.setCustomizedDataIsSet(true);
      }
    }
  }

}

