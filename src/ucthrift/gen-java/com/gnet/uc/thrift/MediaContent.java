/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class MediaContent implements org.apache.thrift.TBase<MediaContent, MediaContent._Fields>, java.io.Serializable, Cloneable, Comparable<MediaContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MediaContent");

  private static final org.apache.thrift.protocol.TField MEDIA_FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("media_filename", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEDIA_FILESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("media_filesize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("media_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEDIA_DOWN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("media_down_url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEDIA_THUMB_FIELD_DESC = new org.apache.thrift.protocol.TField("media_thumb", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MEDIA_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("media_duration", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OPERATOR_AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorAvatar", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MEDIA_THUMB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("media_thumb_url", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MediaContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MediaContentTupleSchemeFactory());
  }

  public String media_filename; // optional
  public int media_filesize; // required
  /**
   * 
   * @see ChatMediaType
   */
  public ChatMediaType media_type; // required
  public String media_down_url; // required
  public String media_thumb; // optional
  public int media_duration; // optional
  public int operatorId; // optional
  public String operatorName; // optional
  public String operatorAvatar; // optional
  public String media_thumb_url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_FILENAME((short)1, "media_filename"),
    MEDIA_FILESIZE((short)2, "media_filesize"),
    /**
     * 
     * @see ChatMediaType
     */
    MEDIA_TYPE((short)3, "media_type"),
    MEDIA_DOWN_URL((short)4, "media_down_url"),
    MEDIA_THUMB((short)5, "media_thumb"),
    MEDIA_DURATION((short)6, "media_duration"),
    OPERATOR_ID((short)7, "operatorId"),
    OPERATOR_NAME((short)8, "operatorName"),
    OPERATOR_AVATAR((short)9, "operatorAvatar"),
    MEDIA_THUMB_URL((short)10, "media_thumb_url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_FILENAME
          return MEDIA_FILENAME;
        case 2: // MEDIA_FILESIZE
          return MEDIA_FILESIZE;
        case 3: // MEDIA_TYPE
          return MEDIA_TYPE;
        case 4: // MEDIA_DOWN_URL
          return MEDIA_DOWN_URL;
        case 5: // MEDIA_THUMB
          return MEDIA_THUMB;
        case 6: // MEDIA_DURATION
          return MEDIA_DURATION;
        case 7: // OPERATOR_ID
          return OPERATOR_ID;
        case 8: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 9: // OPERATOR_AVATAR
          return OPERATOR_AVATAR;
        case 10: // MEDIA_THUMB_URL
          return MEDIA_THUMB_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEDIA_FILESIZE_ISSET_ID = 0;
  private static final int __MEDIA_DURATION_ISSET_ID = 1;
  private static final int __OPERATORID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEDIA_FILENAME,_Fields.MEDIA_THUMB,_Fields.MEDIA_DURATION,_Fields.OPERATOR_ID,_Fields.OPERATOR_NAME,_Fields.OPERATOR_AVATAR,_Fields.MEDIA_THUMB_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_FILENAME, new org.apache.thrift.meta_data.FieldMetaData("media_filename", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_FILESIZE, new org.apache.thrift.meta_data.FieldMetaData("media_filesize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("media_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChatMediaType.class)));
    tmpMap.put(_Fields.MEDIA_DOWN_URL, new org.apache.thrift.meta_data.FieldMetaData("media_down_url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_THUMB, new org.apache.thrift.meta_data.FieldMetaData("media_thumb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_DURATION, new org.apache.thrift.meta_data.FieldMetaData("media_duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_AVATAR, new org.apache.thrift.meta_data.FieldMetaData("operatorAvatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_THUMB_URL, new org.apache.thrift.meta_data.FieldMetaData("media_thumb_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MediaContent.class, metaDataMap);
  }

  public MediaContent() {
  }

  public MediaContent(
    int media_filesize,
    ChatMediaType media_type,
    String media_down_url)
  {
    this();
    this.media_filesize = media_filesize;
    setMedia_filesizeIsSet(true);
    this.media_type = media_type;
    this.media_down_url = media_down_url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MediaContent(MediaContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMedia_filename()) {
      this.media_filename = other.media_filename;
    }
    this.media_filesize = other.media_filesize;
    if (other.isSetMedia_type()) {
      this.media_type = other.media_type;
    }
    if (other.isSetMedia_down_url()) {
      this.media_down_url = other.media_down_url;
    }
    if (other.isSetMedia_thumb()) {
      this.media_thumb = other.media_thumb;
    }
    this.media_duration = other.media_duration;
    this.operatorId = other.operatorId;
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
    if (other.isSetOperatorAvatar()) {
      this.operatorAvatar = other.operatorAvatar;
    }
    if (other.isSetMedia_thumb_url()) {
      this.media_thumb_url = other.media_thumb_url;
    }
  }

  public MediaContent deepCopy() {
    return new MediaContent(this);
  }

  @Override
  public void clear() {
    this.media_filename = null;
    setMedia_filesizeIsSet(false);
    this.media_filesize = 0;
    this.media_type = null;
    this.media_down_url = null;
    this.media_thumb = null;
    setMedia_durationIsSet(false);
    this.media_duration = 0;
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    this.operatorName = null;
    this.operatorAvatar = null;
    this.media_thumb_url = null;
  }

  public String getMedia_filename() {
    return this.media_filename;
  }

  public MediaContent setMedia_filename(String media_filename) {
    this.media_filename = media_filename;
    return this;
  }

  public void unsetMedia_filename() {
    this.media_filename = null;
  }

  /** Returns true if field media_filename is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_filename() {
    return this.media_filename != null;
  }

  public void setMedia_filenameIsSet(boolean value) {
    if (!value) {
      this.media_filename = null;
    }
  }

  public int getMedia_filesize() {
    return this.media_filesize;
  }

  public MediaContent setMedia_filesize(int media_filesize) {
    this.media_filesize = media_filesize;
    setMedia_filesizeIsSet(true);
    return this;
  }

  public void unsetMedia_filesize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIA_FILESIZE_ISSET_ID);
  }

  /** Returns true if field media_filesize is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_filesize() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIA_FILESIZE_ISSET_ID);
  }

  public void setMedia_filesizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIA_FILESIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see ChatMediaType
   */
  public ChatMediaType getMedia_type() {
    return this.media_type;
  }

  /**
   * 
   * @see ChatMediaType
   */
  public MediaContent setMedia_type(ChatMediaType media_type) {
    this.media_type = media_type;
    return this;
  }

  public void unsetMedia_type() {
    this.media_type = null;
  }

  /** Returns true if field media_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_type() {
    return this.media_type != null;
  }

  public void setMedia_typeIsSet(boolean value) {
    if (!value) {
      this.media_type = null;
    }
  }

  public String getMedia_down_url() {
    return this.media_down_url;
  }

  public MediaContent setMedia_down_url(String media_down_url) {
    this.media_down_url = media_down_url;
    return this;
  }

  public void unsetMedia_down_url() {
    this.media_down_url = null;
  }

  /** Returns true if field media_down_url is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_down_url() {
    return this.media_down_url != null;
  }

  public void setMedia_down_urlIsSet(boolean value) {
    if (!value) {
      this.media_down_url = null;
    }
  }

  public String getMedia_thumb() {
    return this.media_thumb;
  }

  public MediaContent setMedia_thumb(String media_thumb) {
    this.media_thumb = media_thumb;
    return this;
  }

  public void unsetMedia_thumb() {
    this.media_thumb = null;
  }

  /** Returns true if field media_thumb is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_thumb() {
    return this.media_thumb != null;
  }

  public void setMedia_thumbIsSet(boolean value) {
    if (!value) {
      this.media_thumb = null;
    }
  }

  public int getMedia_duration() {
    return this.media_duration;
  }

  public MediaContent setMedia_duration(int media_duration) {
    this.media_duration = media_duration;
    setMedia_durationIsSet(true);
    return this;
  }

  public void unsetMedia_duration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIA_DURATION_ISSET_ID);
  }

  /** Returns true if field media_duration is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_duration() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIA_DURATION_ISSET_ID);
  }

  public void setMedia_durationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIA_DURATION_ISSET_ID, value);
  }

  public int getOperatorId() {
    return this.operatorId;
  }

  public MediaContent setOperatorId(int operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public String getOperatorName() {
    return this.operatorName;
  }

  public MediaContent setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  public String getOperatorAvatar() {
    return this.operatorAvatar;
  }

  public MediaContent setOperatorAvatar(String operatorAvatar) {
    this.operatorAvatar = operatorAvatar;
    return this;
  }

  public void unsetOperatorAvatar() {
    this.operatorAvatar = null;
  }

  /** Returns true if field operatorAvatar is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorAvatar() {
    return this.operatorAvatar != null;
  }

  public void setOperatorAvatarIsSet(boolean value) {
    if (!value) {
      this.operatorAvatar = null;
    }
  }

  public String getMedia_thumb_url() {
    return this.media_thumb_url;
  }

  public MediaContent setMedia_thumb_url(String media_thumb_url) {
    this.media_thumb_url = media_thumb_url;
    return this;
  }

  public void unsetMedia_thumb_url() {
    this.media_thumb_url = null;
  }

  /** Returns true if field media_thumb_url is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia_thumb_url() {
    return this.media_thumb_url != null;
  }

  public void setMedia_thumb_urlIsSet(boolean value) {
    if (!value) {
      this.media_thumb_url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_FILENAME:
      if (value == null) {
        unsetMedia_filename();
      } else {
        setMedia_filename((String)value);
      }
      break;

    case MEDIA_FILESIZE:
      if (value == null) {
        unsetMedia_filesize();
      } else {
        setMedia_filesize((Integer)value);
      }
      break;

    case MEDIA_TYPE:
      if (value == null) {
        unsetMedia_type();
      } else {
        setMedia_type((ChatMediaType)value);
      }
      break;

    case MEDIA_DOWN_URL:
      if (value == null) {
        unsetMedia_down_url();
      } else {
        setMedia_down_url((String)value);
      }
      break;

    case MEDIA_THUMB:
      if (value == null) {
        unsetMedia_thumb();
      } else {
        setMedia_thumb((String)value);
      }
      break;

    case MEDIA_DURATION:
      if (value == null) {
        unsetMedia_duration();
      } else {
        setMedia_duration((Integer)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Integer)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    case OPERATOR_AVATAR:
      if (value == null) {
        unsetOperatorAvatar();
      } else {
        setOperatorAvatar((String)value);
      }
      break;

    case MEDIA_THUMB_URL:
      if (value == null) {
        unsetMedia_thumb_url();
      } else {
        setMedia_thumb_url((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_FILENAME:
      return getMedia_filename();

    case MEDIA_FILESIZE:
      return Integer.valueOf(getMedia_filesize());

    case MEDIA_TYPE:
      return getMedia_type();

    case MEDIA_DOWN_URL:
      return getMedia_down_url();

    case MEDIA_THUMB:
      return getMedia_thumb();

    case MEDIA_DURATION:
      return Integer.valueOf(getMedia_duration());

    case OPERATOR_ID:
      return Integer.valueOf(getOperatorId());

    case OPERATOR_NAME:
      return getOperatorName();

    case OPERATOR_AVATAR:
      return getOperatorAvatar();

    case MEDIA_THUMB_URL:
      return getMedia_thumb_url();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_FILENAME:
      return isSetMedia_filename();
    case MEDIA_FILESIZE:
      return isSetMedia_filesize();
    case MEDIA_TYPE:
      return isSetMedia_type();
    case MEDIA_DOWN_URL:
      return isSetMedia_down_url();
    case MEDIA_THUMB:
      return isSetMedia_thumb();
    case MEDIA_DURATION:
      return isSetMedia_duration();
    case OPERATOR_ID:
      return isSetOperatorId();
    case OPERATOR_NAME:
      return isSetOperatorName();
    case OPERATOR_AVATAR:
      return isSetOperatorAvatar();
    case MEDIA_THUMB_URL:
      return isSetMedia_thumb_url();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MediaContent)
      return this.equals((MediaContent)that);
    return false;
  }

  public boolean equals(MediaContent that) {
    if (that == null)
      return false;

    boolean this_present_media_filename = true && this.isSetMedia_filename();
    boolean that_present_media_filename = true && that.isSetMedia_filename();
    if (this_present_media_filename || that_present_media_filename) {
      if (!(this_present_media_filename && that_present_media_filename))
        return false;
      if (!this.media_filename.equals(that.media_filename))
        return false;
    }

    boolean this_present_media_filesize = true;
    boolean that_present_media_filesize = true;
    if (this_present_media_filesize || that_present_media_filesize) {
      if (!(this_present_media_filesize && that_present_media_filesize))
        return false;
      if (this.media_filesize != that.media_filesize)
        return false;
    }

    boolean this_present_media_type = true && this.isSetMedia_type();
    boolean that_present_media_type = true && that.isSetMedia_type();
    if (this_present_media_type || that_present_media_type) {
      if (!(this_present_media_type && that_present_media_type))
        return false;
      if (!this.media_type.equals(that.media_type))
        return false;
    }

    boolean this_present_media_down_url = true && this.isSetMedia_down_url();
    boolean that_present_media_down_url = true && that.isSetMedia_down_url();
    if (this_present_media_down_url || that_present_media_down_url) {
      if (!(this_present_media_down_url && that_present_media_down_url))
        return false;
      if (!this.media_down_url.equals(that.media_down_url))
        return false;
    }

    boolean this_present_media_thumb = true && this.isSetMedia_thumb();
    boolean that_present_media_thumb = true && that.isSetMedia_thumb();
    if (this_present_media_thumb || that_present_media_thumb) {
      if (!(this_present_media_thumb && that_present_media_thumb))
        return false;
      if (!this.media_thumb.equals(that.media_thumb))
        return false;
    }

    boolean this_present_media_duration = true && this.isSetMedia_duration();
    boolean that_present_media_duration = true && that.isSetMedia_duration();
    if (this_present_media_duration || that_present_media_duration) {
      if (!(this_present_media_duration && that_present_media_duration))
        return false;
      if (this.media_duration != that.media_duration)
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    boolean this_present_operatorAvatar = true && this.isSetOperatorAvatar();
    boolean that_present_operatorAvatar = true && that.isSetOperatorAvatar();
    if (this_present_operatorAvatar || that_present_operatorAvatar) {
      if (!(this_present_operatorAvatar && that_present_operatorAvatar))
        return false;
      if (!this.operatorAvatar.equals(that.operatorAvatar))
        return false;
    }

    boolean this_present_media_thumb_url = true && this.isSetMedia_thumb_url();
    boolean that_present_media_thumb_url = true && that.isSetMedia_thumb_url();
    if (this_present_media_thumb_url || that_present_media_thumb_url) {
      if (!(this_present_media_thumb_url && that_present_media_thumb_url))
        return false;
      if (!this.media_thumb_url.equals(that.media_thumb_url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_media_filename = true && (isSetMedia_filename());
    list.add(present_media_filename);
    if (present_media_filename)
      list.add(media_filename);

    boolean present_media_filesize = true;
    list.add(present_media_filesize);
    if (present_media_filesize)
      list.add(media_filesize);

    boolean present_media_type = true && (isSetMedia_type());
    list.add(present_media_type);
    if (present_media_type)
      list.add(media_type.getValue());

    boolean present_media_down_url = true && (isSetMedia_down_url());
    list.add(present_media_down_url);
    if (present_media_down_url)
      list.add(media_down_url);

    boolean present_media_thumb = true && (isSetMedia_thumb());
    list.add(present_media_thumb);
    if (present_media_thumb)
      list.add(media_thumb);

    boolean present_media_duration = true && (isSetMedia_duration());
    list.add(present_media_duration);
    if (present_media_duration)
      list.add(media_duration);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    boolean present_operatorAvatar = true && (isSetOperatorAvatar());
    list.add(present_operatorAvatar);
    if (present_operatorAvatar)
      list.add(operatorAvatar);

    boolean present_media_thumb_url = true && (isSetMedia_thumb_url());
    list.add(present_media_thumb_url);
    if (present_media_thumb_url)
      list.add(media_thumb_url);

    return list.hashCode();
  }

  @Override
  public int compareTo(MediaContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMedia_filename()).compareTo(other.isSetMedia_filename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_filename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_filename, other.media_filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_filesize()).compareTo(other.isSetMedia_filesize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_filesize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_filesize, other.media_filesize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_type()).compareTo(other.isSetMedia_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_type, other.media_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_down_url()).compareTo(other.isSetMedia_down_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_down_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_down_url, other.media_down_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_thumb()).compareTo(other.isSetMedia_thumb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_thumb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_thumb, other.media_thumb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_duration()).compareTo(other.isSetMedia_duration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_duration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_duration, other.media_duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorAvatar()).compareTo(other.isSetOperatorAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorAvatar, other.operatorAvatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia_thumb_url()).compareTo(other.isSetMedia_thumb_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia_thumb_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media_thumb_url, other.media_thumb_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MediaContent(");
    boolean first = true;

    if (isSetMedia_filename()) {
      sb.append("media_filename:");
      if (this.media_filename == null) {
        sb.append("null");
      } else {
        sb.append(this.media_filename);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("media_filesize:");
    sb.append(this.media_filesize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_type:");
    if (this.media_type == null) {
      sb.append("null");
    } else {
      sb.append(this.media_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("media_down_url:");
    if (this.media_down_url == null) {
      sb.append("null");
    } else {
      sb.append(this.media_down_url);
    }
    first = false;
    if (isSetMedia_thumb()) {
      if (!first) sb.append(", ");
      sb.append("media_thumb:");
      if (this.media_thumb == null) {
        sb.append("null");
      } else {
        sb.append(this.media_thumb);
      }
      first = false;
    }
    if (isSetMedia_duration()) {
      if (!first) sb.append(", ");
      sb.append("media_duration:");
      sb.append(this.media_duration);
      first = false;
    }
    if (isSetOperatorId()) {
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      sb.append(this.operatorId);
      first = false;
    }
    if (isSetOperatorName()) {
      if (!first) sb.append(", ");
      sb.append("operatorName:");
      if (this.operatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorName);
      }
      first = false;
    }
    if (isSetOperatorAvatar()) {
      if (!first) sb.append(", ");
      sb.append("operatorAvatar:");
      if (this.operatorAvatar == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorAvatar);
      }
      first = false;
    }
    if (isSetMedia_thumb_url()) {
      if (!first) sb.append(", ");
      sb.append("media_thumb_url:");
      if (this.media_thumb_url == null) {
        sb.append("null");
      } else {
        sb.append(this.media_thumb_url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'media_filesize' because it's a primitive and you chose the non-beans generator.
    if (media_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'media_type' was not present! Struct: " + toString());
    }
    if (media_down_url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'media_down_url' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MediaContentStandardSchemeFactory implements SchemeFactory {
    public MediaContentStandardScheme getScheme() {
      return new MediaContentStandardScheme();
    }
  }

  private static class MediaContentStandardScheme extends StandardScheme<MediaContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MediaContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_filename = iprot.readString();
              struct.setMedia_filenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDIA_FILESIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.media_filesize = iprot.readI32();
              struct.setMedia_filesizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEDIA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.media_type = com.gnet.uc.thrift.ChatMediaType.findByValue(iprot.readI32());
              struct.setMedia_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEDIA_DOWN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_down_url = iprot.readString();
              struct.setMedia_down_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDIA_THUMB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_thumb = iprot.readString();
              struct.setMedia_thumbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEDIA_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.media_duration = iprot.readI32();
              struct.setMedia_durationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorId = iprot.readI32();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPERATOR_AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorAvatar = iprot.readString();
              struct.setOperatorAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEDIA_THUMB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.media_thumb_url = iprot.readString();
              struct.setMedia_thumb_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMedia_filesize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'media_filesize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MediaContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.media_filename != null) {
        if (struct.isSetMedia_filename()) {
          oprot.writeFieldBegin(MEDIA_FILENAME_FIELD_DESC);
          oprot.writeString(struct.media_filename);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(MEDIA_FILESIZE_FIELD_DESC);
      oprot.writeI32(struct.media_filesize);
      oprot.writeFieldEnd();
      if (struct.media_type != null) {
        oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
        oprot.writeI32(struct.media_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.media_down_url != null) {
        oprot.writeFieldBegin(MEDIA_DOWN_URL_FIELD_DESC);
        oprot.writeString(struct.media_down_url);
        oprot.writeFieldEnd();
      }
      if (struct.media_thumb != null) {
        if (struct.isSetMedia_thumb()) {
          oprot.writeFieldBegin(MEDIA_THUMB_FIELD_DESC);
          oprot.writeString(struct.media_thumb);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMedia_duration()) {
        oprot.writeFieldBegin(MEDIA_DURATION_FIELD_DESC);
        oprot.writeI32(struct.media_duration);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperatorId()) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeI32(struct.operatorId);
        oprot.writeFieldEnd();
      }
      if (struct.operatorName != null) {
        if (struct.isSetOperatorName()) {
          oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.operatorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operatorAvatar != null) {
        if (struct.isSetOperatorAvatar()) {
          oprot.writeFieldBegin(OPERATOR_AVATAR_FIELD_DESC);
          oprot.writeString(struct.operatorAvatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.media_thumb_url != null) {
        if (struct.isSetMedia_thumb_url()) {
          oprot.writeFieldBegin(MEDIA_THUMB_URL_FIELD_DESC);
          oprot.writeString(struct.media_thumb_url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MediaContentTupleSchemeFactory implements SchemeFactory {
    public MediaContentTupleScheme getScheme() {
      return new MediaContentTupleScheme();
    }
  }

  private static class MediaContentTupleScheme extends TupleScheme<MediaContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MediaContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.media_filesize);
      oprot.writeI32(struct.media_type.getValue());
      oprot.writeString(struct.media_down_url);
      BitSet optionals = new BitSet();
      if (struct.isSetMedia_filename()) {
        optionals.set(0);
      }
      if (struct.isSetMedia_thumb()) {
        optionals.set(1);
      }
      if (struct.isSetMedia_duration()) {
        optionals.set(2);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(3);
      }
      if (struct.isSetOperatorName()) {
        optionals.set(4);
      }
      if (struct.isSetOperatorAvatar()) {
        optionals.set(5);
      }
      if (struct.isSetMedia_thumb_url()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMedia_filename()) {
        oprot.writeString(struct.media_filename);
      }
      if (struct.isSetMedia_thumb()) {
        oprot.writeString(struct.media_thumb);
      }
      if (struct.isSetMedia_duration()) {
        oprot.writeI32(struct.media_duration);
      }
      if (struct.isSetOperatorId()) {
        oprot.writeI32(struct.operatorId);
      }
      if (struct.isSetOperatorName()) {
        oprot.writeString(struct.operatorName);
      }
      if (struct.isSetOperatorAvatar()) {
        oprot.writeString(struct.operatorAvatar);
      }
      if (struct.isSetMedia_thumb_url()) {
        oprot.writeString(struct.media_thumb_url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MediaContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.media_filesize = iprot.readI32();
      struct.setMedia_filesizeIsSet(true);
      struct.media_type = com.gnet.uc.thrift.ChatMediaType.findByValue(iprot.readI32());
      struct.setMedia_typeIsSet(true);
      struct.media_down_url = iprot.readString();
      struct.setMedia_down_urlIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.media_filename = iprot.readString();
        struct.setMedia_filenameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.media_thumb = iprot.readString();
        struct.setMedia_thumbIsSet(true);
      }
      if (incoming.get(2)) {
        struct.media_duration = iprot.readI32();
        struct.setMedia_durationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operatorId = iprot.readI32();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.operatorName = iprot.readString();
        struct.setOperatorNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operatorAvatar = iprot.readString();
        struct.setOperatorAvatarIsSet(true);
      }
      if (incoming.get(6)) {
        struct.media_thumb_url = iprot.readString();
        struct.setMedia_thumb_urlIsSet(true);
      }
    }
  }

}

