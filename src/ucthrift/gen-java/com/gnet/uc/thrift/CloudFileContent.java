/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class CloudFileContent implements org.apache.thrift.TBase<CloudFileContent, CloudFileContent._Fields>, java.io.Serializable, Cloneable, Comparable<CloudFileContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloudFileContent");

  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_NAME_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("fileNameTo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_COUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileCounts", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("isDir", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField CLOUD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudType", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailType", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField DETAIL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("detailContent", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CONTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contentId", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CloudFileContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CloudFileContentTupleSchemeFactory());
  }

  public int operatorId; // required
  public String operatorName; // required
  public String fileName; // required
  public String fileNameTo; // optional
  public long size; // required
  public int fileCounts; // optional
  public byte isDir; // required
  public short cloudType; // required
  public byte detailType; // required
  public String detailContent; // required
  public long createTime; // required
  public long contentId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATOR_ID((short)1, "operatorId"),
    OPERATOR_NAME((short)2, "operatorName"),
    FILE_NAME((short)3, "fileName"),
    FILE_NAME_TO((short)4, "fileNameTo"),
    SIZE((short)5, "size"),
    FILE_COUNTS((short)6, "fileCounts"),
    IS_DIR((short)7, "isDir"),
    CLOUD_TYPE((short)8, "cloudType"),
    DETAIL_TYPE((short)9, "detailType"),
    DETAIL_CONTENT((short)10, "detailContent"),
    CREATE_TIME((short)11, "createTime"),
    CONTENT_ID((short)12, "contentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATOR_ID
          return OPERATOR_ID;
        case 2: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 3: // FILE_NAME
          return FILE_NAME;
        case 4: // FILE_NAME_TO
          return FILE_NAME_TO;
        case 5: // SIZE
          return SIZE;
        case 6: // FILE_COUNTS
          return FILE_COUNTS;
        case 7: // IS_DIR
          return IS_DIR;
        case 8: // CLOUD_TYPE
          return CLOUD_TYPE;
        case 9: // DETAIL_TYPE
          return DETAIL_TYPE;
        case 10: // DETAIL_CONTENT
          return DETAIL_CONTENT;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // CONTENT_ID
          return CONTENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private static final int __FILECOUNTS_ISSET_ID = 2;
  private static final int __ISDIR_ISSET_ID = 3;
  private static final int __CLOUDTYPE_ISSET_ID = 4;
  private static final int __DETAILTYPE_ISSET_ID = 5;
  private static final int __CREATETIME_ISSET_ID = 6;
  private static final int __CONTENTID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILE_NAME_TO,_Fields.FILE_COUNTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME_TO, new org.apache.thrift.meta_data.FieldMetaData("fileNameTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_COUNTS, new org.apache.thrift.meta_data.FieldMetaData("fileCounts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DIR, new org.apache.thrift.meta_data.FieldMetaData("isDir", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CLOUD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cloudType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DETAIL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("detailType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DETAIL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("detailContent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("contentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloudFileContent.class, metaDataMap);
  }

  public CloudFileContent() {
  }

  public CloudFileContent(
    int operatorId,
    String operatorName,
    String fileName,
    long size,
    byte isDir,
    short cloudType,
    byte detailType,
    String detailContent,
    long createTime,
    long contentId)
  {
    this();
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    this.operatorName = operatorName;
    this.fileName = fileName;
    this.size = size;
    setSizeIsSet(true);
    this.isDir = isDir;
    setIsDirIsSet(true);
    this.cloudType = cloudType;
    setCloudTypeIsSet(true);
    this.detailType = detailType;
    setDetailTypeIsSet(true);
    this.detailContent = detailContent;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.contentId = contentId;
    setContentIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CloudFileContent(CloudFileContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operatorId = other.operatorId;
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    if (other.isSetFileNameTo()) {
      this.fileNameTo = other.fileNameTo;
    }
    this.size = other.size;
    this.fileCounts = other.fileCounts;
    this.isDir = other.isDir;
    this.cloudType = other.cloudType;
    this.detailType = other.detailType;
    if (other.isSetDetailContent()) {
      this.detailContent = other.detailContent;
    }
    this.createTime = other.createTime;
    this.contentId = other.contentId;
  }

  public CloudFileContent deepCopy() {
    return new CloudFileContent(this);
  }

  @Override
  public void clear() {
    setOperatorIdIsSet(false);
    this.operatorId = 0;
    this.operatorName = null;
    this.fileName = null;
    this.fileNameTo = null;
    setSizeIsSet(false);
    this.size = 0;
    setFileCountsIsSet(false);
    this.fileCounts = 0;
    setIsDirIsSet(false);
    this.isDir = 0;
    setCloudTypeIsSet(false);
    this.cloudType = 0;
    setDetailTypeIsSet(false);
    this.detailType = 0;
    this.detailContent = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setContentIdIsSet(false);
    this.contentId = 0;
  }

  public int getOperatorId() {
    return this.operatorId;
  }

  public CloudFileContent setOperatorId(int operatorId) {
    this.operatorId = operatorId;
    setOperatorIdIsSet(true);
    return this;
  }

  public void unsetOperatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public String getOperatorName() {
    return this.operatorName;
  }

  public CloudFileContent setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public CloudFileContent setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public String getFileNameTo() {
    return this.fileNameTo;
  }

  public CloudFileContent setFileNameTo(String fileNameTo) {
    this.fileNameTo = fileNameTo;
    return this;
  }

  public void unsetFileNameTo() {
    this.fileNameTo = null;
  }

  /** Returns true if field fileNameTo is set (has been assigned a value) and false otherwise */
  public boolean isSetFileNameTo() {
    return this.fileNameTo != null;
  }

  public void setFileNameToIsSet(boolean value) {
    if (!value) {
      this.fileNameTo = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public CloudFileContent setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public int getFileCounts() {
    return this.fileCounts;
  }

  public CloudFileContent setFileCounts(int fileCounts) {
    this.fileCounts = fileCounts;
    setFileCountsIsSet(true);
    return this;
  }

  public void unsetFileCounts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILECOUNTS_ISSET_ID);
  }

  /** Returns true if field fileCounts is set (has been assigned a value) and false otherwise */
  public boolean isSetFileCounts() {
    return EncodingUtils.testBit(__isset_bitfield, __FILECOUNTS_ISSET_ID);
  }

  public void setFileCountsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILECOUNTS_ISSET_ID, value);
  }

  public byte getIsDir() {
    return this.isDir;
  }

  public CloudFileContent setIsDir(byte isDir) {
    this.isDir = isDir;
    setIsDirIsSet(true);
    return this;
  }

  public void unsetIsDir() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDIR_ISSET_ID);
  }

  /** Returns true if field isDir is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDir() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDIR_ISSET_ID);
  }

  public void setIsDirIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDIR_ISSET_ID, value);
  }

  public short getCloudType() {
    return this.cloudType;
  }

  public CloudFileContent setCloudType(short cloudType) {
    this.cloudType = cloudType;
    setCloudTypeIsSet(true);
    return this;
  }

  public void unsetCloudType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOUDTYPE_ISSET_ID);
  }

  /** Returns true if field cloudType is set (has been assigned a value) and false otherwise */
  public boolean isSetCloudType() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOUDTYPE_ISSET_ID);
  }

  public void setCloudTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOUDTYPE_ISSET_ID, value);
  }

  public byte getDetailType() {
    return this.detailType;
  }

  public CloudFileContent setDetailType(byte detailType) {
    this.detailType = detailType;
    setDetailTypeIsSet(true);
    return this;
  }

  public void unsetDetailType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  /** Returns true if field detailType is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailType() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  public void setDetailTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILTYPE_ISSET_ID, value);
  }

  public String getDetailContent() {
    return this.detailContent;
  }

  public CloudFileContent setDetailContent(String detailContent) {
    this.detailContent = detailContent;
    return this;
  }

  public void unsetDetailContent() {
    this.detailContent = null;
  }

  /** Returns true if field detailContent is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailContent() {
    return this.detailContent != null;
  }

  public void setDetailContentIsSet(boolean value) {
    if (!value) {
      this.detailContent = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public CloudFileContent setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getContentId() {
    return this.contentId;
  }

  public CloudFileContent setContentId(long contentId) {
    this.contentId = contentId;
    setContentIdIsSet(true);
    return this;
  }

  public void unsetContentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  /** Returns true if field contentId is set (has been assigned a value) and false otherwise */
  public boolean isSetContentId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  public void setContentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((Integer)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_NAME_TO:
      if (value == null) {
        unsetFileNameTo();
      } else {
        setFileNameTo((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    case FILE_COUNTS:
      if (value == null) {
        unsetFileCounts();
      } else {
        setFileCounts((Integer)value);
      }
      break;

    case IS_DIR:
      if (value == null) {
        unsetIsDir();
      } else {
        setIsDir((Byte)value);
      }
      break;

    case CLOUD_TYPE:
      if (value == null) {
        unsetCloudType();
      } else {
        setCloudType((Short)value);
      }
      break;

    case DETAIL_TYPE:
      if (value == null) {
        unsetDetailType();
      } else {
        setDetailType((Byte)value);
      }
      break;

    case DETAIL_CONTENT:
      if (value == null) {
        unsetDetailContent();
      } else {
        setDetailContent((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case CONTENT_ID:
      if (value == null) {
        unsetContentId();
      } else {
        setContentId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATOR_ID:
      return Integer.valueOf(getOperatorId());

    case OPERATOR_NAME:
      return getOperatorName();

    case FILE_NAME:
      return getFileName();

    case FILE_NAME_TO:
      return getFileNameTo();

    case SIZE:
      return Long.valueOf(getSize());

    case FILE_COUNTS:
      return Integer.valueOf(getFileCounts());

    case IS_DIR:
      return Byte.valueOf(getIsDir());

    case CLOUD_TYPE:
      return Short.valueOf(getCloudType());

    case DETAIL_TYPE:
      return Byte.valueOf(getDetailType());

    case DETAIL_CONTENT:
      return getDetailContent();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case CONTENT_ID:
      return Long.valueOf(getContentId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATOR_ID:
      return isSetOperatorId();
    case OPERATOR_NAME:
      return isSetOperatorName();
    case FILE_NAME:
      return isSetFileName();
    case FILE_NAME_TO:
      return isSetFileNameTo();
    case SIZE:
      return isSetSize();
    case FILE_COUNTS:
      return isSetFileCounts();
    case IS_DIR:
      return isSetIsDir();
    case CLOUD_TYPE:
      return isSetCloudType();
    case DETAIL_TYPE:
      return isSetDetailType();
    case DETAIL_CONTENT:
      return isSetDetailContent();
    case CREATE_TIME:
      return isSetCreateTime();
    case CONTENT_ID:
      return isSetContentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CloudFileContent)
      return this.equals((CloudFileContent)that);
    return false;
  }

  public boolean equals(CloudFileContent that) {
    if (that == null)
      return false;

    boolean this_present_operatorId = true;
    boolean that_present_operatorId = true;
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (this.operatorId != that.operatorId)
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileNameTo = true && this.isSetFileNameTo();
    boolean that_present_fileNameTo = true && that.isSetFileNameTo();
    if (this_present_fileNameTo || that_present_fileNameTo) {
      if (!(this_present_fileNameTo && that_present_fileNameTo))
        return false;
      if (!this.fileNameTo.equals(that.fileNameTo))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_fileCounts = true && this.isSetFileCounts();
    boolean that_present_fileCounts = true && that.isSetFileCounts();
    if (this_present_fileCounts || that_present_fileCounts) {
      if (!(this_present_fileCounts && that_present_fileCounts))
        return false;
      if (this.fileCounts != that.fileCounts)
        return false;
    }

    boolean this_present_isDir = true;
    boolean that_present_isDir = true;
    if (this_present_isDir || that_present_isDir) {
      if (!(this_present_isDir && that_present_isDir))
        return false;
      if (this.isDir != that.isDir)
        return false;
    }

    boolean this_present_cloudType = true;
    boolean that_present_cloudType = true;
    if (this_present_cloudType || that_present_cloudType) {
      if (!(this_present_cloudType && that_present_cloudType))
        return false;
      if (this.cloudType != that.cloudType)
        return false;
    }

    boolean this_present_detailType = true;
    boolean that_present_detailType = true;
    if (this_present_detailType || that_present_detailType) {
      if (!(this_present_detailType && that_present_detailType))
        return false;
      if (this.detailType != that.detailType)
        return false;
    }

    boolean this_present_detailContent = true && this.isSetDetailContent();
    boolean that_present_detailContent = true && that.isSetDetailContent();
    if (this_present_detailContent || that_present_detailContent) {
      if (!(this_present_detailContent && that_present_detailContent))
        return false;
      if (!this.detailContent.equals(that.detailContent))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_contentId = true;
    boolean that_present_contentId = true;
    if (this_present_contentId || that_present_contentId) {
      if (!(this_present_contentId && that_present_contentId))
        return false;
      if (this.contentId != that.contentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operatorId = true;
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileNameTo = true && (isSetFileNameTo());
    list.add(present_fileNameTo);
    if (present_fileNameTo)
      list.add(fileNameTo);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_fileCounts = true && (isSetFileCounts());
    list.add(present_fileCounts);
    if (present_fileCounts)
      list.add(fileCounts);

    boolean present_isDir = true;
    list.add(present_isDir);
    if (present_isDir)
      list.add(isDir);

    boolean present_cloudType = true;
    list.add(present_cloudType);
    if (present_cloudType)
      list.add(cloudType);

    boolean present_detailType = true;
    list.add(present_detailType);
    if (present_detailType)
      list.add(detailType);

    boolean present_detailContent = true && (isSetDetailContent());
    list.add(present_detailContent);
    if (present_detailContent)
      list.add(detailContent);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_contentId = true;
    list.add(present_contentId);
    if (present_contentId)
      list.add(contentId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CloudFileContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileNameTo()).compareTo(other.isSetFileNameTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileNameTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileNameTo, other.fileNameTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileCounts()).compareTo(other.isSetFileCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileCounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileCounts, other.fileCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDir()).compareTo(other.isSetIsDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDir, other.isDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloudType()).compareTo(other.isSetCloudType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloudType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudType, other.cloudType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailType()).compareTo(other.isSetDetailType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailType, other.detailType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailContent()).compareTo(other.isSetDetailContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailContent, other.detailContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentId()).compareTo(other.isSetContentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentId, other.contentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CloudFileContent(");
    boolean first = true;

    sb.append("operatorId:");
    sb.append(this.operatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorName:");
    if (this.operatorName == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (isSetFileNameTo()) {
      if (!first) sb.append(", ");
      sb.append("fileNameTo:");
      if (this.fileNameTo == null) {
        sb.append("null");
      } else {
        sb.append(this.fileNameTo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (isSetFileCounts()) {
      if (!first) sb.append(", ");
      sb.append("fileCounts:");
      sb.append(this.fileCounts);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isDir:");
    sb.append(this.isDir);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cloudType:");
    sb.append(this.cloudType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailType:");
    sb.append(this.detailType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailContent:");
    if (this.detailContent == null) {
      sb.append("null");
    } else {
      sb.append(this.detailContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentId:");
    sb.append(this.contentId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operatorId' because it's a primitive and you chose the non-beans generator.
    if (operatorName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorName' was not present! Struct: " + toString());
    }
    if (fileName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'size' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isDir' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cloudType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'detailType' because it's a primitive and you chose the non-beans generator.
    if (detailContent == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'detailContent' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'createTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'contentId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CloudFileContentStandardSchemeFactory implements SchemeFactory {
    public CloudFileContentStandardScheme getScheme() {
      return new CloudFileContentStandardScheme();
    }
  }

  private static class CloudFileContentStandardScheme extends StandardScheme<CloudFileContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CloudFileContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorId = iprot.readI32();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_NAME_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileNameTo = iprot.readString();
              struct.setFileNameToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_COUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileCounts = iprot.readI32();
              struct.setFileCountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.isDir = iprot.readByte();
              struct.setIsDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLOUD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.cloudType = iprot.readI16();
              struct.setCloudTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DETAIL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.detailType = iprot.readByte();
              struct.setDetailTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DETAIL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailContent = iprot.readString();
              struct.setDetailContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contentId = iprot.readI64();
              struct.setContentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperatorId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'size' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsDir()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isDir' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCloudType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cloudType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDetailType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'detailType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CloudFileContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.operatorId);
      oprot.writeFieldEnd();
      if (struct.operatorName != null) {
        oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
        oprot.writeString(struct.operatorName);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      if (struct.fileNameTo != null) {
        if (struct.isSetFileNameTo()) {
          oprot.writeFieldBegin(FILE_NAME_TO_FIELD_DESC);
          oprot.writeString(struct.fileNameTo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI64(struct.size);
      oprot.writeFieldEnd();
      if (struct.isSetFileCounts()) {
        oprot.writeFieldBegin(FILE_COUNTS_FIELD_DESC);
        oprot.writeI32(struct.fileCounts);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_DIR_FIELD_DESC);
      oprot.writeByte(struct.isDir);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOUD_TYPE_FIELD_DESC);
      oprot.writeI16(struct.cloudType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DETAIL_TYPE_FIELD_DESC);
      oprot.writeByte(struct.detailType);
      oprot.writeFieldEnd();
      if (struct.detailContent != null) {
        oprot.writeFieldBegin(DETAIL_CONTENT_FIELD_DESC);
        oprot.writeString(struct.detailContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTENT_ID_FIELD_DESC);
      oprot.writeI64(struct.contentId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CloudFileContentTupleSchemeFactory implements SchemeFactory {
    public CloudFileContentTupleScheme getScheme() {
      return new CloudFileContentTupleScheme();
    }
  }

  private static class CloudFileContentTupleScheme extends TupleScheme<CloudFileContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CloudFileContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.operatorId);
      oprot.writeString(struct.operatorName);
      oprot.writeString(struct.fileName);
      oprot.writeI64(struct.size);
      oprot.writeByte(struct.isDir);
      oprot.writeI16(struct.cloudType);
      oprot.writeByte(struct.detailType);
      oprot.writeString(struct.detailContent);
      oprot.writeI64(struct.createTime);
      oprot.writeI64(struct.contentId);
      BitSet optionals = new BitSet();
      if (struct.isSetFileNameTo()) {
        optionals.set(0);
      }
      if (struct.isSetFileCounts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFileNameTo()) {
        oprot.writeString(struct.fileNameTo);
      }
      if (struct.isSetFileCounts()) {
        oprot.writeI32(struct.fileCounts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CloudFileContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operatorId = iprot.readI32();
      struct.setOperatorIdIsSet(true);
      struct.operatorName = iprot.readString();
      struct.setOperatorNameIsSet(true);
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      struct.size = iprot.readI64();
      struct.setSizeIsSet(true);
      struct.isDir = iprot.readByte();
      struct.setIsDirIsSet(true);
      struct.cloudType = iprot.readI16();
      struct.setCloudTypeIsSet(true);
      struct.detailType = iprot.readByte();
      struct.setDetailTypeIsSet(true);
      struct.detailContent = iprot.readString();
      struct.setDetailContentIsSet(true);
      struct.createTime = iprot.readI64();
      struct.setCreateTimeIsSet(true);
      struct.contentId = iprot.readI64();
      struct.setContentIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.fileNameTo = iprot.readString();
        struct.setFileNameToIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileCounts = iprot.readI32();
        struct.setFileCountsIsSet(true);
      }
    }
  }

}

