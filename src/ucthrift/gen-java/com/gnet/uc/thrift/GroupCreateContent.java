/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class GroupCreateContent implements org.apache.thrift.TBase<GroupCreateContent, GroupCreateContent._Fields>, java.io.Serializable, Cloneable, Comparable<GroupCreateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupCreateContent");

  private static final org.apache.thrift.protocol.TField OPERATORID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUPID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupid", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("memberList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("group_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_PINYIN_FIELD_DESC = new org.apache.thrift.protocol.TField("name_pinyin", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteID", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NAME_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("name_flag", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("group_type", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField MEMBER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField GROUP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("group_status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("status_info", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CLOUD_LIBRARY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("cloud_library_info", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField DISPLAY_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("display_scope", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupCreateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupCreateContentTupleSchemeFactory());
  }

  public int operatorid; // required
  public int groupid; // required
  public List<GroupMemberInfo> memberList; // required
  public String avatar; // optional
  public String group_name; // optional
  public String name_pinyin; // optional
  public int create_time; // required
  public int siteID; // required
  public byte name_flag; // required
  public byte group_type; // optional
  public int memberCount; // optional
  public int group_status; // optional
  public String status_info; // optional
  public String cloud_library_info; // optional
  public int display_scope; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATORID((short)1, "operatorid"),
    GROUPID((short)2, "groupid"),
    MEMBER_LIST((short)3, "memberList"),
    AVATAR((short)4, "avatar"),
    GROUP_NAME((short)5, "group_name"),
    NAME_PINYIN((short)6, "name_pinyin"),
    CREATE_TIME((short)7, "create_time"),
    SITE_ID((short)8, "siteID"),
    NAME_FLAG((short)9, "name_flag"),
    GROUP_TYPE((short)10, "group_type"),
    MEMBER_COUNT((short)11, "memberCount"),
    GROUP_STATUS((short)12, "group_status"),
    STATUS_INFO((short)13, "status_info"),
    CLOUD_LIBRARY_INFO((short)14, "cloud_library_info"),
    DISPLAY_SCOPE((short)15, "display_scope");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATORID
          return OPERATORID;
        case 2: // GROUPID
          return GROUPID;
        case 3: // MEMBER_LIST
          return MEMBER_LIST;
        case 4: // AVATAR
          return AVATAR;
        case 5: // GROUP_NAME
          return GROUP_NAME;
        case 6: // NAME_PINYIN
          return NAME_PINYIN;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // SITE_ID
          return SITE_ID;
        case 9: // NAME_FLAG
          return NAME_FLAG;
        case 10: // GROUP_TYPE
          return GROUP_TYPE;
        case 11: // MEMBER_COUNT
          return MEMBER_COUNT;
        case 12: // GROUP_STATUS
          return GROUP_STATUS;
        case 13: // STATUS_INFO
          return STATUS_INFO;
        case 14: // CLOUD_LIBRARY_INFO
          return CLOUD_LIBRARY_INFO;
        case 15: // DISPLAY_SCOPE
          return DISPLAY_SCOPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private static final int __GROUPID_ISSET_ID = 1;
  private static final int __CREATE_TIME_ISSET_ID = 2;
  private static final int __SITEID_ISSET_ID = 3;
  private static final int __NAME_FLAG_ISSET_ID = 4;
  private static final int __GROUP_TYPE_ISSET_ID = 5;
  private static final int __MEMBERCOUNT_ISSET_ID = 6;
  private static final int __GROUP_STATUS_ISSET_ID = 7;
  private static final int __DISPLAY_SCOPE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AVATAR,_Fields.GROUP_NAME,_Fields.NAME_PINYIN,_Fields.GROUP_TYPE,_Fields.MEMBER_COUNT,_Fields.GROUP_STATUS,_Fields.STATUS_INFO,_Fields.CLOUD_LIBRARY_INFO,_Fields.DISPLAY_SCOPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATORID, new org.apache.thrift.meta_data.FieldMetaData("operatorid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUPID, new org.apache.thrift.meta_data.FieldMetaData("groupid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMBER_LIST, new org.apache.thrift.meta_data.FieldMetaData("memberList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupMemberInfo.class))));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("group_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_PINYIN, new org.apache.thrift.meta_data.FieldMetaData("name_pinyin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_FLAG, new org.apache.thrift.meta_data.FieldMetaData("name_flag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("group_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MEMBER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("memberCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("group_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_INFO, new org.apache.thrift.meta_data.FieldMetaData("status_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOUD_LIBRARY_INFO, new org.apache.thrift.meta_data.FieldMetaData("cloud_library_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("display_scope", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupCreateContent.class, metaDataMap);
  }

  public GroupCreateContent() {
  }

  public GroupCreateContent(
    int operatorid,
    int groupid,
    List<GroupMemberInfo> memberList,
    int create_time,
    int siteID,
    byte name_flag)
  {
    this();
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    this.groupid = groupid;
    setGroupidIsSet(true);
    this.memberList = memberList;
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    this.siteID = siteID;
    setSiteIDIsSet(true);
    this.name_flag = name_flag;
    setName_flagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupCreateContent(GroupCreateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operatorid = other.operatorid;
    this.groupid = other.groupid;
    if (other.isSetMemberList()) {
      List<GroupMemberInfo> __this__memberList = new ArrayList<GroupMemberInfo>(other.memberList.size());
      for (GroupMemberInfo other_element : other.memberList) {
        __this__memberList.add(new GroupMemberInfo(other_element));
      }
      this.memberList = __this__memberList;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetGroup_name()) {
      this.group_name = other.group_name;
    }
    if (other.isSetName_pinyin()) {
      this.name_pinyin = other.name_pinyin;
    }
    this.create_time = other.create_time;
    this.siteID = other.siteID;
    this.name_flag = other.name_flag;
    this.group_type = other.group_type;
    this.memberCount = other.memberCount;
    this.group_status = other.group_status;
    if (other.isSetStatus_info()) {
      this.status_info = other.status_info;
    }
    if (other.isSetCloud_library_info()) {
      this.cloud_library_info = other.cloud_library_info;
    }
    this.display_scope = other.display_scope;
  }

  public GroupCreateContent deepCopy() {
    return new GroupCreateContent(this);
  }

  @Override
  public void clear() {
    setOperatoridIsSet(false);
    this.operatorid = 0;
    setGroupidIsSet(false);
    this.groupid = 0;
    this.memberList = null;
    this.avatar = null;
    this.group_name = null;
    this.name_pinyin = null;
    setCreate_timeIsSet(false);
    this.create_time = 0;
    setSiteIDIsSet(false);
    this.siteID = 0;
    setName_flagIsSet(false);
    this.name_flag = 0;
    setGroup_typeIsSet(false);
    this.group_type = 0;
    setMemberCountIsSet(false);
    this.memberCount = 0;
    setGroup_statusIsSet(false);
    this.group_status = 0;
    this.status_info = null;
    this.cloud_library_info = null;
    setDisplay_scopeIsSet(false);
    this.display_scope = 0;
  }

  public int getOperatorid() {
    return this.operatorid;
  }

  public GroupCreateContent setOperatorid(int operatorid) {
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    return this;
  }

  public void unsetOperatorid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorid is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorid() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatoridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public int getGroupid() {
    return this.groupid;
  }

  public GroupCreateContent setGroupid(int groupid) {
    this.groupid = groupid;
    setGroupidIsSet(true);
    return this;
  }

  public void unsetGroupid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupid is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupid() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getMemberListSize() {
    return (this.memberList == null) ? 0 : this.memberList.size();
  }

  public java.util.Iterator<GroupMemberInfo> getMemberListIterator() {
    return (this.memberList == null) ? null : this.memberList.iterator();
  }

  public void addToMemberList(GroupMemberInfo elem) {
    if (this.memberList == null) {
      this.memberList = new ArrayList<GroupMemberInfo>();
    }
    this.memberList.add(elem);
  }

  public List<GroupMemberInfo> getMemberList() {
    return this.memberList;
  }

  public GroupCreateContent setMemberList(List<GroupMemberInfo> memberList) {
    this.memberList = memberList;
    return this;
  }

  public void unsetMemberList() {
    this.memberList = null;
  }

  /** Returns true if field memberList is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberList() {
    return this.memberList != null;
  }

  public void setMemberListIsSet(boolean value) {
    if (!value) {
      this.memberList = null;
    }
  }

  public String getAvatar() {
    return this.avatar;
  }

  public GroupCreateContent setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public String getGroup_name() {
    return this.group_name;
  }

  public GroupCreateContent setGroup_name(String group_name) {
    this.group_name = group_name;
    return this;
  }

  public void unsetGroup_name() {
    this.group_name = null;
  }

  /** Returns true if field group_name is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_name() {
    return this.group_name != null;
  }

  public void setGroup_nameIsSet(boolean value) {
    if (!value) {
      this.group_name = null;
    }
  }

  public String getName_pinyin() {
    return this.name_pinyin;
  }

  public GroupCreateContent setName_pinyin(String name_pinyin) {
    this.name_pinyin = name_pinyin;
    return this;
  }

  public void unsetName_pinyin() {
    this.name_pinyin = null;
  }

  /** Returns true if field name_pinyin is set (has been assigned a value) and false otherwise */
  public boolean isSetName_pinyin() {
    return this.name_pinyin != null;
  }

  public void setName_pinyinIsSet(boolean value) {
    if (!value) {
      this.name_pinyin = null;
    }
  }

  public int getCreate_time() {
    return this.create_time;
  }

  public GroupCreateContent setCreate_time(int create_time) {
    this.create_time = create_time;
    setCreate_timeIsSet(true);
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  public int getSiteID() {
    return this.siteID;
  }

  public GroupCreateContent setSiteID(int siteID) {
    this.siteID = siteID;
    setSiteIDIsSet(true);
    return this;
  }

  public void unsetSiteID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITEID_ISSET_ID);
  }

  /** Returns true if field siteID is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteID() {
    return EncodingUtils.testBit(__isset_bitfield, __SITEID_ISSET_ID);
  }

  public void setSiteIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITEID_ISSET_ID, value);
  }

  public byte getName_flag() {
    return this.name_flag;
  }

  public GroupCreateContent setName_flag(byte name_flag) {
    this.name_flag = name_flag;
    setName_flagIsSet(true);
    return this;
  }

  public void unsetName_flag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_FLAG_ISSET_ID);
  }

  /** Returns true if field name_flag is set (has been assigned a value) and false otherwise */
  public boolean isSetName_flag() {
    return EncodingUtils.testBit(__isset_bitfield, __NAME_FLAG_ISSET_ID);
  }

  public void setName_flagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_FLAG_ISSET_ID, value);
  }

  public byte getGroup_type() {
    return this.group_type;
  }

  public GroupCreateContent setGroup_type(byte group_type) {
    this.group_type = group_type;
    setGroup_typeIsSet(true);
    return this;
  }

  public void unsetGroup_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_TYPE_ISSET_ID);
  }

  /** Returns true if field group_type is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_type() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUP_TYPE_ISSET_ID);
  }

  public void setGroup_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_TYPE_ISSET_ID, value);
  }

  public int getMemberCount() {
    return this.memberCount;
  }

  public GroupCreateContent setMemberCount(int memberCount) {
    this.memberCount = memberCount;
    setMemberCountIsSet(true);
    return this;
  }

  public void unsetMemberCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCOUNT_ISSET_ID);
  }

  /** Returns true if field memberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCOUNT_ISSET_ID);
  }

  public void setMemberCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCOUNT_ISSET_ID, value);
  }

  public int getGroup_status() {
    return this.group_status;
  }

  public GroupCreateContent setGroup_status(int group_status) {
    this.group_status = group_status;
    setGroup_statusIsSet(true);
    return this;
  }

  public void unsetGroup_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_STATUS_ISSET_ID);
  }

  /** Returns true if field group_status is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_status() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUP_STATUS_ISSET_ID);
  }

  public void setGroup_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_STATUS_ISSET_ID, value);
  }

  public String getStatus_info() {
    return this.status_info;
  }

  public GroupCreateContent setStatus_info(String status_info) {
    this.status_info = status_info;
    return this;
  }

  public void unsetStatus_info() {
    this.status_info = null;
  }

  /** Returns true if field status_info is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus_info() {
    return this.status_info != null;
  }

  public void setStatus_infoIsSet(boolean value) {
    if (!value) {
      this.status_info = null;
    }
  }

  public String getCloud_library_info() {
    return this.cloud_library_info;
  }

  public GroupCreateContent setCloud_library_info(String cloud_library_info) {
    this.cloud_library_info = cloud_library_info;
    return this;
  }

  public void unsetCloud_library_info() {
    this.cloud_library_info = null;
  }

  /** Returns true if field cloud_library_info is set (has been assigned a value) and false otherwise */
  public boolean isSetCloud_library_info() {
    return this.cloud_library_info != null;
  }

  public void setCloud_library_infoIsSet(boolean value) {
    if (!value) {
      this.cloud_library_info = null;
    }
  }

  public int getDisplay_scope() {
    return this.display_scope;
  }

  public GroupCreateContent setDisplay_scope(int display_scope) {
    this.display_scope = display_scope;
    setDisplay_scopeIsSet(true);
    return this;
  }

  public void unsetDisplay_scope() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPLAY_SCOPE_ISSET_ID);
  }

  /** Returns true if field display_scope is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay_scope() {
    return EncodingUtils.testBit(__isset_bitfield, __DISPLAY_SCOPE_ISSET_ID);
  }

  public void setDisplay_scopeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPLAY_SCOPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATORID:
      if (value == null) {
        unsetOperatorid();
      } else {
        setOperatorid((Integer)value);
      }
      break;

    case GROUPID:
      if (value == null) {
        unsetGroupid();
      } else {
        setGroupid((Integer)value);
      }
      break;

    case MEMBER_LIST:
      if (value == null) {
        unsetMemberList();
      } else {
        setMemberList((List<GroupMemberInfo>)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroup_name();
      } else {
        setGroup_name((String)value);
      }
      break;

    case NAME_PINYIN:
      if (value == null) {
        unsetName_pinyin();
      } else {
        setName_pinyin((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((Integer)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSiteID();
      } else {
        setSiteID((Integer)value);
      }
      break;

    case NAME_FLAG:
      if (value == null) {
        unsetName_flag();
      } else {
        setName_flag((Byte)value);
      }
      break;

    case GROUP_TYPE:
      if (value == null) {
        unsetGroup_type();
      } else {
        setGroup_type((Byte)value);
      }
      break;

    case MEMBER_COUNT:
      if (value == null) {
        unsetMemberCount();
      } else {
        setMemberCount((Integer)value);
      }
      break;

    case GROUP_STATUS:
      if (value == null) {
        unsetGroup_status();
      } else {
        setGroup_status((Integer)value);
      }
      break;

    case STATUS_INFO:
      if (value == null) {
        unsetStatus_info();
      } else {
        setStatus_info((String)value);
      }
      break;

    case CLOUD_LIBRARY_INFO:
      if (value == null) {
        unsetCloud_library_info();
      } else {
        setCloud_library_info((String)value);
      }
      break;

    case DISPLAY_SCOPE:
      if (value == null) {
        unsetDisplay_scope();
      } else {
        setDisplay_scope((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATORID:
      return Integer.valueOf(getOperatorid());

    case GROUPID:
      return Integer.valueOf(getGroupid());

    case MEMBER_LIST:
      return getMemberList();

    case AVATAR:
      return getAvatar();

    case GROUP_NAME:
      return getGroup_name();

    case NAME_PINYIN:
      return getName_pinyin();

    case CREATE_TIME:
      return Integer.valueOf(getCreate_time());

    case SITE_ID:
      return Integer.valueOf(getSiteID());

    case NAME_FLAG:
      return Byte.valueOf(getName_flag());

    case GROUP_TYPE:
      return Byte.valueOf(getGroup_type());

    case MEMBER_COUNT:
      return Integer.valueOf(getMemberCount());

    case GROUP_STATUS:
      return Integer.valueOf(getGroup_status());

    case STATUS_INFO:
      return getStatus_info();

    case CLOUD_LIBRARY_INFO:
      return getCloud_library_info();

    case DISPLAY_SCOPE:
      return Integer.valueOf(getDisplay_scope());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATORID:
      return isSetOperatorid();
    case GROUPID:
      return isSetGroupid();
    case MEMBER_LIST:
      return isSetMemberList();
    case AVATAR:
      return isSetAvatar();
    case GROUP_NAME:
      return isSetGroup_name();
    case NAME_PINYIN:
      return isSetName_pinyin();
    case CREATE_TIME:
      return isSetCreate_time();
    case SITE_ID:
      return isSetSiteID();
    case NAME_FLAG:
      return isSetName_flag();
    case GROUP_TYPE:
      return isSetGroup_type();
    case MEMBER_COUNT:
      return isSetMemberCount();
    case GROUP_STATUS:
      return isSetGroup_status();
    case STATUS_INFO:
      return isSetStatus_info();
    case CLOUD_LIBRARY_INFO:
      return isSetCloud_library_info();
    case DISPLAY_SCOPE:
      return isSetDisplay_scope();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupCreateContent)
      return this.equals((GroupCreateContent)that);
    return false;
  }

  public boolean equals(GroupCreateContent that) {
    if (that == null)
      return false;

    boolean this_present_operatorid = true;
    boolean that_present_operatorid = true;
    if (this_present_operatorid || that_present_operatorid) {
      if (!(this_present_operatorid && that_present_operatorid))
        return false;
      if (this.operatorid != that.operatorid)
        return false;
    }

    boolean this_present_groupid = true;
    boolean that_present_groupid = true;
    if (this_present_groupid || that_present_groupid) {
      if (!(this_present_groupid && that_present_groupid))
        return false;
      if (this.groupid != that.groupid)
        return false;
    }

    boolean this_present_memberList = true && this.isSetMemberList();
    boolean that_present_memberList = true && that.isSetMemberList();
    if (this_present_memberList || that_present_memberList) {
      if (!(this_present_memberList && that_present_memberList))
        return false;
      if (!this.memberList.equals(that.memberList))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_group_name = true && this.isSetGroup_name();
    boolean that_present_group_name = true && that.isSetGroup_name();
    if (this_present_group_name || that_present_group_name) {
      if (!(this_present_group_name && that_present_group_name))
        return false;
      if (!this.group_name.equals(that.group_name))
        return false;
    }

    boolean this_present_name_pinyin = true && this.isSetName_pinyin();
    boolean that_present_name_pinyin = true && that.isSetName_pinyin();
    if (this_present_name_pinyin || that_present_name_pinyin) {
      if (!(this_present_name_pinyin && that_present_name_pinyin))
        return false;
      if (!this.name_pinyin.equals(that.name_pinyin))
        return false;
    }

    boolean this_present_create_time = true;
    boolean that_present_create_time = true;
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (this.create_time != that.create_time)
        return false;
    }

    boolean this_present_siteID = true;
    boolean that_present_siteID = true;
    if (this_present_siteID || that_present_siteID) {
      if (!(this_present_siteID && that_present_siteID))
        return false;
      if (this.siteID != that.siteID)
        return false;
    }

    boolean this_present_name_flag = true;
    boolean that_present_name_flag = true;
    if (this_present_name_flag || that_present_name_flag) {
      if (!(this_present_name_flag && that_present_name_flag))
        return false;
      if (this.name_flag != that.name_flag)
        return false;
    }

    boolean this_present_group_type = true && this.isSetGroup_type();
    boolean that_present_group_type = true && that.isSetGroup_type();
    if (this_present_group_type || that_present_group_type) {
      if (!(this_present_group_type && that_present_group_type))
        return false;
      if (this.group_type != that.group_type)
        return false;
    }

    boolean this_present_memberCount = true && this.isSetMemberCount();
    boolean that_present_memberCount = true && that.isSetMemberCount();
    if (this_present_memberCount || that_present_memberCount) {
      if (!(this_present_memberCount && that_present_memberCount))
        return false;
      if (this.memberCount != that.memberCount)
        return false;
    }

    boolean this_present_group_status = true && this.isSetGroup_status();
    boolean that_present_group_status = true && that.isSetGroup_status();
    if (this_present_group_status || that_present_group_status) {
      if (!(this_present_group_status && that_present_group_status))
        return false;
      if (this.group_status != that.group_status)
        return false;
    }

    boolean this_present_status_info = true && this.isSetStatus_info();
    boolean that_present_status_info = true && that.isSetStatus_info();
    if (this_present_status_info || that_present_status_info) {
      if (!(this_present_status_info && that_present_status_info))
        return false;
      if (!this.status_info.equals(that.status_info))
        return false;
    }

    boolean this_present_cloud_library_info = true && this.isSetCloud_library_info();
    boolean that_present_cloud_library_info = true && that.isSetCloud_library_info();
    if (this_present_cloud_library_info || that_present_cloud_library_info) {
      if (!(this_present_cloud_library_info && that_present_cloud_library_info))
        return false;
      if (!this.cloud_library_info.equals(that.cloud_library_info))
        return false;
    }

    boolean this_present_display_scope = true && this.isSetDisplay_scope();
    boolean that_present_display_scope = true && that.isSetDisplay_scope();
    if (this_present_display_scope || that_present_display_scope) {
      if (!(this_present_display_scope && that_present_display_scope))
        return false;
      if (this.display_scope != that.display_scope)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operatorid = true;
    list.add(present_operatorid);
    if (present_operatorid)
      list.add(operatorid);

    boolean present_groupid = true;
    list.add(present_groupid);
    if (present_groupid)
      list.add(groupid);

    boolean present_memberList = true && (isSetMemberList());
    list.add(present_memberList);
    if (present_memberList)
      list.add(memberList);

    boolean present_avatar = true && (isSetAvatar());
    list.add(present_avatar);
    if (present_avatar)
      list.add(avatar);

    boolean present_group_name = true && (isSetGroup_name());
    list.add(present_group_name);
    if (present_group_name)
      list.add(group_name);

    boolean present_name_pinyin = true && (isSetName_pinyin());
    list.add(present_name_pinyin);
    if (present_name_pinyin)
      list.add(name_pinyin);

    boolean present_create_time = true;
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_siteID = true;
    list.add(present_siteID);
    if (present_siteID)
      list.add(siteID);

    boolean present_name_flag = true;
    list.add(present_name_flag);
    if (present_name_flag)
      list.add(name_flag);

    boolean present_group_type = true && (isSetGroup_type());
    list.add(present_group_type);
    if (present_group_type)
      list.add(group_type);

    boolean present_memberCount = true && (isSetMemberCount());
    list.add(present_memberCount);
    if (present_memberCount)
      list.add(memberCount);

    boolean present_group_status = true && (isSetGroup_status());
    list.add(present_group_status);
    if (present_group_status)
      list.add(group_status);

    boolean present_status_info = true && (isSetStatus_info());
    list.add(present_status_info);
    if (present_status_info)
      list.add(status_info);

    boolean present_cloud_library_info = true && (isSetCloud_library_info());
    list.add(present_cloud_library_info);
    if (present_cloud_library_info)
      list.add(cloud_library_info);

    boolean present_display_scope = true && (isSetDisplay_scope());
    list.add(present_display_scope);
    if (present_display_scope)
      list.add(display_scope);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupCreateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperatorid()).compareTo(other.isSetOperatorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorid, other.operatorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupid()).compareTo(other.isSetGroupid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupid, other.groupid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberList()).compareTo(other.isSetMemberList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberList, other.memberList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_name()).compareTo(other.isSetGroup_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_name, other.group_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName_pinyin()).compareTo(other.isSetName_pinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName_pinyin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_pinyin, other.name_pinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteID()).compareTo(other.isSetSiteID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteID, other.siteID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName_flag()).compareTo(other.isSetName_flag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName_flag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_flag, other.name_flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_type()).compareTo(other.isSetGroup_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_type, other.group_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCount()).compareTo(other.isSetMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCount, other.memberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_status()).compareTo(other.isSetGroup_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_status, other.group_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus_info()).compareTo(other.isSetStatus_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status_info, other.status_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloud_library_info()).compareTo(other.isSetCloud_library_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloud_library_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloud_library_info, other.cloud_library_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay_scope()).compareTo(other.isSetDisplay_scope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay_scope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display_scope, other.display_scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupCreateContent(");
    boolean first = true;

    sb.append("operatorid:");
    sb.append(this.operatorid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupid:");
    sb.append(this.groupid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberList:");
    if (this.memberList == null) {
      sb.append("null");
    } else {
      sb.append(this.memberList);
    }
    first = false;
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetGroup_name()) {
      if (!first) sb.append(", ");
      sb.append("group_name:");
      if (this.group_name == null) {
        sb.append("null");
      } else {
        sb.append(this.group_name);
      }
      first = false;
    }
    if (isSetName_pinyin()) {
      if (!first) sb.append(", ");
      sb.append("name_pinyin:");
      if (this.name_pinyin == null) {
        sb.append("null");
      } else {
        sb.append(this.name_pinyin);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("create_time:");
    sb.append(this.create_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteID:");
    sb.append(this.siteID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name_flag:");
    sb.append(this.name_flag);
    first = false;
    if (isSetGroup_type()) {
      if (!first) sb.append(", ");
      sb.append("group_type:");
      sb.append(this.group_type);
      first = false;
    }
    if (isSetMemberCount()) {
      if (!first) sb.append(", ");
      sb.append("memberCount:");
      sb.append(this.memberCount);
      first = false;
    }
    if (isSetGroup_status()) {
      if (!first) sb.append(", ");
      sb.append("group_status:");
      sb.append(this.group_status);
      first = false;
    }
    if (isSetStatus_info()) {
      if (!first) sb.append(", ");
      sb.append("status_info:");
      if (this.status_info == null) {
        sb.append("null");
      } else {
        sb.append(this.status_info);
      }
      first = false;
    }
    if (isSetCloud_library_info()) {
      if (!first) sb.append(", ");
      sb.append("cloud_library_info:");
      if (this.cloud_library_info == null) {
        sb.append("null");
      } else {
        sb.append(this.cloud_library_info);
      }
      first = false;
    }
    if (isSetDisplay_scope()) {
      if (!first) sb.append(", ");
      sb.append("display_scope:");
      sb.append(this.display_scope);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operatorid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'groupid' because it's a primitive and you chose the non-beans generator.
    if (memberList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'create_time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'siteID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'name_flag' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupCreateContentStandardSchemeFactory implements SchemeFactory {
    public GroupCreateContentStandardScheme getScheme() {
      return new GroupCreateContentStandardScheme();
    }
  }

  private static class GroupCreateContentStandardScheme extends StandardScheme<GroupCreateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupCreateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorid = iprot.readI32();
              struct.setOperatoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupid = iprot.readI32();
              struct.setGroupidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.memberList = new ArrayList<GroupMemberInfo>(_list16.size);
                GroupMemberInfo _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new GroupMemberInfo();
                  _elem17.read(iprot);
                  struct.memberList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setMemberListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group_name = iprot.readString();
              struct.setGroup_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME_PINYIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name_pinyin = iprot.readString();
              struct.setName_pinyinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.create_time = iprot.readI32();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteID = iprot.readI32();
              struct.setSiteIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NAME_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.name_flag = iprot.readByte();
              struct.setName_flagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.group_type = iprot.readByte();
              struct.setGroup_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MEMBER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberCount = iprot.readI32();
              struct.setMemberCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GROUP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group_status = iprot.readI32();
              struct.setGroup_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status_info = iprot.readString();
              struct.setStatus_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLOUD_LIBRARY_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cloud_library_info = iprot.readString();
              struct.setCloud_library_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DISPLAY_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.display_scope = iprot.readI32();
              struct.setDisplay_scopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperatorid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGroupid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreate_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'create_time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSiteID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'siteID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetName_flag()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name_flag' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupCreateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATORID_FIELD_DESC);
      oprot.writeI32(struct.operatorid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUPID_FIELD_DESC);
      oprot.writeI32(struct.groupid);
      oprot.writeFieldEnd();
      if (struct.memberList != null) {
        oprot.writeFieldBegin(MEMBER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.memberList.size()));
          for (GroupMemberInfo _iter19 : struct.memberList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group_name != null) {
        if (struct.isSetGroup_name()) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.group_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name_pinyin != null) {
        if (struct.isSetName_pinyin()) {
          oprot.writeFieldBegin(NAME_PINYIN_FIELD_DESC);
          oprot.writeString(struct.name_pinyin);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.create_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeI32(struct.siteID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NAME_FLAG_FIELD_DESC);
      oprot.writeByte(struct.name_flag);
      oprot.writeFieldEnd();
      if (struct.isSetGroup_type()) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeByte(struct.group_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemberCount()) {
        oprot.writeFieldBegin(MEMBER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.memberCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroup_status()) {
        oprot.writeFieldBegin(GROUP_STATUS_FIELD_DESC);
        oprot.writeI32(struct.group_status);
        oprot.writeFieldEnd();
      }
      if (struct.status_info != null) {
        if (struct.isSetStatus_info()) {
          oprot.writeFieldBegin(STATUS_INFO_FIELD_DESC);
          oprot.writeString(struct.status_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cloud_library_info != null) {
        if (struct.isSetCloud_library_info()) {
          oprot.writeFieldBegin(CLOUD_LIBRARY_INFO_FIELD_DESC);
          oprot.writeString(struct.cloud_library_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisplay_scope()) {
        oprot.writeFieldBegin(DISPLAY_SCOPE_FIELD_DESC);
        oprot.writeI32(struct.display_scope);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupCreateContentTupleSchemeFactory implements SchemeFactory {
    public GroupCreateContentTupleScheme getScheme() {
      return new GroupCreateContentTupleScheme();
    }
  }

  private static class GroupCreateContentTupleScheme extends TupleScheme<GroupCreateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.operatorid);
      oprot.writeI32(struct.groupid);
      {
        oprot.writeI32(struct.memberList.size());
        for (GroupMemberInfo _iter20 : struct.memberList)
        {
          _iter20.write(oprot);
        }
      }
      oprot.writeI32(struct.create_time);
      oprot.writeI32(struct.siteID);
      oprot.writeByte(struct.name_flag);
      BitSet optionals = new BitSet();
      if (struct.isSetAvatar()) {
        optionals.set(0);
      }
      if (struct.isSetGroup_name()) {
        optionals.set(1);
      }
      if (struct.isSetName_pinyin()) {
        optionals.set(2);
      }
      if (struct.isSetGroup_type()) {
        optionals.set(3);
      }
      if (struct.isSetMemberCount()) {
        optionals.set(4);
      }
      if (struct.isSetGroup_status()) {
        optionals.set(5);
      }
      if (struct.isSetStatus_info()) {
        optionals.set(6);
      }
      if (struct.isSetCloud_library_info()) {
        optionals.set(7);
      }
      if (struct.isSetDisplay_scope()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetGroup_name()) {
        oprot.writeString(struct.group_name);
      }
      if (struct.isSetName_pinyin()) {
        oprot.writeString(struct.name_pinyin);
      }
      if (struct.isSetGroup_type()) {
        oprot.writeByte(struct.group_type);
      }
      if (struct.isSetMemberCount()) {
        oprot.writeI32(struct.memberCount);
      }
      if (struct.isSetGroup_status()) {
        oprot.writeI32(struct.group_status);
      }
      if (struct.isSetStatus_info()) {
        oprot.writeString(struct.status_info);
      }
      if (struct.isSetCloud_library_info()) {
        oprot.writeString(struct.cloud_library_info);
      }
      if (struct.isSetDisplay_scope()) {
        oprot.writeI32(struct.display_scope);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operatorid = iprot.readI32();
      struct.setOperatoridIsSet(true);
      struct.groupid = iprot.readI32();
      struct.setGroupidIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.memberList = new ArrayList<GroupMemberInfo>(_list21.size);
        GroupMemberInfo _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new GroupMemberInfo();
          _elem22.read(iprot);
          struct.memberList.add(_elem22);
        }
      }
      struct.setMemberListIsSet(true);
      struct.create_time = iprot.readI32();
      struct.setCreate_timeIsSet(true);
      struct.siteID = iprot.readI32();
      struct.setSiteIDIsSet(true);
      struct.name_flag = iprot.readByte();
      struct.setName_flagIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(1)) {
        struct.group_name = iprot.readString();
        struct.setGroup_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name_pinyin = iprot.readString();
        struct.setName_pinyinIsSet(true);
      }
      if (incoming.get(3)) {
        struct.group_type = iprot.readByte();
        struct.setGroup_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memberCount = iprot.readI32();
        struct.setMemberCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.group_status = iprot.readI32();
        struct.setGroup_statusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status_info = iprot.readString();
        struct.setStatus_infoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cloud_library_info = iprot.readString();
        struct.setCloud_library_infoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.display_scope = iprot.readI32();
        struct.setDisplay_scopeIsSet(true);
      }
    }
  }

}

