/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class GroupScopeNotifyContent implements org.apache.thrift.TBase<GroupScopeNotifyContent, GroupScopeNotifyContent._Fields>, java.io.Serializable, Cloneable, Comparable<GroupScopeNotifyContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupScopeNotifyContent");

  private static final org.apache.thrift.protocol.TField GROUPID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayScope", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupScopeNotifyContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupScopeNotifyContentTupleSchemeFactory());
  }

  public int groupid; // required
  public int displayScope; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUPID((short)1, "groupid"),
    DISPLAY_SCOPE((short)2, "displayScope");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUPID
          return GROUPID;
        case 2: // DISPLAY_SCOPE
          return DISPLAY_SCOPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPID_ISSET_ID = 0;
  private static final int __DISPLAYSCOPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUPID, new org.apache.thrift.meta_data.FieldMetaData("groupid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISPLAY_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("displayScope", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupScopeNotifyContent.class, metaDataMap);
  }

  public GroupScopeNotifyContent() {
  }

  public GroupScopeNotifyContent(
    int groupid,
    int displayScope)
  {
    this();
    this.groupid = groupid;
    setGroupidIsSet(true);
    this.displayScope = displayScope;
    setDisplayScopeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupScopeNotifyContent(GroupScopeNotifyContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.groupid = other.groupid;
    this.displayScope = other.displayScope;
  }

  public GroupScopeNotifyContent deepCopy() {
    return new GroupScopeNotifyContent(this);
  }

  @Override
  public void clear() {
    setGroupidIsSet(false);
    this.groupid = 0;
    setDisplayScopeIsSet(false);
    this.displayScope = 0;
  }

  public int getGroupid() {
    return this.groupid;
  }

  public GroupScopeNotifyContent setGroupid(int groupid) {
    this.groupid = groupid;
    setGroupidIsSet(true);
    return this;
  }

  public void unsetGroupid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupid is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupid() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getDisplayScope() {
    return this.displayScope;
  }

  public GroupScopeNotifyContent setDisplayScope(int displayScope) {
    this.displayScope = displayScope;
    setDisplayScopeIsSet(true);
    return this;
  }

  public void unsetDisplayScope() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISPLAYSCOPE_ISSET_ID);
  }

  /** Returns true if field displayScope is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayScope() {
    return EncodingUtils.testBit(__isset_bitfield, __DISPLAYSCOPE_ISSET_ID);
  }

  public void setDisplayScopeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISPLAYSCOPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUPID:
      if (value == null) {
        unsetGroupid();
      } else {
        setGroupid((Integer)value);
      }
      break;

    case DISPLAY_SCOPE:
      if (value == null) {
        unsetDisplayScope();
      } else {
        setDisplayScope((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUPID:
      return Integer.valueOf(getGroupid());

    case DISPLAY_SCOPE:
      return Integer.valueOf(getDisplayScope());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUPID:
      return isSetGroupid();
    case DISPLAY_SCOPE:
      return isSetDisplayScope();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupScopeNotifyContent)
      return this.equals((GroupScopeNotifyContent)that);
    return false;
  }

  public boolean equals(GroupScopeNotifyContent that) {
    if (that == null)
      return false;

    boolean this_present_groupid = true;
    boolean that_present_groupid = true;
    if (this_present_groupid || that_present_groupid) {
      if (!(this_present_groupid && that_present_groupid))
        return false;
      if (this.groupid != that.groupid)
        return false;
    }

    boolean this_present_displayScope = true;
    boolean that_present_displayScope = true;
    if (this_present_displayScope || that_present_displayScope) {
      if (!(this_present_displayScope && that_present_displayScope))
        return false;
      if (this.displayScope != that.displayScope)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groupid = true;
    list.add(present_groupid);
    if (present_groupid)
      list.add(groupid);

    boolean present_displayScope = true;
    list.add(present_displayScope);
    if (present_displayScope)
      list.add(displayScope);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupScopeNotifyContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupid()).compareTo(other.isSetGroupid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupid, other.groupid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayScope()).compareTo(other.isSetDisplayScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayScope, other.displayScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupScopeNotifyContent(");
    boolean first = true;

    sb.append("groupid:");
    sb.append(this.groupid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayScope:");
    sb.append(this.displayScope);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'groupid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'displayScope' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupScopeNotifyContentStandardSchemeFactory implements SchemeFactory {
    public GroupScopeNotifyContentStandardScheme getScheme() {
      return new GroupScopeNotifyContentStandardScheme();
    }
  }

  private static class GroupScopeNotifyContentStandardScheme extends StandardScheme<GroupScopeNotifyContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupScopeNotifyContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUPID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupid = iprot.readI32();
              struct.setGroupidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.displayScope = iprot.readI32();
              struct.setDisplayScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGroupid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDisplayScope()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'displayScope' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupScopeNotifyContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUPID_FIELD_DESC);
      oprot.writeI32(struct.groupid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISPLAY_SCOPE_FIELD_DESC);
      oprot.writeI32(struct.displayScope);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupScopeNotifyContentTupleSchemeFactory implements SchemeFactory {
    public GroupScopeNotifyContentTupleScheme getScheme() {
      return new GroupScopeNotifyContentTupleScheme();
    }
  }

  private static class GroupScopeNotifyContentTupleScheme extends TupleScheme<GroupScopeNotifyContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupScopeNotifyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.groupid);
      oprot.writeI32(struct.displayScope);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupScopeNotifyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.groupid = iprot.readI32();
      struct.setGroupidIsSet(true);
      struct.displayScope = iprot.readI32();
      struct.setDisplayScopeIsSet(true);
    }
  }

}

