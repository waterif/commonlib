/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class UcMessageBody implements org.apache.thrift.TBase<UcMessageBody, UcMessageBody._Fields>, java.io.Serializable, Cloneable, Comparable<UcMessageBody> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UcMessageBody");

  private static final org.apache.thrift.protocol.TField PRESENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("presence", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField PING_FIELD_DESC = new org.apache.thrift.protocol.TField("ping", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField ACK_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ackSent", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField ACK_RECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("ackReceived", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField ACK_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("ackRead", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField SLEEP_FIELD_DESC = new org.apache.thrift.protocol.TField("sleep", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField WAKEUP_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("wakeupConfirm", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField ACK_PLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ackPlay", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField BATCH_ACK_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("batchAckRead", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRUCT, (short)50);
  private static final org.apache.thrift.protocol.TField MEDIA_FIELD_DESC = new org.apache.thrift.protocol.TField("media", org.apache.thrift.protocol.TType.STRUCT, (short)51);
  private static final org.apache.thrift.protocol.TField GROUP_ADD_FIELD_DESC = new org.apache.thrift.protocol.TField("groupAdd", org.apache.thrift.protocol.TType.STRUCT, (short)52);
  private static final org.apache.thrift.protocol.TField GROUP_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("groupDel", org.apache.thrift.protocol.TType.STRUCT, (short)53);
  private static final org.apache.thrift.protocol.TField GROUP_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)54);
  private static final org.apache.thrift.protocol.TField GROUP_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupCreate", org.apache.thrift.protocol.TType.STRUCT, (short)55);
  private static final org.apache.thrift.protocol.TField GROUP_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTop", org.apache.thrift.protocol.TType.STRUCT, (short)56);
  private static final org.apache.thrift.protocol.TField SUMMARY_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("summaryCreate", org.apache.thrift.protocol.TType.STRUCT, (short)57);
  private static final org.apache.thrift.protocol.TField DOC_SEND_FIELD_DESC = new org.apache.thrift.protocol.TField("docSend", org.apache.thrift.protocol.TType.STRUCT, (short)58);
  private static final org.apache.thrift.protocol.TField ALERT_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("alertRule", org.apache.thrift.protocol.TType.STRUCT, (short)59);
  private static final org.apache.thrift.protocol.TField GROUP_CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupClose", org.apache.thrift.protocol.TType.STRUCT, (short)60);
  private static final org.apache.thrift.protocol.TField MSG_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("msgNotify", org.apache.thrift.protocol.TType.STRUCT, (short)61);
  private static final org.apache.thrift.protocol.TField GROUP_KICK_FIELD_DESC = new org.apache.thrift.protocol.TField("groupKick", org.apache.thrift.protocol.TType.STRUCT, (short)62);
  private static final org.apache.thrift.protocol.TField CODE_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("codeCreate", org.apache.thrift.protocol.TType.STRUCT, (short)63);
  private static final org.apache.thrift.protocol.TField CODE_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("codeDel", org.apache.thrift.protocol.TType.STRUCT, (short)64);
  private static final org.apache.thrift.protocol.TField DOC_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("docDel", org.apache.thrift.protocol.TType.STRUCT, (short)65);
  private static final org.apache.thrift.protocol.TField COMMENT_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCreate", org.apache.thrift.protocol.TType.STRUCT, (short)66);
  private static final org.apache.thrift.protocol.TField COMMENT_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("commentDel", org.apache.thrift.protocol.TType.STRUCT, (short)67);
  private static final org.apache.thrift.protocol.TField GROUP_AVATAR_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupAvatarUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)68);
  private static final org.apache.thrift.protocol.TField GROUP_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupState", org.apache.thrift.protocol.TType.STRUCT, (short)69);
  private static final org.apache.thrift.protocol.TField CLOUD_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudFile", org.apache.thrift.protocol.TType.STRUCT, (short)70);
  private static final org.apache.thrift.protocol.TField MEMBER_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberRole", org.apache.thrift.protocol.TType.STRUCT, (short)71);
  private static final org.apache.thrift.protocol.TField REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("report", org.apache.thrift.protocol.TType.STRUCT, (short)72);
  private static final org.apache.thrift.protocol.TField REVOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("revocation", org.apache.thrift.protocol.TType.STRUCT, (short)73);
  private static final org.apache.thrift.protocol.TField GROUP_SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupScope", org.apache.thrift.protocol.TType.STRUCT, (short)74);
  private static final org.apache.thrift.protocol.TField OWNER_TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerTransfer", org.apache.thrift.protocol.TType.STRUCT, (short)75);
  private static final org.apache.thrift.protocol.TField WELCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("welcome", org.apache.thrift.protocol.TType.STRUCT, (short)100);
  private static final org.apache.thrift.protocol.TField CLIENT_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField COMPLETE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("completeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField PWD_COMPLEX_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pwdComplexUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)103);
  private static final org.apache.thrift.protocol.TField PWD_EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("pwdExpire", org.apache.thrift.protocol.TType.STRUCT, (short)104);
  private static final org.apache.thrift.protocol.TField PC_GUIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("pcGuide", org.apache.thrift.protocol.TType.STRUCT, (short)105);
  private static final org.apache.thrift.protocol.TField MOBILE_GUIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileGuide", org.apache.thrift.protocol.TType.STRUCT, (short)106);
  private static final org.apache.thrift.protocol.TField PWD_MODIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("pwdModify", org.apache.thrift.protocol.TType.STRUCT, (short)107);
  private static final org.apache.thrift.protocol.TField TAG_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tagDel", org.apache.thrift.protocol.TType.STRUCT, (short)108);
  private static final org.apache.thrift.protocol.TField REMIND_FIELD_DESC = new org.apache.thrift.protocol.TField("remind", org.apache.thrift.protocol.TType.STRUCT, (short)109);
  private static final org.apache.thrift.protocol.TField DEPT_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deptUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)150);
  private static final org.apache.thrift.protocol.TField DEPT_TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("deptTransfer", org.apache.thrift.protocol.TType.STRUCT, (short)151);
  private static final org.apache.thrift.protocol.TField POSITION_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)152);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeEntry", org.apache.thrift.protocol.TType.STRUCT, (short)153);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_LEAVE_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeLeave", org.apache.thrift.protocol.TType.STRUCT, (short)154);
  private static final org.apache.thrift.protocol.TField EMPLOYEE_RIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeRights", org.apache.thrift.protocol.TType.STRUCT, (short)155);
  private static final org.apache.thrift.protocol.TField DEPRT_PARENT_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("deprtParentChange", org.apache.thrift.protocol.TType.STRUCT, (short)156);
  private static final org.apache.thrift.protocol.TField COMPANY_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("companyJoin", org.apache.thrift.protocol.TType.STRUCT, (short)157);
  private static final org.apache.thrift.protocol.TField DEPT_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("deptDelete", org.apache.thrift.protocol.TType.STRUCT, (short)158);
  private static final org.apache.thrift.protocol.TField ENTRY_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("entryConfirm", org.apache.thrift.protocol.TType.STRUCT, (short)159);
  private static final org.apache.thrift.protocol.TField LEAVE_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("leaveConfirm", org.apache.thrift.protocol.TType.STRUCT, (short)160);
  private static final org.apache.thrift.protocol.TField DEPT_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("deptConfirm", org.apache.thrift.protocol.TType.STRUCT, (short)161);
  private static final org.apache.thrift.protocol.TField INSTANT_INVITE_FIELD_DESC = new org.apache.thrift.protocol.TField("instantInvite", org.apache.thrift.protocol.TType.STRUCT, (short)200);
  private static final org.apache.thrift.protocol.TField CONF_INVITE_FIELD_DESC = new org.apache.thrift.protocol.TField("confInvite", org.apache.thrift.protocol.TType.STRUCT, (short)201);
  private static final org.apache.thrift.protocol.TField CONF_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("confReceive", org.apache.thrift.protocol.TType.STRUCT, (short)202);
  private static final org.apache.thrift.protocol.TField CONF_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("confReject", org.apache.thrift.protocol.TType.STRUCT, (short)203);
  private static final org.apache.thrift.protocol.TField CONF_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("confCancel", org.apache.thrift.protocol.TType.STRUCT, (short)204);
  private static final org.apache.thrift.protocol.TField CONF_ALERT_FIELD_DESC = new org.apache.thrift.protocol.TField("confAlert", org.apache.thrift.protocol.TType.STRUCT, (short)205);
  private static final org.apache.thrift.protocol.TField INSTANT_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("instantReceive", org.apache.thrift.protocol.TType.STRUCT, (short)207);
  private static final org.apache.thrift.protocol.TField INSTANT_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("instantReject", org.apache.thrift.protocol.TType.STRUCT, (short)208);
  private static final org.apache.thrift.protocol.TField CONF_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("confChat", org.apache.thrift.protocol.TType.STRUCT, (short)209);
  private static final org.apache.thrift.protocol.TField CONF_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("confSummary", org.apache.thrift.protocol.TType.STRUCT, (short)210);
  private static final org.apache.thrift.protocol.TField CALL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("callState", org.apache.thrift.protocol.TType.STRUCT, (short)211);
  private static final org.apache.thrift.protocol.TField CONF_UPLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("confUpload", org.apache.thrift.protocol.TType.STRUCT, (short)212);
  private static final org.apache.thrift.protocol.TField CONF_DOC_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("confDocDel", org.apache.thrift.protocol.TType.STRUCT, (short)213);
  private static final org.apache.thrift.protocol.TField CARD_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)250);
  private static final org.apache.thrift.protocol.TField CONTACTER_ADD_FIELD_DESC = new org.apache.thrift.protocol.TField("contacterAdd", org.apache.thrift.protocol.TType.STRUCT, (short)251);
  private static final org.apache.thrift.protocol.TField CONTACTER_DEL_FIELD_DESC = new org.apache.thrift.protocol.TField("contacterDel", org.apache.thrift.protocol.TType.STRUCT, (short)252);
  private static final org.apache.thrift.protocol.TField ATTENTION_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField("attentionCreate", org.apache.thrift.protocol.TType.STRUCT, (short)253);
  private static final org.apache.thrift.protocol.TField ATTENTION_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("attentionCancel", org.apache.thrift.protocol.TType.STRUCT, (short)254);
  private static final org.apache.thrift.protocol.TField TRANS_INVITE_FIELD_DESC = new org.apache.thrift.protocol.TField("transInvite", org.apache.thrift.protocol.TType.STRUCT, (short)300);
  private static final org.apache.thrift.protocol.TField TRANS_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("transReceive", org.apache.thrift.protocol.TType.STRUCT, (short)301);
  private static final org.apache.thrift.protocol.TField TRANS_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("transReject", org.apache.thrift.protocol.TType.STRUCT, (short)302);
  private static final org.apache.thrift.protocol.TField TRANS_STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("transStop", org.apache.thrift.protocol.TType.STRUCT, (short)303);
  private static final org.apache.thrift.protocol.TField AUDIO_INVITE_FIELD_DESC = new org.apache.thrift.protocol.TField("audioInvite", org.apache.thrift.protocol.TType.STRUCT, (short)350);
  private static final org.apache.thrift.protocol.TField AUDIO_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("audioReceive", org.apache.thrift.protocol.TType.STRUCT, (short)351);
  private static final org.apache.thrift.protocol.TField AUDIO_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("audioReject", org.apache.thrift.protocol.TType.STRUCT, (short)352);
  private static final org.apache.thrift.protocol.TField AUDIO_STOP_FIELD_DESC = new org.apache.thrift.protocol.TField("audioStop", org.apache.thrift.protocol.TType.STRUCT, (short)353);
  private static final org.apache.thrift.protocol.TField CALL_RECENT_FIELD_DESC = new org.apache.thrift.protocol.TField("callRecent", org.apache.thrift.protocol.TType.STRUCT, (short)354);
  private static final org.apache.thrift.protocol.TField CALL_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("callBlock", org.apache.thrift.protocol.TType.STRUCT, (short)355);
  private static final org.apache.thrift.protocol.TField CALL_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("callReject", org.apache.thrift.protocol.TType.STRUCT, (short)356);
  private static final org.apache.thrift.protocol.TField CALL_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("callCancel", org.apache.thrift.protocol.TType.STRUCT, (short)357);
  private static final org.apache.thrift.protocol.TField CONF_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("confShare", org.apache.thrift.protocol.TType.STRUCT, (short)400);
  private static final org.apache.thrift.protocol.TField WB_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("wbContent", org.apache.thrift.protocol.TType.STRUCT, (short)450);
  private static final org.apache.thrift.protocol.TField REMOTE_ASSISTANCE_INVITE_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAssistanceInvite", org.apache.thrift.protocol.TType.STRUCT, (short)601);
  private static final org.apache.thrift.protocol.TField REMOTE_ASSISTANCE_ACCEPT_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAssistanceAccept", org.apache.thrift.protocol.TType.STRUCT, (short)602);
  private static final org.apache.thrift.protocol.TField REMOTE_ASSISTANCE_REJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAssistanceReject", org.apache.thrift.protocol.TType.STRUCT, (short)603);
  private static final org.apache.thrift.protocol.TField REMOTE_ASSISTANCE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAssistanceEnd", org.apache.thrift.protocol.TType.STRUCT, (short)604);
  private static final org.apache.thrift.protocol.TField REMOTE_ASSISTANCE_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAssistanceCancel", org.apache.thrift.protocol.TType.STRUCT, (short)605);
  private static final org.apache.thrift.protocol.TField SESSION_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionTop", org.apache.thrift.protocol.TType.STRUCT, (short)800);
  private static final org.apache.thrift.protocol.TField AT_MESSAGE_READED_FIELD_DESC = new org.apache.thrift.protocol.TField("atMessageReaded", org.apache.thrift.protocol.TType.STRUCT, (short)801);
  private static final org.apache.thrift.protocol.TField LOGIN_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("loginNotify", org.apache.thrift.protocol.TType.STRUCT, (short)802);
  private static final org.apache.thrift.protocol.TField GROUP_SCOPE_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupScopeNotify", org.apache.thrift.protocol.TType.STRUCT, (short)803);
  private static final org.apache.thrift.protocol.TField CONTACTS_RELATION_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("contactsRelationNotify", org.apache.thrift.protocol.TType.STRUCT, (short)804);
  private static final org.apache.thrift.protocol.TField MEETING_ALERT_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingAlertNotify", org.apache.thrift.protocol.TType.STRUCT, (short)805);
  private static final org.apache.thrift.protocol.TField API_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("apiText", org.apache.thrift.protocol.TType.STRUCT, (short)10000);
  private static final org.apache.thrift.protocol.TField API_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("apiImage", org.apache.thrift.protocol.TType.STRUCT, (short)10001);
  private static final org.apache.thrift.protocol.TField API_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("apiFile", org.apache.thrift.protocol.TType.STRUCT, (short)10002);
  private static final org.apache.thrift.protocol.TField API_ACK_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("apiAckSent", org.apache.thrift.protocol.TType.STRUCT, (short)10003);
  private static final org.apache.thrift.protocol.TField API_OA_FIELD_DESC = new org.apache.thrift.protocol.TField("apiOA", org.apache.thrift.protocol.TType.STRUCT, (short)10004);
  private static final org.apache.thrift.protocol.TField API_OASTATUS_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("apiOAStatusChange", org.apache.thrift.protocol.TType.STRUCT, (short)10005);
  private static final org.apache.thrift.protocol.TField API_CHANGE_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiChangeNotify", org.apache.thrift.protocol.TType.STRUCT, (short)10006);
  private static final org.apache.thrift.protocol.TField API_EVENT_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiEventNotify", org.apache.thrift.protocol.TType.STRUCT, (short)10007);
  private static final org.apache.thrift.protocol.TField API_CUSTOMIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("apiCustomized", org.apache.thrift.protocol.TType.STRUCT, (short)10008);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UcMessageBodyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UcMessageBodyTupleSchemeFactory());
  }

  public MessagePresence presence; // optional
  public MessagePing ping; // optional
  public AckSent ackSent; // optional
  public AckReceived ackReceived; // optional
  public AckRead ackRead; // optional
  public SleepSet sleep; // optional
  public WakeupResult wakeupConfirm; // optional
  public AckPlay ackPlay; // optional
  public BatchAckRead batchAckRead; // optional
  public TextContent text; // optional
  public MediaContent media; // optional
  public GroupMemberAddContent groupAdd; // optional
  public GroupMemberDelContent groupDel; // optional
  public GroupNameUpdateContent groupUpdate; // optional
  public GroupCreateContent groupCreate; // optional
  public GroupTopContent groupTop; // optional
  public SummaryCreateContent summaryCreate; // optional
  public DocumentContent docSend; // optional
  public AlertRuleContent alertRule; // optional
  public DiscussionClose groupClose; // optional
  public MsgNotifyContent msgNotify; // optional
  public GroupMemberKickContent groupKick; // optional
  public CodeCreateContent codeCreate; // optional
  public CodeDelContent codeDel; // optional
  public DocumentDelContent docDel; // optional
  public CommentCreateContent commentCreate; // optional
  public CommentDelContent commentDel; // optional
  public GroupAvatarUpdateContent groupAvatarUpdate; // optional
  public GroupStateUpdateContent groupState; // optional
  public CloudFileContent cloudFile; // optional
  public MemberRoleUpdateContent memberRole; // optional
  public ReportContent report; // optional
  public RevocationContent revocation; // optional
  public GroupScopeContent groupScope; // optional
  public GroupOwnerTransferContent ownerTransfer; // optional
  public SystemWelcomeContent welcome; // optional
  public ClientUpdateContent clientUpdate; // optional
  public CompleteInfoContent completeInfo; // optional
  public PwdComplexUpdateContent pwdComplexUpdate; // optional
  public PwdExpireContent pwdExpire; // optional
  public PCClientGuide pcGuide; // optional
  public MobileClientGuide mobileGuide; // optional
  public PasswordModifyContent pwdModify; // optional
  public TagDelContent tagDel; // optional
  public GroupRemindContent remind; // optional
  public DeptUpdateContent deptUpdate; // optional
  public DeptTransferContent deptTransfer; // optional
  public PositionUpdateContent positionUpdate; // optional
  public EmployeeEntryContent employeeEntry; // optional
  public EmployeeLeaveContent employeeLeave; // optional
  public EmployeeRightsChangeContent employeeRights; // optional
  public DeptParentChangeContent deprtParentChange; // optional
  public CompanyJoinContent companyJoin; // optional
  public DeptDeleteContent deptDelete; // optional
  public EmployeeEntryConfirmContent entryConfirm; // optional
  public EmployeeLeaveConfirmContent leaveConfirm; // optional
  public DeptTransferConfirmContent deptConfirm; // optional
  public InstantIQInviteContent instantInvite; // optional
  public IQInviteContent confInvite; // optional
  public IQReceiveContent confReceive; // optional
  public IQRejectContent confReject; // optional
  public ConfCancelContent confCancel; // optional
  public ConfAlertContent confAlert; // optional
  public InstantIQReceiveContent instantReceive; // optional
  public InstantIQRejectContent instantReject; // optional
  public ConfChatContent confChat; // optional
  public ConfSummaryContent confSummary; // optional
  public CallStateContent callState; // optional
  public ConfUploadContent confUpload; // optional
  public ConfDelDocContent confDocDel; // optional
  public CardUpdateContent cardUpdate; // optional
  public ContacterAddContent contacterAdd; // optional
  public ContacterDelContent contacterDel; // optional
  public AttentionCreateContent attentionCreate; // optional
  public AttentionCancelContent attentionCancel; // optional
  public FileTransmissionInviteContent transInvite; // optional
  public FileTransmissionReceiveContent transReceive; // optional
  public FileTransmissionRejectContent transReject; // optional
  public FileTransmissionStopContent transStop; // optional
  public AudioInviteContent audioInvite; // optional
  public AudioReceiveContent audioReceive; // optional
  public AudioRejectContent audioReject; // optional
  public AudioStopContent audioStop; // optional
  public AudioRecentCallContent callRecent; // optional
  public AudioBlockCallContent callBlock; // optional
  public AudioRejectCallContent callReject; // optional
  public AudioCancelCallContent callCancel; // optional
  public ConfShareContent confShare; // optional
  public WBMessageContent wbContent; // optional
  public RemoteAssistanceInviteContent remoteAssistanceInvite; // optional
  public RemoteAssistanceAcceptContent remoteAssistanceAccept; // optional
  public RemoteAssistanceRejectContent remoteAssistanceReject; // optional
  public RemoteAssistanceEndContent remoteAssistanceEnd; // optional
  public RemoteAssistanceCancelContent remoteAssistanceCancel; // optional
  public SessionTopContent sessionTop; // optional
  public AtMessageReadedContent atMessageReaded; // optional
  public UserLoginNotifyContent loginNotify; // optional
  public GroupScopeNotifyContent groupScopeNotify; // optional
  public ContactsRelationNotifyContent contactsRelationNotify; // optional
  public MeetingAlertSettingNotifyContent meetingAlertNotify; // optional
  public APITextContent apiText; // optional
  public APIImageContent apiImage; // optional
  public APIFileContent apiFile; // optional
  public APIAckSentContent apiAckSent; // optional
  public APIOAContent apiOA; // optional
  public APIOAStatusChangeContent apiOAStatusChange; // optional
  public APIAppChangeNotifyContent apiChangeNotify; // optional
  public APIAppEventChangeNotify apiEventNotify; // optional
  public APICustomizedContent apiCustomized; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRESENCE((short)15, "presence"),
    PING((short)16, "ping"),
    ACK_SENT((short)20, "ackSent"),
    ACK_RECEIVED((short)21, "ackReceived"),
    ACK_READ((short)22, "ackRead"),
    SLEEP((short)23, "sleep"),
    WAKEUP_CONFIRM((short)24, "wakeupConfirm"),
    ACK_PLAY((short)25, "ackPlay"),
    BATCH_ACK_READ((short)26, "batchAckRead"),
    TEXT((short)50, "text"),
    MEDIA((short)51, "media"),
    GROUP_ADD((short)52, "groupAdd"),
    GROUP_DEL((short)53, "groupDel"),
    GROUP_UPDATE((short)54, "groupUpdate"),
    GROUP_CREATE((short)55, "groupCreate"),
    GROUP_TOP((short)56, "groupTop"),
    SUMMARY_CREATE((short)57, "summaryCreate"),
    DOC_SEND((short)58, "docSend"),
    ALERT_RULE((short)59, "alertRule"),
    GROUP_CLOSE((short)60, "groupClose"),
    MSG_NOTIFY((short)61, "msgNotify"),
    GROUP_KICK((short)62, "groupKick"),
    CODE_CREATE((short)63, "codeCreate"),
    CODE_DEL((short)64, "codeDel"),
    DOC_DEL((short)65, "docDel"),
    COMMENT_CREATE((short)66, "commentCreate"),
    COMMENT_DEL((short)67, "commentDel"),
    GROUP_AVATAR_UPDATE((short)68, "groupAvatarUpdate"),
    GROUP_STATE((short)69, "groupState"),
    CLOUD_FILE((short)70, "cloudFile"),
    MEMBER_ROLE((short)71, "memberRole"),
    REPORT((short)72, "report"),
    REVOCATION((short)73, "revocation"),
    GROUP_SCOPE((short)74, "groupScope"),
    OWNER_TRANSFER((short)75, "ownerTransfer"),
    WELCOME((short)100, "welcome"),
    CLIENT_UPDATE((short)101, "clientUpdate"),
    COMPLETE_INFO((short)102, "completeInfo"),
    PWD_COMPLEX_UPDATE((short)103, "pwdComplexUpdate"),
    PWD_EXPIRE((short)104, "pwdExpire"),
    PC_GUIDE((short)105, "pcGuide"),
    MOBILE_GUIDE((short)106, "mobileGuide"),
    PWD_MODIFY((short)107, "pwdModify"),
    TAG_DEL((short)108, "tagDel"),
    REMIND((short)109, "remind"),
    DEPT_UPDATE((short)150, "deptUpdate"),
    DEPT_TRANSFER((short)151, "deptTransfer"),
    POSITION_UPDATE((short)152, "positionUpdate"),
    EMPLOYEE_ENTRY((short)153, "employeeEntry"),
    EMPLOYEE_LEAVE((short)154, "employeeLeave"),
    EMPLOYEE_RIGHTS((short)155, "employeeRights"),
    DEPRT_PARENT_CHANGE((short)156, "deprtParentChange"),
    COMPANY_JOIN((short)157, "companyJoin"),
    DEPT_DELETE((short)158, "deptDelete"),
    ENTRY_CONFIRM((short)159, "entryConfirm"),
    LEAVE_CONFIRM((short)160, "leaveConfirm"),
    DEPT_CONFIRM((short)161, "deptConfirm"),
    INSTANT_INVITE((short)200, "instantInvite"),
    CONF_INVITE((short)201, "confInvite"),
    CONF_RECEIVE((short)202, "confReceive"),
    CONF_REJECT((short)203, "confReject"),
    CONF_CANCEL((short)204, "confCancel"),
    CONF_ALERT((short)205, "confAlert"),
    INSTANT_RECEIVE((short)207, "instantReceive"),
    INSTANT_REJECT((short)208, "instantReject"),
    CONF_CHAT((short)209, "confChat"),
    CONF_SUMMARY((short)210, "confSummary"),
    CALL_STATE((short)211, "callState"),
    CONF_UPLOAD((short)212, "confUpload"),
    CONF_DOC_DEL((short)213, "confDocDel"),
    CARD_UPDATE((short)250, "cardUpdate"),
    CONTACTER_ADD((short)251, "contacterAdd"),
    CONTACTER_DEL((short)252, "contacterDel"),
    ATTENTION_CREATE((short)253, "attentionCreate"),
    ATTENTION_CANCEL((short)254, "attentionCancel"),
    TRANS_INVITE((short)300, "transInvite"),
    TRANS_RECEIVE((short)301, "transReceive"),
    TRANS_REJECT((short)302, "transReject"),
    TRANS_STOP((short)303, "transStop"),
    AUDIO_INVITE((short)350, "audioInvite"),
    AUDIO_RECEIVE((short)351, "audioReceive"),
    AUDIO_REJECT((short)352, "audioReject"),
    AUDIO_STOP((short)353, "audioStop"),
    CALL_RECENT((short)354, "callRecent"),
    CALL_BLOCK((short)355, "callBlock"),
    CALL_REJECT((short)356, "callReject"),
    CALL_CANCEL((short)357, "callCancel"),
    CONF_SHARE((short)400, "confShare"),
    WB_CONTENT((short)450, "wbContent"),
    REMOTE_ASSISTANCE_INVITE((short)601, "remoteAssistanceInvite"),
    REMOTE_ASSISTANCE_ACCEPT((short)602, "remoteAssistanceAccept"),
    REMOTE_ASSISTANCE_REJECT((short)603, "remoteAssistanceReject"),
    REMOTE_ASSISTANCE_END((short)604, "remoteAssistanceEnd"),
    REMOTE_ASSISTANCE_CANCEL((short)605, "remoteAssistanceCancel"),
    SESSION_TOP((short)800, "sessionTop"),
    AT_MESSAGE_READED((short)801, "atMessageReaded"),
    LOGIN_NOTIFY((short)802, "loginNotify"),
    GROUP_SCOPE_NOTIFY((short)803, "groupScopeNotify"),
    CONTACTS_RELATION_NOTIFY((short)804, "contactsRelationNotify"),
    MEETING_ALERT_NOTIFY((short)805, "meetingAlertNotify"),
    API_TEXT((short)10000, "apiText"),
    API_IMAGE((short)10001, "apiImage"),
    API_FILE((short)10002, "apiFile"),
    API_ACK_SENT((short)10003, "apiAckSent"),
    API_OA((short)10004, "apiOA"),
    API_OASTATUS_CHANGE((short)10005, "apiOAStatusChange"),
    API_CHANGE_NOTIFY((short)10006, "apiChangeNotify"),
    API_EVENT_NOTIFY((short)10007, "apiEventNotify"),
    API_CUSTOMIZED((short)10008, "apiCustomized");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 15: // PRESENCE
          return PRESENCE;
        case 16: // PING
          return PING;
        case 20: // ACK_SENT
          return ACK_SENT;
        case 21: // ACK_RECEIVED
          return ACK_RECEIVED;
        case 22: // ACK_READ
          return ACK_READ;
        case 23: // SLEEP
          return SLEEP;
        case 24: // WAKEUP_CONFIRM
          return WAKEUP_CONFIRM;
        case 25: // ACK_PLAY
          return ACK_PLAY;
        case 26: // BATCH_ACK_READ
          return BATCH_ACK_READ;
        case 50: // TEXT
          return TEXT;
        case 51: // MEDIA
          return MEDIA;
        case 52: // GROUP_ADD
          return GROUP_ADD;
        case 53: // GROUP_DEL
          return GROUP_DEL;
        case 54: // GROUP_UPDATE
          return GROUP_UPDATE;
        case 55: // GROUP_CREATE
          return GROUP_CREATE;
        case 56: // GROUP_TOP
          return GROUP_TOP;
        case 57: // SUMMARY_CREATE
          return SUMMARY_CREATE;
        case 58: // DOC_SEND
          return DOC_SEND;
        case 59: // ALERT_RULE
          return ALERT_RULE;
        case 60: // GROUP_CLOSE
          return GROUP_CLOSE;
        case 61: // MSG_NOTIFY
          return MSG_NOTIFY;
        case 62: // GROUP_KICK
          return GROUP_KICK;
        case 63: // CODE_CREATE
          return CODE_CREATE;
        case 64: // CODE_DEL
          return CODE_DEL;
        case 65: // DOC_DEL
          return DOC_DEL;
        case 66: // COMMENT_CREATE
          return COMMENT_CREATE;
        case 67: // COMMENT_DEL
          return COMMENT_DEL;
        case 68: // GROUP_AVATAR_UPDATE
          return GROUP_AVATAR_UPDATE;
        case 69: // GROUP_STATE
          return GROUP_STATE;
        case 70: // CLOUD_FILE
          return CLOUD_FILE;
        case 71: // MEMBER_ROLE
          return MEMBER_ROLE;
        case 72: // REPORT
          return REPORT;
        case 73: // REVOCATION
          return REVOCATION;
        case 74: // GROUP_SCOPE
          return GROUP_SCOPE;
        case 75: // OWNER_TRANSFER
          return OWNER_TRANSFER;
        case 100: // WELCOME
          return WELCOME;
        case 101: // CLIENT_UPDATE
          return CLIENT_UPDATE;
        case 102: // COMPLETE_INFO
          return COMPLETE_INFO;
        case 103: // PWD_COMPLEX_UPDATE
          return PWD_COMPLEX_UPDATE;
        case 104: // PWD_EXPIRE
          return PWD_EXPIRE;
        case 105: // PC_GUIDE
          return PC_GUIDE;
        case 106: // MOBILE_GUIDE
          return MOBILE_GUIDE;
        case 107: // PWD_MODIFY
          return PWD_MODIFY;
        case 108: // TAG_DEL
          return TAG_DEL;
        case 109: // REMIND
          return REMIND;
        case 150: // DEPT_UPDATE
          return DEPT_UPDATE;
        case 151: // DEPT_TRANSFER
          return DEPT_TRANSFER;
        case 152: // POSITION_UPDATE
          return POSITION_UPDATE;
        case 153: // EMPLOYEE_ENTRY
          return EMPLOYEE_ENTRY;
        case 154: // EMPLOYEE_LEAVE
          return EMPLOYEE_LEAVE;
        case 155: // EMPLOYEE_RIGHTS
          return EMPLOYEE_RIGHTS;
        case 156: // DEPRT_PARENT_CHANGE
          return DEPRT_PARENT_CHANGE;
        case 157: // COMPANY_JOIN
          return COMPANY_JOIN;
        case 158: // DEPT_DELETE
          return DEPT_DELETE;
        case 159: // ENTRY_CONFIRM
          return ENTRY_CONFIRM;
        case 160: // LEAVE_CONFIRM
          return LEAVE_CONFIRM;
        case 161: // DEPT_CONFIRM
          return DEPT_CONFIRM;
        case 200: // INSTANT_INVITE
          return INSTANT_INVITE;
        case 201: // CONF_INVITE
          return CONF_INVITE;
        case 202: // CONF_RECEIVE
          return CONF_RECEIVE;
        case 203: // CONF_REJECT
          return CONF_REJECT;
        case 204: // CONF_CANCEL
          return CONF_CANCEL;
        case 205: // CONF_ALERT
          return CONF_ALERT;
        case 207: // INSTANT_RECEIVE
          return INSTANT_RECEIVE;
        case 208: // INSTANT_REJECT
          return INSTANT_REJECT;
        case 209: // CONF_CHAT
          return CONF_CHAT;
        case 210: // CONF_SUMMARY
          return CONF_SUMMARY;
        case 211: // CALL_STATE
          return CALL_STATE;
        case 212: // CONF_UPLOAD
          return CONF_UPLOAD;
        case 213: // CONF_DOC_DEL
          return CONF_DOC_DEL;
        case 250: // CARD_UPDATE
          return CARD_UPDATE;
        case 251: // CONTACTER_ADD
          return CONTACTER_ADD;
        case 252: // CONTACTER_DEL
          return CONTACTER_DEL;
        case 253: // ATTENTION_CREATE
          return ATTENTION_CREATE;
        case 254: // ATTENTION_CANCEL
          return ATTENTION_CANCEL;
        case 300: // TRANS_INVITE
          return TRANS_INVITE;
        case 301: // TRANS_RECEIVE
          return TRANS_RECEIVE;
        case 302: // TRANS_REJECT
          return TRANS_REJECT;
        case 303: // TRANS_STOP
          return TRANS_STOP;
        case 350: // AUDIO_INVITE
          return AUDIO_INVITE;
        case 351: // AUDIO_RECEIVE
          return AUDIO_RECEIVE;
        case 352: // AUDIO_REJECT
          return AUDIO_REJECT;
        case 353: // AUDIO_STOP
          return AUDIO_STOP;
        case 354: // CALL_RECENT
          return CALL_RECENT;
        case 355: // CALL_BLOCK
          return CALL_BLOCK;
        case 356: // CALL_REJECT
          return CALL_REJECT;
        case 357: // CALL_CANCEL
          return CALL_CANCEL;
        case 400: // CONF_SHARE
          return CONF_SHARE;
        case 450: // WB_CONTENT
          return WB_CONTENT;
        case 601: // REMOTE_ASSISTANCE_INVITE
          return REMOTE_ASSISTANCE_INVITE;
        case 602: // REMOTE_ASSISTANCE_ACCEPT
          return REMOTE_ASSISTANCE_ACCEPT;
        case 603: // REMOTE_ASSISTANCE_REJECT
          return REMOTE_ASSISTANCE_REJECT;
        case 604: // REMOTE_ASSISTANCE_END
          return REMOTE_ASSISTANCE_END;
        case 605: // REMOTE_ASSISTANCE_CANCEL
          return REMOTE_ASSISTANCE_CANCEL;
        case 800: // SESSION_TOP
          return SESSION_TOP;
        case 801: // AT_MESSAGE_READED
          return AT_MESSAGE_READED;
        case 802: // LOGIN_NOTIFY
          return LOGIN_NOTIFY;
        case 803: // GROUP_SCOPE_NOTIFY
          return GROUP_SCOPE_NOTIFY;
        case 804: // CONTACTS_RELATION_NOTIFY
          return CONTACTS_RELATION_NOTIFY;
        case 805: // MEETING_ALERT_NOTIFY
          return MEETING_ALERT_NOTIFY;
        case 10000: // API_TEXT
          return API_TEXT;
        case 10001: // API_IMAGE
          return API_IMAGE;
        case 10002: // API_FILE
          return API_FILE;
        case 10003: // API_ACK_SENT
          return API_ACK_SENT;
        case 10004: // API_OA
          return API_OA;
        case 10005: // API_OASTATUS_CHANGE
          return API_OASTATUS_CHANGE;
        case 10006: // API_CHANGE_NOTIFY
          return API_CHANGE_NOTIFY;
        case 10007: // API_EVENT_NOTIFY
          return API_EVENT_NOTIFY;
        case 10008: // API_CUSTOMIZED
          return API_CUSTOMIZED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PRESENCE,_Fields.PING,_Fields.ACK_SENT,_Fields.ACK_RECEIVED,_Fields.ACK_READ,_Fields.SLEEP,_Fields.WAKEUP_CONFIRM,_Fields.ACK_PLAY,_Fields.BATCH_ACK_READ,_Fields.TEXT,_Fields.MEDIA,_Fields.GROUP_ADD,_Fields.GROUP_DEL,_Fields.GROUP_UPDATE,_Fields.GROUP_CREATE,_Fields.GROUP_TOP,_Fields.SUMMARY_CREATE,_Fields.DOC_SEND,_Fields.ALERT_RULE,_Fields.GROUP_CLOSE,_Fields.MSG_NOTIFY,_Fields.GROUP_KICK,_Fields.CODE_CREATE,_Fields.CODE_DEL,_Fields.DOC_DEL,_Fields.COMMENT_CREATE,_Fields.COMMENT_DEL,_Fields.GROUP_AVATAR_UPDATE,_Fields.GROUP_STATE,_Fields.CLOUD_FILE,_Fields.MEMBER_ROLE,_Fields.REPORT,_Fields.REVOCATION,_Fields.GROUP_SCOPE,_Fields.OWNER_TRANSFER,_Fields.WELCOME,_Fields.CLIENT_UPDATE,_Fields.COMPLETE_INFO,_Fields.PWD_COMPLEX_UPDATE,_Fields.PWD_EXPIRE,_Fields.PC_GUIDE,_Fields.MOBILE_GUIDE,_Fields.PWD_MODIFY,_Fields.TAG_DEL,_Fields.REMIND,_Fields.DEPT_UPDATE,_Fields.DEPT_TRANSFER,_Fields.POSITION_UPDATE,_Fields.EMPLOYEE_ENTRY,_Fields.EMPLOYEE_LEAVE,_Fields.EMPLOYEE_RIGHTS,_Fields.DEPRT_PARENT_CHANGE,_Fields.COMPANY_JOIN,_Fields.DEPT_DELETE,_Fields.ENTRY_CONFIRM,_Fields.LEAVE_CONFIRM,_Fields.DEPT_CONFIRM,_Fields.INSTANT_INVITE,_Fields.CONF_INVITE,_Fields.CONF_RECEIVE,_Fields.CONF_REJECT,_Fields.CONF_CANCEL,_Fields.CONF_ALERT,_Fields.INSTANT_RECEIVE,_Fields.INSTANT_REJECT,_Fields.CONF_CHAT,_Fields.CONF_SUMMARY,_Fields.CALL_STATE,_Fields.CONF_UPLOAD,_Fields.CONF_DOC_DEL,_Fields.CARD_UPDATE,_Fields.CONTACTER_ADD,_Fields.CONTACTER_DEL,_Fields.ATTENTION_CREATE,_Fields.ATTENTION_CANCEL,_Fields.TRANS_INVITE,_Fields.TRANS_RECEIVE,_Fields.TRANS_REJECT,_Fields.TRANS_STOP,_Fields.AUDIO_INVITE,_Fields.AUDIO_RECEIVE,_Fields.AUDIO_REJECT,_Fields.AUDIO_STOP,_Fields.CALL_RECENT,_Fields.CALL_BLOCK,_Fields.CALL_REJECT,_Fields.CALL_CANCEL,_Fields.CONF_SHARE,_Fields.WB_CONTENT,_Fields.REMOTE_ASSISTANCE_INVITE,_Fields.REMOTE_ASSISTANCE_ACCEPT,_Fields.REMOTE_ASSISTANCE_REJECT,_Fields.REMOTE_ASSISTANCE_END,_Fields.REMOTE_ASSISTANCE_CANCEL,_Fields.SESSION_TOP,_Fields.AT_MESSAGE_READED,_Fields.LOGIN_NOTIFY,_Fields.GROUP_SCOPE_NOTIFY,_Fields.CONTACTS_RELATION_NOTIFY,_Fields.MEETING_ALERT_NOTIFY,_Fields.API_TEXT,_Fields.API_IMAGE,_Fields.API_FILE,_Fields.API_ACK_SENT,_Fields.API_OA,_Fields.API_OASTATUS_CHANGE,_Fields.API_CHANGE_NOTIFY,_Fields.API_EVENT_NOTIFY,_Fields.API_CUSTOMIZED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRESENCE, new org.apache.thrift.meta_data.FieldMetaData("presence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessagePresence.class)));
    tmpMap.put(_Fields.PING, new org.apache.thrift.meta_data.FieldMetaData("ping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessagePing.class)));
    tmpMap.put(_Fields.ACK_SENT, new org.apache.thrift.meta_data.FieldMetaData("ackSent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AckSent.class)));
    tmpMap.put(_Fields.ACK_RECEIVED, new org.apache.thrift.meta_data.FieldMetaData("ackReceived", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AckReceived.class)));
    tmpMap.put(_Fields.ACK_READ, new org.apache.thrift.meta_data.FieldMetaData("ackRead", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AckRead.class)));
    tmpMap.put(_Fields.SLEEP, new org.apache.thrift.meta_data.FieldMetaData("sleep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SleepSet.class)));
    tmpMap.put(_Fields.WAKEUP_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("wakeupConfirm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WakeupResult.class)));
    tmpMap.put(_Fields.ACK_PLAY, new org.apache.thrift.meta_data.FieldMetaData("ackPlay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AckPlay.class)));
    tmpMap.put(_Fields.BATCH_ACK_READ, new org.apache.thrift.meta_data.FieldMetaData("batchAckRead", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchAckRead.class)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TextContent.class)));
    tmpMap.put(_Fields.MEDIA, new org.apache.thrift.meta_data.FieldMetaData("media", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MediaContent.class)));
    tmpMap.put(_Fields.GROUP_ADD, new org.apache.thrift.meta_data.FieldMetaData("groupAdd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupMemberAddContent.class)));
    tmpMap.put(_Fields.GROUP_DEL, new org.apache.thrift.meta_data.FieldMetaData("groupDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupMemberDelContent.class)));
    tmpMap.put(_Fields.GROUP_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("groupUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupNameUpdateContent.class)));
    tmpMap.put(_Fields.GROUP_CREATE, new org.apache.thrift.meta_data.FieldMetaData("groupCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupCreateContent.class)));
    tmpMap.put(_Fields.GROUP_TOP, new org.apache.thrift.meta_data.FieldMetaData("groupTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupTopContent.class)));
    tmpMap.put(_Fields.SUMMARY_CREATE, new org.apache.thrift.meta_data.FieldMetaData("summaryCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SummaryCreateContent.class)));
    tmpMap.put(_Fields.DOC_SEND, new org.apache.thrift.meta_data.FieldMetaData("docSend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DocumentContent.class)));
    tmpMap.put(_Fields.ALERT_RULE, new org.apache.thrift.meta_data.FieldMetaData("alertRule", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlertRuleContent.class)));
    tmpMap.put(_Fields.GROUP_CLOSE, new org.apache.thrift.meta_data.FieldMetaData("groupClose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscussionClose.class)));
    tmpMap.put(_Fields.MSG_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("msgNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgNotifyContent.class)));
    tmpMap.put(_Fields.GROUP_KICK, new org.apache.thrift.meta_data.FieldMetaData("groupKick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupMemberKickContent.class)));
    tmpMap.put(_Fields.CODE_CREATE, new org.apache.thrift.meta_data.FieldMetaData("codeCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeCreateContent.class)));
    tmpMap.put(_Fields.CODE_DEL, new org.apache.thrift.meta_data.FieldMetaData("codeDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeDelContent.class)));
    tmpMap.put(_Fields.DOC_DEL, new org.apache.thrift.meta_data.FieldMetaData("docDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DocumentDelContent.class)));
    tmpMap.put(_Fields.COMMENT_CREATE, new org.apache.thrift.meta_data.FieldMetaData("commentCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentCreateContent.class)));
    tmpMap.put(_Fields.COMMENT_DEL, new org.apache.thrift.meta_data.FieldMetaData("commentDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentDelContent.class)));
    tmpMap.put(_Fields.GROUP_AVATAR_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("groupAvatarUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupAvatarUpdateContent.class)));
    tmpMap.put(_Fields.GROUP_STATE, new org.apache.thrift.meta_data.FieldMetaData("groupState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupStateUpdateContent.class)));
    tmpMap.put(_Fields.CLOUD_FILE, new org.apache.thrift.meta_data.FieldMetaData("cloudFile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudFileContent.class)));
    tmpMap.put(_Fields.MEMBER_ROLE, new org.apache.thrift.meta_data.FieldMetaData("memberRole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MemberRoleUpdateContent.class)));
    tmpMap.put(_Fields.REPORT, new org.apache.thrift.meta_data.FieldMetaData("report", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportContent.class)));
    tmpMap.put(_Fields.REVOCATION, new org.apache.thrift.meta_data.FieldMetaData("revocation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RevocationContent.class)));
    tmpMap.put(_Fields.GROUP_SCOPE, new org.apache.thrift.meta_data.FieldMetaData("groupScope", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupScopeContent.class)));
    tmpMap.put(_Fields.OWNER_TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("ownerTransfer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupOwnerTransferContent.class)));
    tmpMap.put(_Fields.WELCOME, new org.apache.thrift.meta_data.FieldMetaData("welcome", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemWelcomeContent.class)));
    tmpMap.put(_Fields.CLIENT_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("clientUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientUpdateContent.class)));
    tmpMap.put(_Fields.COMPLETE_INFO, new org.apache.thrift.meta_data.FieldMetaData("completeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompleteInfoContent.class)));
    tmpMap.put(_Fields.PWD_COMPLEX_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("pwdComplexUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PwdComplexUpdateContent.class)));
    tmpMap.put(_Fields.PWD_EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("pwdExpire", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PwdExpireContent.class)));
    tmpMap.put(_Fields.PC_GUIDE, new org.apache.thrift.meta_data.FieldMetaData("pcGuide", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PCClientGuide.class)));
    tmpMap.put(_Fields.MOBILE_GUIDE, new org.apache.thrift.meta_data.FieldMetaData("mobileGuide", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MobileClientGuide.class)));
    tmpMap.put(_Fields.PWD_MODIFY, new org.apache.thrift.meta_data.FieldMetaData("pwdModify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PasswordModifyContent.class)));
    tmpMap.put(_Fields.TAG_DEL, new org.apache.thrift.meta_data.FieldMetaData("tagDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TagDelContent.class)));
    tmpMap.put(_Fields.REMIND, new org.apache.thrift.meta_data.FieldMetaData("remind", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupRemindContent.class)));
    tmpMap.put(_Fields.DEPT_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("deptUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeptUpdateContent.class)));
    tmpMap.put(_Fields.DEPT_TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("deptTransfer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeptTransferContent.class)));
    tmpMap.put(_Fields.POSITION_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("positionUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionUpdateContent.class)));
    tmpMap.put(_Fields.EMPLOYEE_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("employeeEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeEntryContent.class)));
    tmpMap.put(_Fields.EMPLOYEE_LEAVE, new org.apache.thrift.meta_data.FieldMetaData("employeeLeave", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeLeaveContent.class)));
    tmpMap.put(_Fields.EMPLOYEE_RIGHTS, new org.apache.thrift.meta_data.FieldMetaData("employeeRights", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeRightsChangeContent.class)));
    tmpMap.put(_Fields.DEPRT_PARENT_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("deprtParentChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeptParentChangeContent.class)));
    tmpMap.put(_Fields.COMPANY_JOIN, new org.apache.thrift.meta_data.FieldMetaData("companyJoin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyJoinContent.class)));
    tmpMap.put(_Fields.DEPT_DELETE, new org.apache.thrift.meta_data.FieldMetaData("deptDelete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeptDeleteContent.class)));
    tmpMap.put(_Fields.ENTRY_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("entryConfirm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeEntryConfirmContent.class)));
    tmpMap.put(_Fields.LEAVE_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("leaveConfirm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeLeaveConfirmContent.class)));
    tmpMap.put(_Fields.DEPT_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("deptConfirm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeptTransferConfirmContent.class)));
    tmpMap.put(_Fields.INSTANT_INVITE, new org.apache.thrift.meta_data.FieldMetaData("instantInvite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstantIQInviteContent.class)));
    tmpMap.put(_Fields.CONF_INVITE, new org.apache.thrift.meta_data.FieldMetaData("confInvite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IQInviteContent.class)));
    tmpMap.put(_Fields.CONF_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("confReceive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IQReceiveContent.class)));
    tmpMap.put(_Fields.CONF_REJECT, new org.apache.thrift.meta_data.FieldMetaData("confReject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IQRejectContent.class)));
    tmpMap.put(_Fields.CONF_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("confCancel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfCancelContent.class)));
    tmpMap.put(_Fields.CONF_ALERT, new org.apache.thrift.meta_data.FieldMetaData("confAlert", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfAlertContent.class)));
    tmpMap.put(_Fields.INSTANT_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("instantReceive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstantIQReceiveContent.class)));
    tmpMap.put(_Fields.INSTANT_REJECT, new org.apache.thrift.meta_data.FieldMetaData("instantReject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InstantIQRejectContent.class)));
    tmpMap.put(_Fields.CONF_CHAT, new org.apache.thrift.meta_data.FieldMetaData("confChat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfChatContent.class)));
    tmpMap.put(_Fields.CONF_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("confSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfSummaryContent.class)));
    tmpMap.put(_Fields.CALL_STATE, new org.apache.thrift.meta_data.FieldMetaData("callState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CallStateContent.class)));
    tmpMap.put(_Fields.CONF_UPLOAD, new org.apache.thrift.meta_data.FieldMetaData("confUpload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfUploadContent.class)));
    tmpMap.put(_Fields.CONF_DOC_DEL, new org.apache.thrift.meta_data.FieldMetaData("confDocDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfDelDocContent.class)));
    tmpMap.put(_Fields.CARD_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("cardUpdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CardUpdateContent.class)));
    tmpMap.put(_Fields.CONTACTER_ADD, new org.apache.thrift.meta_data.FieldMetaData("contacterAdd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContacterAddContent.class)));
    tmpMap.put(_Fields.CONTACTER_DEL, new org.apache.thrift.meta_data.FieldMetaData("contacterDel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContacterDelContent.class)));
    tmpMap.put(_Fields.ATTENTION_CREATE, new org.apache.thrift.meta_data.FieldMetaData("attentionCreate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttentionCreateContent.class)));
    tmpMap.put(_Fields.ATTENTION_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("attentionCancel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttentionCancelContent.class)));
    tmpMap.put(_Fields.TRANS_INVITE, new org.apache.thrift.meta_data.FieldMetaData("transInvite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileTransmissionInviteContent.class)));
    tmpMap.put(_Fields.TRANS_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("transReceive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileTransmissionReceiveContent.class)));
    tmpMap.put(_Fields.TRANS_REJECT, new org.apache.thrift.meta_data.FieldMetaData("transReject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileTransmissionRejectContent.class)));
    tmpMap.put(_Fields.TRANS_STOP, new org.apache.thrift.meta_data.FieldMetaData("transStop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileTransmissionStopContent.class)));
    tmpMap.put(_Fields.AUDIO_INVITE, new org.apache.thrift.meta_data.FieldMetaData("audioInvite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioInviteContent.class)));
    tmpMap.put(_Fields.AUDIO_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("audioReceive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioReceiveContent.class)));
    tmpMap.put(_Fields.AUDIO_REJECT, new org.apache.thrift.meta_data.FieldMetaData("audioReject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioRejectContent.class)));
    tmpMap.put(_Fields.AUDIO_STOP, new org.apache.thrift.meta_data.FieldMetaData("audioStop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioStopContent.class)));
    tmpMap.put(_Fields.CALL_RECENT, new org.apache.thrift.meta_data.FieldMetaData("callRecent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioRecentCallContent.class)));
    tmpMap.put(_Fields.CALL_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("callBlock", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioBlockCallContent.class)));
    tmpMap.put(_Fields.CALL_REJECT, new org.apache.thrift.meta_data.FieldMetaData("callReject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioRejectCallContent.class)));
    tmpMap.put(_Fields.CALL_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("callCancel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AudioCancelCallContent.class)));
    tmpMap.put(_Fields.CONF_SHARE, new org.apache.thrift.meta_data.FieldMetaData("confShare", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfShareContent.class)));
    tmpMap.put(_Fields.WB_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("wbContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WBMessageContent.class)));
    tmpMap.put(_Fields.REMOTE_ASSISTANCE_INVITE, new org.apache.thrift.meta_data.FieldMetaData("remoteAssistanceInvite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteAssistanceInviteContent.class)));
    tmpMap.put(_Fields.REMOTE_ASSISTANCE_ACCEPT, new org.apache.thrift.meta_data.FieldMetaData("remoteAssistanceAccept", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteAssistanceAcceptContent.class)));
    tmpMap.put(_Fields.REMOTE_ASSISTANCE_REJECT, new org.apache.thrift.meta_data.FieldMetaData("remoteAssistanceReject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteAssistanceRejectContent.class)));
    tmpMap.put(_Fields.REMOTE_ASSISTANCE_END, new org.apache.thrift.meta_data.FieldMetaData("remoteAssistanceEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteAssistanceEndContent.class)));
    tmpMap.put(_Fields.REMOTE_ASSISTANCE_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("remoteAssistanceCancel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteAssistanceCancelContent.class)));
    tmpMap.put(_Fields.SESSION_TOP, new org.apache.thrift.meta_data.FieldMetaData("sessionTop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionTopContent.class)));
    tmpMap.put(_Fields.AT_MESSAGE_READED, new org.apache.thrift.meta_data.FieldMetaData("atMessageReaded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AtMessageReadedContent.class)));
    tmpMap.put(_Fields.LOGIN_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("loginNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserLoginNotifyContent.class)));
    tmpMap.put(_Fields.GROUP_SCOPE_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("groupScopeNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupScopeNotifyContent.class)));
    tmpMap.put(_Fields.CONTACTS_RELATION_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("contactsRelationNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContactsRelationNotifyContent.class)));
    tmpMap.put(_Fields.MEETING_ALERT_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("meetingAlertNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeetingAlertSettingNotifyContent.class)));
    tmpMap.put(_Fields.API_TEXT, new org.apache.thrift.meta_data.FieldMetaData("apiText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APITextContent.class)));
    tmpMap.put(_Fields.API_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("apiImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIImageContent.class)));
    tmpMap.put(_Fields.API_FILE, new org.apache.thrift.meta_data.FieldMetaData("apiFile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIFileContent.class)));
    tmpMap.put(_Fields.API_ACK_SENT, new org.apache.thrift.meta_data.FieldMetaData("apiAckSent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIAckSentContent.class)));
    tmpMap.put(_Fields.API_OA, new org.apache.thrift.meta_data.FieldMetaData("apiOA", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIOAContent.class)));
    tmpMap.put(_Fields.API_OASTATUS_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("apiOAStatusChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIOAStatusChangeContent.class)));
    tmpMap.put(_Fields.API_CHANGE_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("apiChangeNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIAppChangeNotifyContent.class)));
    tmpMap.put(_Fields.API_EVENT_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("apiEventNotify", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APIAppEventChangeNotify.class)));
    tmpMap.put(_Fields.API_CUSTOMIZED, new org.apache.thrift.meta_data.FieldMetaData("apiCustomized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APICustomizedContent.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UcMessageBody.class, metaDataMap);
  }

  public UcMessageBody() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UcMessageBody(UcMessageBody other) {
    if (other.isSetPresence()) {
      this.presence = new MessagePresence(other.presence);
    }
    if (other.isSetPing()) {
      this.ping = new MessagePing(other.ping);
    }
    if (other.isSetAckSent()) {
      this.ackSent = new AckSent(other.ackSent);
    }
    if (other.isSetAckReceived()) {
      this.ackReceived = new AckReceived(other.ackReceived);
    }
    if (other.isSetAckRead()) {
      this.ackRead = new AckRead(other.ackRead);
    }
    if (other.isSetSleep()) {
      this.sleep = new SleepSet(other.sleep);
    }
    if (other.isSetWakeupConfirm()) {
      this.wakeupConfirm = new WakeupResult(other.wakeupConfirm);
    }
    if (other.isSetAckPlay()) {
      this.ackPlay = new AckPlay(other.ackPlay);
    }
    if (other.isSetBatchAckRead()) {
      this.batchAckRead = new BatchAckRead(other.batchAckRead);
    }
    if (other.isSetText()) {
      this.text = new TextContent(other.text);
    }
    if (other.isSetMedia()) {
      this.media = new MediaContent(other.media);
    }
    if (other.isSetGroupAdd()) {
      this.groupAdd = new GroupMemberAddContent(other.groupAdd);
    }
    if (other.isSetGroupDel()) {
      this.groupDel = new GroupMemberDelContent(other.groupDel);
    }
    if (other.isSetGroupUpdate()) {
      this.groupUpdate = new GroupNameUpdateContent(other.groupUpdate);
    }
    if (other.isSetGroupCreate()) {
      this.groupCreate = new GroupCreateContent(other.groupCreate);
    }
    if (other.isSetGroupTop()) {
      this.groupTop = new GroupTopContent(other.groupTop);
    }
    if (other.isSetSummaryCreate()) {
      this.summaryCreate = new SummaryCreateContent(other.summaryCreate);
    }
    if (other.isSetDocSend()) {
      this.docSend = new DocumentContent(other.docSend);
    }
    if (other.isSetAlertRule()) {
      this.alertRule = new AlertRuleContent(other.alertRule);
    }
    if (other.isSetGroupClose()) {
      this.groupClose = new DiscussionClose(other.groupClose);
    }
    if (other.isSetMsgNotify()) {
      this.msgNotify = new MsgNotifyContent(other.msgNotify);
    }
    if (other.isSetGroupKick()) {
      this.groupKick = new GroupMemberKickContent(other.groupKick);
    }
    if (other.isSetCodeCreate()) {
      this.codeCreate = new CodeCreateContent(other.codeCreate);
    }
    if (other.isSetCodeDel()) {
      this.codeDel = new CodeDelContent(other.codeDel);
    }
    if (other.isSetDocDel()) {
      this.docDel = new DocumentDelContent(other.docDel);
    }
    if (other.isSetCommentCreate()) {
      this.commentCreate = new CommentCreateContent(other.commentCreate);
    }
    if (other.isSetCommentDel()) {
      this.commentDel = new CommentDelContent(other.commentDel);
    }
    if (other.isSetGroupAvatarUpdate()) {
      this.groupAvatarUpdate = new GroupAvatarUpdateContent(other.groupAvatarUpdate);
    }
    if (other.isSetGroupState()) {
      this.groupState = new GroupStateUpdateContent(other.groupState);
    }
    if (other.isSetCloudFile()) {
      this.cloudFile = new CloudFileContent(other.cloudFile);
    }
    if (other.isSetMemberRole()) {
      this.memberRole = new MemberRoleUpdateContent(other.memberRole);
    }
    if (other.isSetReport()) {
      this.report = new ReportContent(other.report);
    }
    if (other.isSetRevocation()) {
      this.revocation = new RevocationContent(other.revocation);
    }
    if (other.isSetGroupScope()) {
      this.groupScope = new GroupScopeContent(other.groupScope);
    }
    if (other.isSetOwnerTransfer()) {
      this.ownerTransfer = new GroupOwnerTransferContent(other.ownerTransfer);
    }
    if (other.isSetWelcome()) {
      this.welcome = new SystemWelcomeContent(other.welcome);
    }
    if (other.isSetClientUpdate()) {
      this.clientUpdate = new ClientUpdateContent(other.clientUpdate);
    }
    if (other.isSetCompleteInfo()) {
      this.completeInfo = new CompleteInfoContent(other.completeInfo);
    }
    if (other.isSetPwdComplexUpdate()) {
      this.pwdComplexUpdate = new PwdComplexUpdateContent(other.pwdComplexUpdate);
    }
    if (other.isSetPwdExpire()) {
      this.pwdExpire = new PwdExpireContent(other.pwdExpire);
    }
    if (other.isSetPcGuide()) {
      this.pcGuide = new PCClientGuide(other.pcGuide);
    }
    if (other.isSetMobileGuide()) {
      this.mobileGuide = new MobileClientGuide(other.mobileGuide);
    }
    if (other.isSetPwdModify()) {
      this.pwdModify = new PasswordModifyContent(other.pwdModify);
    }
    if (other.isSetTagDel()) {
      this.tagDel = new TagDelContent(other.tagDel);
    }
    if (other.isSetRemind()) {
      this.remind = new GroupRemindContent(other.remind);
    }
    if (other.isSetDeptUpdate()) {
      this.deptUpdate = new DeptUpdateContent(other.deptUpdate);
    }
    if (other.isSetDeptTransfer()) {
      this.deptTransfer = new DeptTransferContent(other.deptTransfer);
    }
    if (other.isSetPositionUpdate()) {
      this.positionUpdate = new PositionUpdateContent(other.positionUpdate);
    }
    if (other.isSetEmployeeEntry()) {
      this.employeeEntry = new EmployeeEntryContent(other.employeeEntry);
    }
    if (other.isSetEmployeeLeave()) {
      this.employeeLeave = new EmployeeLeaveContent(other.employeeLeave);
    }
    if (other.isSetEmployeeRights()) {
      this.employeeRights = new EmployeeRightsChangeContent(other.employeeRights);
    }
    if (other.isSetDeprtParentChange()) {
      this.deprtParentChange = new DeptParentChangeContent(other.deprtParentChange);
    }
    if (other.isSetCompanyJoin()) {
      this.companyJoin = new CompanyJoinContent(other.companyJoin);
    }
    if (other.isSetDeptDelete()) {
      this.deptDelete = new DeptDeleteContent(other.deptDelete);
    }
    if (other.isSetEntryConfirm()) {
      this.entryConfirm = new EmployeeEntryConfirmContent(other.entryConfirm);
    }
    if (other.isSetLeaveConfirm()) {
      this.leaveConfirm = new EmployeeLeaveConfirmContent(other.leaveConfirm);
    }
    if (other.isSetDeptConfirm()) {
      this.deptConfirm = new DeptTransferConfirmContent(other.deptConfirm);
    }
    if (other.isSetInstantInvite()) {
      this.instantInvite = new InstantIQInviteContent(other.instantInvite);
    }
    if (other.isSetConfInvite()) {
      this.confInvite = new IQInviteContent(other.confInvite);
    }
    if (other.isSetConfReceive()) {
      this.confReceive = new IQReceiveContent(other.confReceive);
    }
    if (other.isSetConfReject()) {
      this.confReject = new IQRejectContent(other.confReject);
    }
    if (other.isSetConfCancel()) {
      this.confCancel = new ConfCancelContent(other.confCancel);
    }
    if (other.isSetConfAlert()) {
      this.confAlert = new ConfAlertContent(other.confAlert);
    }
    if (other.isSetInstantReceive()) {
      this.instantReceive = new InstantIQReceiveContent(other.instantReceive);
    }
    if (other.isSetInstantReject()) {
      this.instantReject = new InstantIQRejectContent(other.instantReject);
    }
    if (other.isSetConfChat()) {
      this.confChat = new ConfChatContent(other.confChat);
    }
    if (other.isSetConfSummary()) {
      this.confSummary = new ConfSummaryContent(other.confSummary);
    }
    if (other.isSetCallState()) {
      this.callState = new CallStateContent(other.callState);
    }
    if (other.isSetConfUpload()) {
      this.confUpload = new ConfUploadContent(other.confUpload);
    }
    if (other.isSetConfDocDel()) {
      this.confDocDel = new ConfDelDocContent(other.confDocDel);
    }
    if (other.isSetCardUpdate()) {
      this.cardUpdate = new CardUpdateContent(other.cardUpdate);
    }
    if (other.isSetContacterAdd()) {
      this.contacterAdd = new ContacterAddContent(other.contacterAdd);
    }
    if (other.isSetContacterDel()) {
      this.contacterDel = new ContacterDelContent(other.contacterDel);
    }
    if (other.isSetAttentionCreate()) {
      this.attentionCreate = new AttentionCreateContent(other.attentionCreate);
    }
    if (other.isSetAttentionCancel()) {
      this.attentionCancel = new AttentionCancelContent(other.attentionCancel);
    }
    if (other.isSetTransInvite()) {
      this.transInvite = new FileTransmissionInviteContent(other.transInvite);
    }
    if (other.isSetTransReceive()) {
      this.transReceive = new FileTransmissionReceiveContent(other.transReceive);
    }
    if (other.isSetTransReject()) {
      this.transReject = new FileTransmissionRejectContent(other.transReject);
    }
    if (other.isSetTransStop()) {
      this.transStop = new FileTransmissionStopContent(other.transStop);
    }
    if (other.isSetAudioInvite()) {
      this.audioInvite = new AudioInviteContent(other.audioInvite);
    }
    if (other.isSetAudioReceive()) {
      this.audioReceive = new AudioReceiveContent(other.audioReceive);
    }
    if (other.isSetAudioReject()) {
      this.audioReject = new AudioRejectContent(other.audioReject);
    }
    if (other.isSetAudioStop()) {
      this.audioStop = new AudioStopContent(other.audioStop);
    }
    if (other.isSetCallRecent()) {
      this.callRecent = new AudioRecentCallContent(other.callRecent);
    }
    if (other.isSetCallBlock()) {
      this.callBlock = new AudioBlockCallContent(other.callBlock);
    }
    if (other.isSetCallReject()) {
      this.callReject = new AudioRejectCallContent(other.callReject);
    }
    if (other.isSetCallCancel()) {
      this.callCancel = new AudioCancelCallContent(other.callCancel);
    }
    if (other.isSetConfShare()) {
      this.confShare = new ConfShareContent(other.confShare);
    }
    if (other.isSetWbContent()) {
      this.wbContent = new WBMessageContent(other.wbContent);
    }
    if (other.isSetRemoteAssistanceInvite()) {
      this.remoteAssistanceInvite = new RemoteAssistanceInviteContent(other.remoteAssistanceInvite);
    }
    if (other.isSetRemoteAssistanceAccept()) {
      this.remoteAssistanceAccept = new RemoteAssistanceAcceptContent(other.remoteAssistanceAccept);
    }
    if (other.isSetRemoteAssistanceReject()) {
      this.remoteAssistanceReject = new RemoteAssistanceRejectContent(other.remoteAssistanceReject);
    }
    if (other.isSetRemoteAssistanceEnd()) {
      this.remoteAssistanceEnd = new RemoteAssistanceEndContent(other.remoteAssistanceEnd);
    }
    if (other.isSetRemoteAssistanceCancel()) {
      this.remoteAssistanceCancel = new RemoteAssistanceCancelContent(other.remoteAssistanceCancel);
    }
    if (other.isSetSessionTop()) {
      this.sessionTop = new SessionTopContent(other.sessionTop);
    }
    if (other.isSetAtMessageReaded()) {
      this.atMessageReaded = new AtMessageReadedContent(other.atMessageReaded);
    }
    if (other.isSetLoginNotify()) {
      this.loginNotify = new UserLoginNotifyContent(other.loginNotify);
    }
    if (other.isSetGroupScopeNotify()) {
      this.groupScopeNotify = new GroupScopeNotifyContent(other.groupScopeNotify);
    }
    if (other.isSetContactsRelationNotify()) {
      this.contactsRelationNotify = new ContactsRelationNotifyContent(other.contactsRelationNotify);
    }
    if (other.isSetMeetingAlertNotify()) {
      this.meetingAlertNotify = new MeetingAlertSettingNotifyContent(other.meetingAlertNotify);
    }
    if (other.isSetApiText()) {
      this.apiText = new APITextContent(other.apiText);
    }
    if (other.isSetApiImage()) {
      this.apiImage = new APIImageContent(other.apiImage);
    }
    if (other.isSetApiFile()) {
      this.apiFile = new APIFileContent(other.apiFile);
    }
    if (other.isSetApiAckSent()) {
      this.apiAckSent = new APIAckSentContent(other.apiAckSent);
    }
    if (other.isSetApiOA()) {
      this.apiOA = new APIOAContent(other.apiOA);
    }
    if (other.isSetApiOAStatusChange()) {
      this.apiOAStatusChange = new APIOAStatusChangeContent(other.apiOAStatusChange);
    }
    if (other.isSetApiChangeNotify()) {
      this.apiChangeNotify = new APIAppChangeNotifyContent(other.apiChangeNotify);
    }
    if (other.isSetApiEventNotify()) {
      this.apiEventNotify = new APIAppEventChangeNotify(other.apiEventNotify);
    }
    if (other.isSetApiCustomized()) {
      this.apiCustomized = new APICustomizedContent(other.apiCustomized);
    }
  }

  public UcMessageBody deepCopy() {
    return new UcMessageBody(this);
  }

  @Override
  public void clear() {
    this.presence = null;
    this.ping = null;
    this.ackSent = null;
    this.ackReceived = null;
    this.ackRead = null;
    this.sleep = null;
    this.wakeupConfirm = null;
    this.ackPlay = null;
    this.batchAckRead = null;
    this.text = null;
    this.media = null;
    this.groupAdd = null;
    this.groupDel = null;
    this.groupUpdate = null;
    this.groupCreate = null;
    this.groupTop = null;
    this.summaryCreate = null;
    this.docSend = null;
    this.alertRule = null;
    this.groupClose = null;
    this.msgNotify = null;
    this.groupKick = null;
    this.codeCreate = null;
    this.codeDel = null;
    this.docDel = null;
    this.commentCreate = null;
    this.commentDel = null;
    this.groupAvatarUpdate = null;
    this.groupState = null;
    this.cloudFile = null;
    this.memberRole = null;
    this.report = null;
    this.revocation = null;
    this.groupScope = null;
    this.ownerTransfer = null;
    this.welcome = null;
    this.clientUpdate = null;
    this.completeInfo = null;
    this.pwdComplexUpdate = null;
    this.pwdExpire = null;
    this.pcGuide = null;
    this.mobileGuide = null;
    this.pwdModify = null;
    this.tagDel = null;
    this.remind = null;
    this.deptUpdate = null;
    this.deptTransfer = null;
    this.positionUpdate = null;
    this.employeeEntry = null;
    this.employeeLeave = null;
    this.employeeRights = null;
    this.deprtParentChange = null;
    this.companyJoin = null;
    this.deptDelete = null;
    this.entryConfirm = null;
    this.leaveConfirm = null;
    this.deptConfirm = null;
    this.instantInvite = null;
    this.confInvite = null;
    this.confReceive = null;
    this.confReject = null;
    this.confCancel = null;
    this.confAlert = null;
    this.instantReceive = null;
    this.instantReject = null;
    this.confChat = null;
    this.confSummary = null;
    this.callState = null;
    this.confUpload = null;
    this.confDocDel = null;
    this.cardUpdate = null;
    this.contacterAdd = null;
    this.contacterDel = null;
    this.attentionCreate = null;
    this.attentionCancel = null;
    this.transInvite = null;
    this.transReceive = null;
    this.transReject = null;
    this.transStop = null;
    this.audioInvite = null;
    this.audioReceive = null;
    this.audioReject = null;
    this.audioStop = null;
    this.callRecent = null;
    this.callBlock = null;
    this.callReject = null;
    this.callCancel = null;
    this.confShare = null;
    this.wbContent = null;
    this.remoteAssistanceInvite = null;
    this.remoteAssistanceAccept = null;
    this.remoteAssistanceReject = null;
    this.remoteAssistanceEnd = null;
    this.remoteAssistanceCancel = null;
    this.sessionTop = null;
    this.atMessageReaded = null;
    this.loginNotify = null;
    this.groupScopeNotify = null;
    this.contactsRelationNotify = null;
    this.meetingAlertNotify = null;
    this.apiText = null;
    this.apiImage = null;
    this.apiFile = null;
    this.apiAckSent = null;
    this.apiOA = null;
    this.apiOAStatusChange = null;
    this.apiChangeNotify = null;
    this.apiEventNotify = null;
    this.apiCustomized = null;
  }

  public MessagePresence getPresence() {
    return this.presence;
  }

  public UcMessageBody setPresence(MessagePresence presence) {
    this.presence = presence;
    return this;
  }

  public void unsetPresence() {
    this.presence = null;
  }

  /** Returns true if field presence is set (has been assigned a value) and false otherwise */
  public boolean isSetPresence() {
    return this.presence != null;
  }

  public void setPresenceIsSet(boolean value) {
    if (!value) {
      this.presence = null;
    }
  }

  public MessagePing getPing() {
    return this.ping;
  }

  public UcMessageBody setPing(MessagePing ping) {
    this.ping = ping;
    return this;
  }

  public void unsetPing() {
    this.ping = null;
  }

  /** Returns true if field ping is set (has been assigned a value) and false otherwise */
  public boolean isSetPing() {
    return this.ping != null;
  }

  public void setPingIsSet(boolean value) {
    if (!value) {
      this.ping = null;
    }
  }

  public AckSent getAckSent() {
    return this.ackSent;
  }

  public UcMessageBody setAckSent(AckSent ackSent) {
    this.ackSent = ackSent;
    return this;
  }

  public void unsetAckSent() {
    this.ackSent = null;
  }

  /** Returns true if field ackSent is set (has been assigned a value) and false otherwise */
  public boolean isSetAckSent() {
    return this.ackSent != null;
  }

  public void setAckSentIsSet(boolean value) {
    if (!value) {
      this.ackSent = null;
    }
  }

  public AckReceived getAckReceived() {
    return this.ackReceived;
  }

  public UcMessageBody setAckReceived(AckReceived ackReceived) {
    this.ackReceived = ackReceived;
    return this;
  }

  public void unsetAckReceived() {
    this.ackReceived = null;
  }

  /** Returns true if field ackReceived is set (has been assigned a value) and false otherwise */
  public boolean isSetAckReceived() {
    return this.ackReceived != null;
  }

  public void setAckReceivedIsSet(boolean value) {
    if (!value) {
      this.ackReceived = null;
    }
  }

  public AckRead getAckRead() {
    return this.ackRead;
  }

  public UcMessageBody setAckRead(AckRead ackRead) {
    this.ackRead = ackRead;
    return this;
  }

  public void unsetAckRead() {
    this.ackRead = null;
  }

  /** Returns true if field ackRead is set (has been assigned a value) and false otherwise */
  public boolean isSetAckRead() {
    return this.ackRead != null;
  }

  public void setAckReadIsSet(boolean value) {
    if (!value) {
      this.ackRead = null;
    }
  }

  public SleepSet getSleep() {
    return this.sleep;
  }

  public UcMessageBody setSleep(SleepSet sleep) {
    this.sleep = sleep;
    return this;
  }

  public void unsetSleep() {
    this.sleep = null;
  }

  /** Returns true if field sleep is set (has been assigned a value) and false otherwise */
  public boolean isSetSleep() {
    return this.sleep != null;
  }

  public void setSleepIsSet(boolean value) {
    if (!value) {
      this.sleep = null;
    }
  }

  public WakeupResult getWakeupConfirm() {
    return this.wakeupConfirm;
  }

  public UcMessageBody setWakeupConfirm(WakeupResult wakeupConfirm) {
    this.wakeupConfirm = wakeupConfirm;
    return this;
  }

  public void unsetWakeupConfirm() {
    this.wakeupConfirm = null;
  }

  /** Returns true if field wakeupConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetWakeupConfirm() {
    return this.wakeupConfirm != null;
  }

  public void setWakeupConfirmIsSet(boolean value) {
    if (!value) {
      this.wakeupConfirm = null;
    }
  }

  public AckPlay getAckPlay() {
    return this.ackPlay;
  }

  public UcMessageBody setAckPlay(AckPlay ackPlay) {
    this.ackPlay = ackPlay;
    return this;
  }

  public void unsetAckPlay() {
    this.ackPlay = null;
  }

  /** Returns true if field ackPlay is set (has been assigned a value) and false otherwise */
  public boolean isSetAckPlay() {
    return this.ackPlay != null;
  }

  public void setAckPlayIsSet(boolean value) {
    if (!value) {
      this.ackPlay = null;
    }
  }

  public BatchAckRead getBatchAckRead() {
    return this.batchAckRead;
  }

  public UcMessageBody setBatchAckRead(BatchAckRead batchAckRead) {
    this.batchAckRead = batchAckRead;
    return this;
  }

  public void unsetBatchAckRead() {
    this.batchAckRead = null;
  }

  /** Returns true if field batchAckRead is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchAckRead() {
    return this.batchAckRead != null;
  }

  public void setBatchAckReadIsSet(boolean value) {
    if (!value) {
      this.batchAckRead = null;
    }
  }

  public TextContent getText() {
    return this.text;
  }

  public UcMessageBody setText(TextContent text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public MediaContent getMedia() {
    return this.media;
  }

  public UcMessageBody setMedia(MediaContent media) {
    this.media = media;
    return this;
  }

  public void unsetMedia() {
    this.media = null;
  }

  /** Returns true if field media is set (has been assigned a value) and false otherwise */
  public boolean isSetMedia() {
    return this.media != null;
  }

  public void setMediaIsSet(boolean value) {
    if (!value) {
      this.media = null;
    }
  }

  public GroupMemberAddContent getGroupAdd() {
    return this.groupAdd;
  }

  public UcMessageBody setGroupAdd(GroupMemberAddContent groupAdd) {
    this.groupAdd = groupAdd;
    return this;
  }

  public void unsetGroupAdd() {
    this.groupAdd = null;
  }

  /** Returns true if field groupAdd is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupAdd() {
    return this.groupAdd != null;
  }

  public void setGroupAddIsSet(boolean value) {
    if (!value) {
      this.groupAdd = null;
    }
  }

  public GroupMemberDelContent getGroupDel() {
    return this.groupDel;
  }

  public UcMessageBody setGroupDel(GroupMemberDelContent groupDel) {
    this.groupDel = groupDel;
    return this;
  }

  public void unsetGroupDel() {
    this.groupDel = null;
  }

  /** Returns true if field groupDel is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupDel() {
    return this.groupDel != null;
  }

  public void setGroupDelIsSet(boolean value) {
    if (!value) {
      this.groupDel = null;
    }
  }

  public GroupNameUpdateContent getGroupUpdate() {
    return this.groupUpdate;
  }

  public UcMessageBody setGroupUpdate(GroupNameUpdateContent groupUpdate) {
    this.groupUpdate = groupUpdate;
    return this;
  }

  public void unsetGroupUpdate() {
    this.groupUpdate = null;
  }

  /** Returns true if field groupUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupUpdate() {
    return this.groupUpdate != null;
  }

  public void setGroupUpdateIsSet(boolean value) {
    if (!value) {
      this.groupUpdate = null;
    }
  }

  public GroupCreateContent getGroupCreate() {
    return this.groupCreate;
  }

  public UcMessageBody setGroupCreate(GroupCreateContent groupCreate) {
    this.groupCreate = groupCreate;
    return this;
  }

  public void unsetGroupCreate() {
    this.groupCreate = null;
  }

  /** Returns true if field groupCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupCreate() {
    return this.groupCreate != null;
  }

  public void setGroupCreateIsSet(boolean value) {
    if (!value) {
      this.groupCreate = null;
    }
  }

  public GroupTopContent getGroupTop() {
    return this.groupTop;
  }

  public UcMessageBody setGroupTop(GroupTopContent groupTop) {
    this.groupTop = groupTop;
    return this;
  }

  public void unsetGroupTop() {
    this.groupTop = null;
  }

  /** Returns true if field groupTop is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTop() {
    return this.groupTop != null;
  }

  public void setGroupTopIsSet(boolean value) {
    if (!value) {
      this.groupTop = null;
    }
  }

  public SummaryCreateContent getSummaryCreate() {
    return this.summaryCreate;
  }

  public UcMessageBody setSummaryCreate(SummaryCreateContent summaryCreate) {
    this.summaryCreate = summaryCreate;
    return this;
  }

  public void unsetSummaryCreate() {
    this.summaryCreate = null;
  }

  /** Returns true if field summaryCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetSummaryCreate() {
    return this.summaryCreate != null;
  }

  public void setSummaryCreateIsSet(boolean value) {
    if (!value) {
      this.summaryCreate = null;
    }
  }

  public DocumentContent getDocSend() {
    return this.docSend;
  }

  public UcMessageBody setDocSend(DocumentContent docSend) {
    this.docSend = docSend;
    return this;
  }

  public void unsetDocSend() {
    this.docSend = null;
  }

  /** Returns true if field docSend is set (has been assigned a value) and false otherwise */
  public boolean isSetDocSend() {
    return this.docSend != null;
  }

  public void setDocSendIsSet(boolean value) {
    if (!value) {
      this.docSend = null;
    }
  }

  public AlertRuleContent getAlertRule() {
    return this.alertRule;
  }

  public UcMessageBody setAlertRule(AlertRuleContent alertRule) {
    this.alertRule = alertRule;
    return this;
  }

  public void unsetAlertRule() {
    this.alertRule = null;
  }

  /** Returns true if field alertRule is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertRule() {
    return this.alertRule != null;
  }

  public void setAlertRuleIsSet(boolean value) {
    if (!value) {
      this.alertRule = null;
    }
  }

  public DiscussionClose getGroupClose() {
    return this.groupClose;
  }

  public UcMessageBody setGroupClose(DiscussionClose groupClose) {
    this.groupClose = groupClose;
    return this;
  }

  public void unsetGroupClose() {
    this.groupClose = null;
  }

  /** Returns true if field groupClose is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupClose() {
    return this.groupClose != null;
  }

  public void setGroupCloseIsSet(boolean value) {
    if (!value) {
      this.groupClose = null;
    }
  }

  public MsgNotifyContent getMsgNotify() {
    return this.msgNotify;
  }

  public UcMessageBody setMsgNotify(MsgNotifyContent msgNotify) {
    this.msgNotify = msgNotify;
    return this;
  }

  public void unsetMsgNotify() {
    this.msgNotify = null;
  }

  /** Returns true if field msgNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgNotify() {
    return this.msgNotify != null;
  }

  public void setMsgNotifyIsSet(boolean value) {
    if (!value) {
      this.msgNotify = null;
    }
  }

  public GroupMemberKickContent getGroupKick() {
    return this.groupKick;
  }

  public UcMessageBody setGroupKick(GroupMemberKickContent groupKick) {
    this.groupKick = groupKick;
    return this;
  }

  public void unsetGroupKick() {
    this.groupKick = null;
  }

  /** Returns true if field groupKick is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupKick() {
    return this.groupKick != null;
  }

  public void setGroupKickIsSet(boolean value) {
    if (!value) {
      this.groupKick = null;
    }
  }

  public CodeCreateContent getCodeCreate() {
    return this.codeCreate;
  }

  public UcMessageBody setCodeCreate(CodeCreateContent codeCreate) {
    this.codeCreate = codeCreate;
    return this;
  }

  public void unsetCodeCreate() {
    this.codeCreate = null;
  }

  /** Returns true if field codeCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetCodeCreate() {
    return this.codeCreate != null;
  }

  public void setCodeCreateIsSet(boolean value) {
    if (!value) {
      this.codeCreate = null;
    }
  }

  public CodeDelContent getCodeDel() {
    return this.codeDel;
  }

  public UcMessageBody setCodeDel(CodeDelContent codeDel) {
    this.codeDel = codeDel;
    return this;
  }

  public void unsetCodeDel() {
    this.codeDel = null;
  }

  /** Returns true if field codeDel is set (has been assigned a value) and false otherwise */
  public boolean isSetCodeDel() {
    return this.codeDel != null;
  }

  public void setCodeDelIsSet(boolean value) {
    if (!value) {
      this.codeDel = null;
    }
  }

  public DocumentDelContent getDocDel() {
    return this.docDel;
  }

  public UcMessageBody setDocDel(DocumentDelContent docDel) {
    this.docDel = docDel;
    return this;
  }

  public void unsetDocDel() {
    this.docDel = null;
  }

  /** Returns true if field docDel is set (has been assigned a value) and false otherwise */
  public boolean isSetDocDel() {
    return this.docDel != null;
  }

  public void setDocDelIsSet(boolean value) {
    if (!value) {
      this.docDel = null;
    }
  }

  public CommentCreateContent getCommentCreate() {
    return this.commentCreate;
  }

  public UcMessageBody setCommentCreate(CommentCreateContent commentCreate) {
    this.commentCreate = commentCreate;
    return this;
  }

  public void unsetCommentCreate() {
    this.commentCreate = null;
  }

  /** Returns true if field commentCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentCreate() {
    return this.commentCreate != null;
  }

  public void setCommentCreateIsSet(boolean value) {
    if (!value) {
      this.commentCreate = null;
    }
  }

  public CommentDelContent getCommentDel() {
    return this.commentDel;
  }

  public UcMessageBody setCommentDel(CommentDelContent commentDel) {
    this.commentDel = commentDel;
    return this;
  }

  public void unsetCommentDel() {
    this.commentDel = null;
  }

  /** Returns true if field commentDel is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentDel() {
    return this.commentDel != null;
  }

  public void setCommentDelIsSet(boolean value) {
    if (!value) {
      this.commentDel = null;
    }
  }

  public GroupAvatarUpdateContent getGroupAvatarUpdate() {
    return this.groupAvatarUpdate;
  }

  public UcMessageBody setGroupAvatarUpdate(GroupAvatarUpdateContent groupAvatarUpdate) {
    this.groupAvatarUpdate = groupAvatarUpdate;
    return this;
  }

  public void unsetGroupAvatarUpdate() {
    this.groupAvatarUpdate = null;
  }

  /** Returns true if field groupAvatarUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupAvatarUpdate() {
    return this.groupAvatarUpdate != null;
  }

  public void setGroupAvatarUpdateIsSet(boolean value) {
    if (!value) {
      this.groupAvatarUpdate = null;
    }
  }

  public GroupStateUpdateContent getGroupState() {
    return this.groupState;
  }

  public UcMessageBody setGroupState(GroupStateUpdateContent groupState) {
    this.groupState = groupState;
    return this;
  }

  public void unsetGroupState() {
    this.groupState = null;
  }

  /** Returns true if field groupState is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupState() {
    return this.groupState != null;
  }

  public void setGroupStateIsSet(boolean value) {
    if (!value) {
      this.groupState = null;
    }
  }

  public CloudFileContent getCloudFile() {
    return this.cloudFile;
  }

  public UcMessageBody setCloudFile(CloudFileContent cloudFile) {
    this.cloudFile = cloudFile;
    return this;
  }

  public void unsetCloudFile() {
    this.cloudFile = null;
  }

  /** Returns true if field cloudFile is set (has been assigned a value) and false otherwise */
  public boolean isSetCloudFile() {
    return this.cloudFile != null;
  }

  public void setCloudFileIsSet(boolean value) {
    if (!value) {
      this.cloudFile = null;
    }
  }

  public MemberRoleUpdateContent getMemberRole() {
    return this.memberRole;
  }

  public UcMessageBody setMemberRole(MemberRoleUpdateContent memberRole) {
    this.memberRole = memberRole;
    return this;
  }

  public void unsetMemberRole() {
    this.memberRole = null;
  }

  /** Returns true if field memberRole is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberRole() {
    return this.memberRole != null;
  }

  public void setMemberRoleIsSet(boolean value) {
    if (!value) {
      this.memberRole = null;
    }
  }

  public ReportContent getReport() {
    return this.report;
  }

  public UcMessageBody setReport(ReportContent report) {
    this.report = report;
    return this;
  }

  public void unsetReport() {
    this.report = null;
  }

  /** Returns true if field report is set (has been assigned a value) and false otherwise */
  public boolean isSetReport() {
    return this.report != null;
  }

  public void setReportIsSet(boolean value) {
    if (!value) {
      this.report = null;
    }
  }

  public RevocationContent getRevocation() {
    return this.revocation;
  }

  public UcMessageBody setRevocation(RevocationContent revocation) {
    this.revocation = revocation;
    return this;
  }

  public void unsetRevocation() {
    this.revocation = null;
  }

  /** Returns true if field revocation is set (has been assigned a value) and false otherwise */
  public boolean isSetRevocation() {
    return this.revocation != null;
  }

  public void setRevocationIsSet(boolean value) {
    if (!value) {
      this.revocation = null;
    }
  }

  public GroupScopeContent getGroupScope() {
    return this.groupScope;
  }

  public UcMessageBody setGroupScope(GroupScopeContent groupScope) {
    this.groupScope = groupScope;
    return this;
  }

  public void unsetGroupScope() {
    this.groupScope = null;
  }

  /** Returns true if field groupScope is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupScope() {
    return this.groupScope != null;
  }

  public void setGroupScopeIsSet(boolean value) {
    if (!value) {
      this.groupScope = null;
    }
  }

  public GroupOwnerTransferContent getOwnerTransfer() {
    return this.ownerTransfer;
  }

  public UcMessageBody setOwnerTransfer(GroupOwnerTransferContent ownerTransfer) {
    this.ownerTransfer = ownerTransfer;
    return this;
  }

  public void unsetOwnerTransfer() {
    this.ownerTransfer = null;
  }

  /** Returns true if field ownerTransfer is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerTransfer() {
    return this.ownerTransfer != null;
  }

  public void setOwnerTransferIsSet(boolean value) {
    if (!value) {
      this.ownerTransfer = null;
    }
  }

  public SystemWelcomeContent getWelcome() {
    return this.welcome;
  }

  public UcMessageBody setWelcome(SystemWelcomeContent welcome) {
    this.welcome = welcome;
    return this;
  }

  public void unsetWelcome() {
    this.welcome = null;
  }

  /** Returns true if field welcome is set (has been assigned a value) and false otherwise */
  public boolean isSetWelcome() {
    return this.welcome != null;
  }

  public void setWelcomeIsSet(boolean value) {
    if (!value) {
      this.welcome = null;
    }
  }

  public ClientUpdateContent getClientUpdate() {
    return this.clientUpdate;
  }

  public UcMessageBody setClientUpdate(ClientUpdateContent clientUpdate) {
    this.clientUpdate = clientUpdate;
    return this;
  }

  public void unsetClientUpdate() {
    this.clientUpdate = null;
  }

  /** Returns true if field clientUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetClientUpdate() {
    return this.clientUpdate != null;
  }

  public void setClientUpdateIsSet(boolean value) {
    if (!value) {
      this.clientUpdate = null;
    }
  }

  public CompleteInfoContent getCompleteInfo() {
    return this.completeInfo;
  }

  public UcMessageBody setCompleteInfo(CompleteInfoContent completeInfo) {
    this.completeInfo = completeInfo;
    return this;
  }

  public void unsetCompleteInfo() {
    this.completeInfo = null;
  }

  /** Returns true if field completeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteInfo() {
    return this.completeInfo != null;
  }

  public void setCompleteInfoIsSet(boolean value) {
    if (!value) {
      this.completeInfo = null;
    }
  }

  public PwdComplexUpdateContent getPwdComplexUpdate() {
    return this.pwdComplexUpdate;
  }

  public UcMessageBody setPwdComplexUpdate(PwdComplexUpdateContent pwdComplexUpdate) {
    this.pwdComplexUpdate = pwdComplexUpdate;
    return this;
  }

  public void unsetPwdComplexUpdate() {
    this.pwdComplexUpdate = null;
  }

  /** Returns true if field pwdComplexUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetPwdComplexUpdate() {
    return this.pwdComplexUpdate != null;
  }

  public void setPwdComplexUpdateIsSet(boolean value) {
    if (!value) {
      this.pwdComplexUpdate = null;
    }
  }

  public PwdExpireContent getPwdExpire() {
    return this.pwdExpire;
  }

  public UcMessageBody setPwdExpire(PwdExpireContent pwdExpire) {
    this.pwdExpire = pwdExpire;
    return this;
  }

  public void unsetPwdExpire() {
    this.pwdExpire = null;
  }

  /** Returns true if field pwdExpire is set (has been assigned a value) and false otherwise */
  public boolean isSetPwdExpire() {
    return this.pwdExpire != null;
  }

  public void setPwdExpireIsSet(boolean value) {
    if (!value) {
      this.pwdExpire = null;
    }
  }

  public PCClientGuide getPcGuide() {
    return this.pcGuide;
  }

  public UcMessageBody setPcGuide(PCClientGuide pcGuide) {
    this.pcGuide = pcGuide;
    return this;
  }

  public void unsetPcGuide() {
    this.pcGuide = null;
  }

  /** Returns true if field pcGuide is set (has been assigned a value) and false otherwise */
  public boolean isSetPcGuide() {
    return this.pcGuide != null;
  }

  public void setPcGuideIsSet(boolean value) {
    if (!value) {
      this.pcGuide = null;
    }
  }

  public MobileClientGuide getMobileGuide() {
    return this.mobileGuide;
  }

  public UcMessageBody setMobileGuide(MobileClientGuide mobileGuide) {
    this.mobileGuide = mobileGuide;
    return this;
  }

  public void unsetMobileGuide() {
    this.mobileGuide = null;
  }

  /** Returns true if field mobileGuide is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileGuide() {
    return this.mobileGuide != null;
  }

  public void setMobileGuideIsSet(boolean value) {
    if (!value) {
      this.mobileGuide = null;
    }
  }

  public PasswordModifyContent getPwdModify() {
    return this.pwdModify;
  }

  public UcMessageBody setPwdModify(PasswordModifyContent pwdModify) {
    this.pwdModify = pwdModify;
    return this;
  }

  public void unsetPwdModify() {
    this.pwdModify = null;
  }

  /** Returns true if field pwdModify is set (has been assigned a value) and false otherwise */
  public boolean isSetPwdModify() {
    return this.pwdModify != null;
  }

  public void setPwdModifyIsSet(boolean value) {
    if (!value) {
      this.pwdModify = null;
    }
  }

  public TagDelContent getTagDel() {
    return this.tagDel;
  }

  public UcMessageBody setTagDel(TagDelContent tagDel) {
    this.tagDel = tagDel;
    return this;
  }

  public void unsetTagDel() {
    this.tagDel = null;
  }

  /** Returns true if field tagDel is set (has been assigned a value) and false otherwise */
  public boolean isSetTagDel() {
    return this.tagDel != null;
  }

  public void setTagDelIsSet(boolean value) {
    if (!value) {
      this.tagDel = null;
    }
  }

  public GroupRemindContent getRemind() {
    return this.remind;
  }

  public UcMessageBody setRemind(GroupRemindContent remind) {
    this.remind = remind;
    return this;
  }

  public void unsetRemind() {
    this.remind = null;
  }

  /** Returns true if field remind is set (has been assigned a value) and false otherwise */
  public boolean isSetRemind() {
    return this.remind != null;
  }

  public void setRemindIsSet(boolean value) {
    if (!value) {
      this.remind = null;
    }
  }

  public DeptUpdateContent getDeptUpdate() {
    return this.deptUpdate;
  }

  public UcMessageBody setDeptUpdate(DeptUpdateContent deptUpdate) {
    this.deptUpdate = deptUpdate;
    return this;
  }

  public void unsetDeptUpdate() {
    this.deptUpdate = null;
  }

  /** Returns true if field deptUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptUpdate() {
    return this.deptUpdate != null;
  }

  public void setDeptUpdateIsSet(boolean value) {
    if (!value) {
      this.deptUpdate = null;
    }
  }

  public DeptTransferContent getDeptTransfer() {
    return this.deptTransfer;
  }

  public UcMessageBody setDeptTransfer(DeptTransferContent deptTransfer) {
    this.deptTransfer = deptTransfer;
    return this;
  }

  public void unsetDeptTransfer() {
    this.deptTransfer = null;
  }

  /** Returns true if field deptTransfer is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptTransfer() {
    return this.deptTransfer != null;
  }

  public void setDeptTransferIsSet(boolean value) {
    if (!value) {
      this.deptTransfer = null;
    }
  }

  public PositionUpdateContent getPositionUpdate() {
    return this.positionUpdate;
  }

  public UcMessageBody setPositionUpdate(PositionUpdateContent positionUpdate) {
    this.positionUpdate = positionUpdate;
    return this;
  }

  public void unsetPositionUpdate() {
    this.positionUpdate = null;
  }

  /** Returns true if field positionUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionUpdate() {
    return this.positionUpdate != null;
  }

  public void setPositionUpdateIsSet(boolean value) {
    if (!value) {
      this.positionUpdate = null;
    }
  }

  public EmployeeEntryContent getEmployeeEntry() {
    return this.employeeEntry;
  }

  public UcMessageBody setEmployeeEntry(EmployeeEntryContent employeeEntry) {
    this.employeeEntry = employeeEntry;
    return this;
  }

  public void unsetEmployeeEntry() {
    this.employeeEntry = null;
  }

  /** Returns true if field employeeEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeEntry() {
    return this.employeeEntry != null;
  }

  public void setEmployeeEntryIsSet(boolean value) {
    if (!value) {
      this.employeeEntry = null;
    }
  }

  public EmployeeLeaveContent getEmployeeLeave() {
    return this.employeeLeave;
  }

  public UcMessageBody setEmployeeLeave(EmployeeLeaveContent employeeLeave) {
    this.employeeLeave = employeeLeave;
    return this;
  }

  public void unsetEmployeeLeave() {
    this.employeeLeave = null;
  }

  /** Returns true if field employeeLeave is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeLeave() {
    return this.employeeLeave != null;
  }

  public void setEmployeeLeaveIsSet(boolean value) {
    if (!value) {
      this.employeeLeave = null;
    }
  }

  public EmployeeRightsChangeContent getEmployeeRights() {
    return this.employeeRights;
  }

  public UcMessageBody setEmployeeRights(EmployeeRightsChangeContent employeeRights) {
    this.employeeRights = employeeRights;
    return this;
  }

  public void unsetEmployeeRights() {
    this.employeeRights = null;
  }

  /** Returns true if field employeeRights is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeRights() {
    return this.employeeRights != null;
  }

  public void setEmployeeRightsIsSet(boolean value) {
    if (!value) {
      this.employeeRights = null;
    }
  }

  public DeptParentChangeContent getDeprtParentChange() {
    return this.deprtParentChange;
  }

  public UcMessageBody setDeprtParentChange(DeptParentChangeContent deprtParentChange) {
    this.deprtParentChange = deprtParentChange;
    return this;
  }

  public void unsetDeprtParentChange() {
    this.deprtParentChange = null;
  }

  /** Returns true if field deprtParentChange is set (has been assigned a value) and false otherwise */
  public boolean isSetDeprtParentChange() {
    return this.deprtParentChange != null;
  }

  public void setDeprtParentChangeIsSet(boolean value) {
    if (!value) {
      this.deprtParentChange = null;
    }
  }

  public CompanyJoinContent getCompanyJoin() {
    return this.companyJoin;
  }

  public UcMessageBody setCompanyJoin(CompanyJoinContent companyJoin) {
    this.companyJoin = companyJoin;
    return this;
  }

  public void unsetCompanyJoin() {
    this.companyJoin = null;
  }

  /** Returns true if field companyJoin is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyJoin() {
    return this.companyJoin != null;
  }

  public void setCompanyJoinIsSet(boolean value) {
    if (!value) {
      this.companyJoin = null;
    }
  }

  public DeptDeleteContent getDeptDelete() {
    return this.deptDelete;
  }

  public UcMessageBody setDeptDelete(DeptDeleteContent deptDelete) {
    this.deptDelete = deptDelete;
    return this;
  }

  public void unsetDeptDelete() {
    this.deptDelete = null;
  }

  /** Returns true if field deptDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptDelete() {
    return this.deptDelete != null;
  }

  public void setDeptDeleteIsSet(boolean value) {
    if (!value) {
      this.deptDelete = null;
    }
  }

  public EmployeeEntryConfirmContent getEntryConfirm() {
    return this.entryConfirm;
  }

  public UcMessageBody setEntryConfirm(EmployeeEntryConfirmContent entryConfirm) {
    this.entryConfirm = entryConfirm;
    return this;
  }

  public void unsetEntryConfirm() {
    this.entryConfirm = null;
  }

  /** Returns true if field entryConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryConfirm() {
    return this.entryConfirm != null;
  }

  public void setEntryConfirmIsSet(boolean value) {
    if (!value) {
      this.entryConfirm = null;
    }
  }

  public EmployeeLeaveConfirmContent getLeaveConfirm() {
    return this.leaveConfirm;
  }

  public UcMessageBody setLeaveConfirm(EmployeeLeaveConfirmContent leaveConfirm) {
    this.leaveConfirm = leaveConfirm;
    return this;
  }

  public void unsetLeaveConfirm() {
    this.leaveConfirm = null;
  }

  /** Returns true if field leaveConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaveConfirm() {
    return this.leaveConfirm != null;
  }

  public void setLeaveConfirmIsSet(boolean value) {
    if (!value) {
      this.leaveConfirm = null;
    }
  }

  public DeptTransferConfirmContent getDeptConfirm() {
    return this.deptConfirm;
  }

  public UcMessageBody setDeptConfirm(DeptTransferConfirmContent deptConfirm) {
    this.deptConfirm = deptConfirm;
    return this;
  }

  public void unsetDeptConfirm() {
    this.deptConfirm = null;
  }

  /** Returns true if field deptConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetDeptConfirm() {
    return this.deptConfirm != null;
  }

  public void setDeptConfirmIsSet(boolean value) {
    if (!value) {
      this.deptConfirm = null;
    }
  }

  public InstantIQInviteContent getInstantInvite() {
    return this.instantInvite;
  }

  public UcMessageBody setInstantInvite(InstantIQInviteContent instantInvite) {
    this.instantInvite = instantInvite;
    return this;
  }

  public void unsetInstantInvite() {
    this.instantInvite = null;
  }

  /** Returns true if field instantInvite is set (has been assigned a value) and false otherwise */
  public boolean isSetInstantInvite() {
    return this.instantInvite != null;
  }

  public void setInstantInviteIsSet(boolean value) {
    if (!value) {
      this.instantInvite = null;
    }
  }

  public IQInviteContent getConfInvite() {
    return this.confInvite;
  }

  public UcMessageBody setConfInvite(IQInviteContent confInvite) {
    this.confInvite = confInvite;
    return this;
  }

  public void unsetConfInvite() {
    this.confInvite = null;
  }

  /** Returns true if field confInvite is set (has been assigned a value) and false otherwise */
  public boolean isSetConfInvite() {
    return this.confInvite != null;
  }

  public void setConfInviteIsSet(boolean value) {
    if (!value) {
      this.confInvite = null;
    }
  }

  public IQReceiveContent getConfReceive() {
    return this.confReceive;
  }

  public UcMessageBody setConfReceive(IQReceiveContent confReceive) {
    this.confReceive = confReceive;
    return this;
  }

  public void unsetConfReceive() {
    this.confReceive = null;
  }

  /** Returns true if field confReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetConfReceive() {
    return this.confReceive != null;
  }

  public void setConfReceiveIsSet(boolean value) {
    if (!value) {
      this.confReceive = null;
    }
  }

  public IQRejectContent getConfReject() {
    return this.confReject;
  }

  public UcMessageBody setConfReject(IQRejectContent confReject) {
    this.confReject = confReject;
    return this;
  }

  public void unsetConfReject() {
    this.confReject = null;
  }

  /** Returns true if field confReject is set (has been assigned a value) and false otherwise */
  public boolean isSetConfReject() {
    return this.confReject != null;
  }

  public void setConfRejectIsSet(boolean value) {
    if (!value) {
      this.confReject = null;
    }
  }

  public ConfCancelContent getConfCancel() {
    return this.confCancel;
  }

  public UcMessageBody setConfCancel(ConfCancelContent confCancel) {
    this.confCancel = confCancel;
    return this;
  }

  public void unsetConfCancel() {
    this.confCancel = null;
  }

  /** Returns true if field confCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetConfCancel() {
    return this.confCancel != null;
  }

  public void setConfCancelIsSet(boolean value) {
    if (!value) {
      this.confCancel = null;
    }
  }

  public ConfAlertContent getConfAlert() {
    return this.confAlert;
  }

  public UcMessageBody setConfAlert(ConfAlertContent confAlert) {
    this.confAlert = confAlert;
    return this;
  }

  public void unsetConfAlert() {
    this.confAlert = null;
  }

  /** Returns true if field confAlert is set (has been assigned a value) and false otherwise */
  public boolean isSetConfAlert() {
    return this.confAlert != null;
  }

  public void setConfAlertIsSet(boolean value) {
    if (!value) {
      this.confAlert = null;
    }
  }

  public InstantIQReceiveContent getInstantReceive() {
    return this.instantReceive;
  }

  public UcMessageBody setInstantReceive(InstantIQReceiveContent instantReceive) {
    this.instantReceive = instantReceive;
    return this;
  }

  public void unsetInstantReceive() {
    this.instantReceive = null;
  }

  /** Returns true if field instantReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetInstantReceive() {
    return this.instantReceive != null;
  }

  public void setInstantReceiveIsSet(boolean value) {
    if (!value) {
      this.instantReceive = null;
    }
  }

  public InstantIQRejectContent getInstantReject() {
    return this.instantReject;
  }

  public UcMessageBody setInstantReject(InstantIQRejectContent instantReject) {
    this.instantReject = instantReject;
    return this;
  }

  public void unsetInstantReject() {
    this.instantReject = null;
  }

  /** Returns true if field instantReject is set (has been assigned a value) and false otherwise */
  public boolean isSetInstantReject() {
    return this.instantReject != null;
  }

  public void setInstantRejectIsSet(boolean value) {
    if (!value) {
      this.instantReject = null;
    }
  }

  public ConfChatContent getConfChat() {
    return this.confChat;
  }

  public UcMessageBody setConfChat(ConfChatContent confChat) {
    this.confChat = confChat;
    return this;
  }

  public void unsetConfChat() {
    this.confChat = null;
  }

  /** Returns true if field confChat is set (has been assigned a value) and false otherwise */
  public boolean isSetConfChat() {
    return this.confChat != null;
  }

  public void setConfChatIsSet(boolean value) {
    if (!value) {
      this.confChat = null;
    }
  }

  public ConfSummaryContent getConfSummary() {
    return this.confSummary;
  }

  public UcMessageBody setConfSummary(ConfSummaryContent confSummary) {
    this.confSummary = confSummary;
    return this;
  }

  public void unsetConfSummary() {
    this.confSummary = null;
  }

  /** Returns true if field confSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetConfSummary() {
    return this.confSummary != null;
  }

  public void setConfSummaryIsSet(boolean value) {
    if (!value) {
      this.confSummary = null;
    }
  }

  public CallStateContent getCallState() {
    return this.callState;
  }

  public UcMessageBody setCallState(CallStateContent callState) {
    this.callState = callState;
    return this;
  }

  public void unsetCallState() {
    this.callState = null;
  }

  /** Returns true if field callState is set (has been assigned a value) and false otherwise */
  public boolean isSetCallState() {
    return this.callState != null;
  }

  public void setCallStateIsSet(boolean value) {
    if (!value) {
      this.callState = null;
    }
  }

  public ConfUploadContent getConfUpload() {
    return this.confUpload;
  }

  public UcMessageBody setConfUpload(ConfUploadContent confUpload) {
    this.confUpload = confUpload;
    return this;
  }

  public void unsetConfUpload() {
    this.confUpload = null;
  }

  /** Returns true if field confUpload is set (has been assigned a value) and false otherwise */
  public boolean isSetConfUpload() {
    return this.confUpload != null;
  }

  public void setConfUploadIsSet(boolean value) {
    if (!value) {
      this.confUpload = null;
    }
  }

  public ConfDelDocContent getConfDocDel() {
    return this.confDocDel;
  }

  public UcMessageBody setConfDocDel(ConfDelDocContent confDocDel) {
    this.confDocDel = confDocDel;
    return this;
  }

  public void unsetConfDocDel() {
    this.confDocDel = null;
  }

  /** Returns true if field confDocDel is set (has been assigned a value) and false otherwise */
  public boolean isSetConfDocDel() {
    return this.confDocDel != null;
  }

  public void setConfDocDelIsSet(boolean value) {
    if (!value) {
      this.confDocDel = null;
    }
  }

  public CardUpdateContent getCardUpdate() {
    return this.cardUpdate;
  }

  public UcMessageBody setCardUpdate(CardUpdateContent cardUpdate) {
    this.cardUpdate = cardUpdate;
    return this;
  }

  public void unsetCardUpdate() {
    this.cardUpdate = null;
  }

  /** Returns true if field cardUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCardUpdate() {
    return this.cardUpdate != null;
  }

  public void setCardUpdateIsSet(boolean value) {
    if (!value) {
      this.cardUpdate = null;
    }
  }

  public ContacterAddContent getContacterAdd() {
    return this.contacterAdd;
  }

  public UcMessageBody setContacterAdd(ContacterAddContent contacterAdd) {
    this.contacterAdd = contacterAdd;
    return this;
  }

  public void unsetContacterAdd() {
    this.contacterAdd = null;
  }

  /** Returns true if field contacterAdd is set (has been assigned a value) and false otherwise */
  public boolean isSetContacterAdd() {
    return this.contacterAdd != null;
  }

  public void setContacterAddIsSet(boolean value) {
    if (!value) {
      this.contacterAdd = null;
    }
  }

  public ContacterDelContent getContacterDel() {
    return this.contacterDel;
  }

  public UcMessageBody setContacterDel(ContacterDelContent contacterDel) {
    this.contacterDel = contacterDel;
    return this;
  }

  public void unsetContacterDel() {
    this.contacterDel = null;
  }

  /** Returns true if field contacterDel is set (has been assigned a value) and false otherwise */
  public boolean isSetContacterDel() {
    return this.contacterDel != null;
  }

  public void setContacterDelIsSet(boolean value) {
    if (!value) {
      this.contacterDel = null;
    }
  }

  public AttentionCreateContent getAttentionCreate() {
    return this.attentionCreate;
  }

  public UcMessageBody setAttentionCreate(AttentionCreateContent attentionCreate) {
    this.attentionCreate = attentionCreate;
    return this;
  }

  public void unsetAttentionCreate() {
    this.attentionCreate = null;
  }

  /** Returns true if field attentionCreate is set (has been assigned a value) and false otherwise */
  public boolean isSetAttentionCreate() {
    return this.attentionCreate != null;
  }

  public void setAttentionCreateIsSet(boolean value) {
    if (!value) {
      this.attentionCreate = null;
    }
  }

  public AttentionCancelContent getAttentionCancel() {
    return this.attentionCancel;
  }

  public UcMessageBody setAttentionCancel(AttentionCancelContent attentionCancel) {
    this.attentionCancel = attentionCancel;
    return this;
  }

  public void unsetAttentionCancel() {
    this.attentionCancel = null;
  }

  /** Returns true if field attentionCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetAttentionCancel() {
    return this.attentionCancel != null;
  }

  public void setAttentionCancelIsSet(boolean value) {
    if (!value) {
      this.attentionCancel = null;
    }
  }

  public FileTransmissionInviteContent getTransInvite() {
    return this.transInvite;
  }

  public UcMessageBody setTransInvite(FileTransmissionInviteContent transInvite) {
    this.transInvite = transInvite;
    return this;
  }

  public void unsetTransInvite() {
    this.transInvite = null;
  }

  /** Returns true if field transInvite is set (has been assigned a value) and false otherwise */
  public boolean isSetTransInvite() {
    return this.transInvite != null;
  }

  public void setTransInviteIsSet(boolean value) {
    if (!value) {
      this.transInvite = null;
    }
  }

  public FileTransmissionReceiveContent getTransReceive() {
    return this.transReceive;
  }

  public UcMessageBody setTransReceive(FileTransmissionReceiveContent transReceive) {
    this.transReceive = transReceive;
    return this;
  }

  public void unsetTransReceive() {
    this.transReceive = null;
  }

  /** Returns true if field transReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetTransReceive() {
    return this.transReceive != null;
  }

  public void setTransReceiveIsSet(boolean value) {
    if (!value) {
      this.transReceive = null;
    }
  }

  public FileTransmissionRejectContent getTransReject() {
    return this.transReject;
  }

  public UcMessageBody setTransReject(FileTransmissionRejectContent transReject) {
    this.transReject = transReject;
    return this;
  }

  public void unsetTransReject() {
    this.transReject = null;
  }

  /** Returns true if field transReject is set (has been assigned a value) and false otherwise */
  public boolean isSetTransReject() {
    return this.transReject != null;
  }

  public void setTransRejectIsSet(boolean value) {
    if (!value) {
      this.transReject = null;
    }
  }

  public FileTransmissionStopContent getTransStop() {
    return this.transStop;
  }

  public UcMessageBody setTransStop(FileTransmissionStopContent transStop) {
    this.transStop = transStop;
    return this;
  }

  public void unsetTransStop() {
    this.transStop = null;
  }

  /** Returns true if field transStop is set (has been assigned a value) and false otherwise */
  public boolean isSetTransStop() {
    return this.transStop != null;
  }

  public void setTransStopIsSet(boolean value) {
    if (!value) {
      this.transStop = null;
    }
  }

  public AudioInviteContent getAudioInvite() {
    return this.audioInvite;
  }

  public UcMessageBody setAudioInvite(AudioInviteContent audioInvite) {
    this.audioInvite = audioInvite;
    return this;
  }

  public void unsetAudioInvite() {
    this.audioInvite = null;
  }

  /** Returns true if field audioInvite is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioInvite() {
    return this.audioInvite != null;
  }

  public void setAudioInviteIsSet(boolean value) {
    if (!value) {
      this.audioInvite = null;
    }
  }

  public AudioReceiveContent getAudioReceive() {
    return this.audioReceive;
  }

  public UcMessageBody setAudioReceive(AudioReceiveContent audioReceive) {
    this.audioReceive = audioReceive;
    return this;
  }

  public void unsetAudioReceive() {
    this.audioReceive = null;
  }

  /** Returns true if field audioReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioReceive() {
    return this.audioReceive != null;
  }

  public void setAudioReceiveIsSet(boolean value) {
    if (!value) {
      this.audioReceive = null;
    }
  }

  public AudioRejectContent getAudioReject() {
    return this.audioReject;
  }

  public UcMessageBody setAudioReject(AudioRejectContent audioReject) {
    this.audioReject = audioReject;
    return this;
  }

  public void unsetAudioReject() {
    this.audioReject = null;
  }

  /** Returns true if field audioReject is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioReject() {
    return this.audioReject != null;
  }

  public void setAudioRejectIsSet(boolean value) {
    if (!value) {
      this.audioReject = null;
    }
  }

  public AudioStopContent getAudioStop() {
    return this.audioStop;
  }

  public UcMessageBody setAudioStop(AudioStopContent audioStop) {
    this.audioStop = audioStop;
    return this;
  }

  public void unsetAudioStop() {
    this.audioStop = null;
  }

  /** Returns true if field audioStop is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioStop() {
    return this.audioStop != null;
  }

  public void setAudioStopIsSet(boolean value) {
    if (!value) {
      this.audioStop = null;
    }
  }

  public AudioRecentCallContent getCallRecent() {
    return this.callRecent;
  }

  public UcMessageBody setCallRecent(AudioRecentCallContent callRecent) {
    this.callRecent = callRecent;
    return this;
  }

  public void unsetCallRecent() {
    this.callRecent = null;
  }

  /** Returns true if field callRecent is set (has been assigned a value) and false otherwise */
  public boolean isSetCallRecent() {
    return this.callRecent != null;
  }

  public void setCallRecentIsSet(boolean value) {
    if (!value) {
      this.callRecent = null;
    }
  }

  public AudioBlockCallContent getCallBlock() {
    return this.callBlock;
  }

  public UcMessageBody setCallBlock(AudioBlockCallContent callBlock) {
    this.callBlock = callBlock;
    return this;
  }

  public void unsetCallBlock() {
    this.callBlock = null;
  }

  /** Returns true if field callBlock is set (has been assigned a value) and false otherwise */
  public boolean isSetCallBlock() {
    return this.callBlock != null;
  }

  public void setCallBlockIsSet(boolean value) {
    if (!value) {
      this.callBlock = null;
    }
  }

  public AudioRejectCallContent getCallReject() {
    return this.callReject;
  }

  public UcMessageBody setCallReject(AudioRejectCallContent callReject) {
    this.callReject = callReject;
    return this;
  }

  public void unsetCallReject() {
    this.callReject = null;
  }

  /** Returns true if field callReject is set (has been assigned a value) and false otherwise */
  public boolean isSetCallReject() {
    return this.callReject != null;
  }

  public void setCallRejectIsSet(boolean value) {
    if (!value) {
      this.callReject = null;
    }
  }

  public AudioCancelCallContent getCallCancel() {
    return this.callCancel;
  }

  public UcMessageBody setCallCancel(AudioCancelCallContent callCancel) {
    this.callCancel = callCancel;
    return this;
  }

  public void unsetCallCancel() {
    this.callCancel = null;
  }

  /** Returns true if field callCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetCallCancel() {
    return this.callCancel != null;
  }

  public void setCallCancelIsSet(boolean value) {
    if (!value) {
      this.callCancel = null;
    }
  }

  public ConfShareContent getConfShare() {
    return this.confShare;
  }

  public UcMessageBody setConfShare(ConfShareContent confShare) {
    this.confShare = confShare;
    return this;
  }

  public void unsetConfShare() {
    this.confShare = null;
  }

  /** Returns true if field confShare is set (has been assigned a value) and false otherwise */
  public boolean isSetConfShare() {
    return this.confShare != null;
  }

  public void setConfShareIsSet(boolean value) {
    if (!value) {
      this.confShare = null;
    }
  }

  public WBMessageContent getWbContent() {
    return this.wbContent;
  }

  public UcMessageBody setWbContent(WBMessageContent wbContent) {
    this.wbContent = wbContent;
    return this;
  }

  public void unsetWbContent() {
    this.wbContent = null;
  }

  /** Returns true if field wbContent is set (has been assigned a value) and false otherwise */
  public boolean isSetWbContent() {
    return this.wbContent != null;
  }

  public void setWbContentIsSet(boolean value) {
    if (!value) {
      this.wbContent = null;
    }
  }

  public RemoteAssistanceInviteContent getRemoteAssistanceInvite() {
    return this.remoteAssistanceInvite;
  }

  public UcMessageBody setRemoteAssistanceInvite(RemoteAssistanceInviteContent remoteAssistanceInvite) {
    this.remoteAssistanceInvite = remoteAssistanceInvite;
    return this;
  }

  public void unsetRemoteAssistanceInvite() {
    this.remoteAssistanceInvite = null;
  }

  /** Returns true if field remoteAssistanceInvite is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAssistanceInvite() {
    return this.remoteAssistanceInvite != null;
  }

  public void setRemoteAssistanceInviteIsSet(boolean value) {
    if (!value) {
      this.remoteAssistanceInvite = null;
    }
  }

  public RemoteAssistanceAcceptContent getRemoteAssistanceAccept() {
    return this.remoteAssistanceAccept;
  }

  public UcMessageBody setRemoteAssistanceAccept(RemoteAssistanceAcceptContent remoteAssistanceAccept) {
    this.remoteAssistanceAccept = remoteAssistanceAccept;
    return this;
  }

  public void unsetRemoteAssistanceAccept() {
    this.remoteAssistanceAccept = null;
  }

  /** Returns true if field remoteAssistanceAccept is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAssistanceAccept() {
    return this.remoteAssistanceAccept != null;
  }

  public void setRemoteAssistanceAcceptIsSet(boolean value) {
    if (!value) {
      this.remoteAssistanceAccept = null;
    }
  }

  public RemoteAssistanceRejectContent getRemoteAssistanceReject() {
    return this.remoteAssistanceReject;
  }

  public UcMessageBody setRemoteAssistanceReject(RemoteAssistanceRejectContent remoteAssistanceReject) {
    this.remoteAssistanceReject = remoteAssistanceReject;
    return this;
  }

  public void unsetRemoteAssistanceReject() {
    this.remoteAssistanceReject = null;
  }

  /** Returns true if field remoteAssistanceReject is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAssistanceReject() {
    return this.remoteAssistanceReject != null;
  }

  public void setRemoteAssistanceRejectIsSet(boolean value) {
    if (!value) {
      this.remoteAssistanceReject = null;
    }
  }

  public RemoteAssistanceEndContent getRemoteAssistanceEnd() {
    return this.remoteAssistanceEnd;
  }

  public UcMessageBody setRemoteAssistanceEnd(RemoteAssistanceEndContent remoteAssistanceEnd) {
    this.remoteAssistanceEnd = remoteAssistanceEnd;
    return this;
  }

  public void unsetRemoteAssistanceEnd() {
    this.remoteAssistanceEnd = null;
  }

  /** Returns true if field remoteAssistanceEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAssistanceEnd() {
    return this.remoteAssistanceEnd != null;
  }

  public void setRemoteAssistanceEndIsSet(boolean value) {
    if (!value) {
      this.remoteAssistanceEnd = null;
    }
  }

  public RemoteAssistanceCancelContent getRemoteAssistanceCancel() {
    return this.remoteAssistanceCancel;
  }

  public UcMessageBody setRemoteAssistanceCancel(RemoteAssistanceCancelContent remoteAssistanceCancel) {
    this.remoteAssistanceCancel = remoteAssistanceCancel;
    return this;
  }

  public void unsetRemoteAssistanceCancel() {
    this.remoteAssistanceCancel = null;
  }

  /** Returns true if field remoteAssistanceCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAssistanceCancel() {
    return this.remoteAssistanceCancel != null;
  }

  public void setRemoteAssistanceCancelIsSet(boolean value) {
    if (!value) {
      this.remoteAssistanceCancel = null;
    }
  }

  public SessionTopContent getSessionTop() {
    return this.sessionTop;
  }

  public UcMessageBody setSessionTop(SessionTopContent sessionTop) {
    this.sessionTop = sessionTop;
    return this;
  }

  public void unsetSessionTop() {
    this.sessionTop = null;
  }

  /** Returns true if field sessionTop is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionTop() {
    return this.sessionTop != null;
  }

  public void setSessionTopIsSet(boolean value) {
    if (!value) {
      this.sessionTop = null;
    }
  }

  public AtMessageReadedContent getAtMessageReaded() {
    return this.atMessageReaded;
  }

  public UcMessageBody setAtMessageReaded(AtMessageReadedContent atMessageReaded) {
    this.atMessageReaded = atMessageReaded;
    return this;
  }

  public void unsetAtMessageReaded() {
    this.atMessageReaded = null;
  }

  /** Returns true if field atMessageReaded is set (has been assigned a value) and false otherwise */
  public boolean isSetAtMessageReaded() {
    return this.atMessageReaded != null;
  }

  public void setAtMessageReadedIsSet(boolean value) {
    if (!value) {
      this.atMessageReaded = null;
    }
  }

  public UserLoginNotifyContent getLoginNotify() {
    return this.loginNotify;
  }

  public UcMessageBody setLoginNotify(UserLoginNotifyContent loginNotify) {
    this.loginNotify = loginNotify;
    return this;
  }

  public void unsetLoginNotify() {
    this.loginNotify = null;
  }

  /** Returns true if field loginNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginNotify() {
    return this.loginNotify != null;
  }

  public void setLoginNotifyIsSet(boolean value) {
    if (!value) {
      this.loginNotify = null;
    }
  }

  public GroupScopeNotifyContent getGroupScopeNotify() {
    return this.groupScopeNotify;
  }

  public UcMessageBody setGroupScopeNotify(GroupScopeNotifyContent groupScopeNotify) {
    this.groupScopeNotify = groupScopeNotify;
    return this;
  }

  public void unsetGroupScopeNotify() {
    this.groupScopeNotify = null;
  }

  /** Returns true if field groupScopeNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupScopeNotify() {
    return this.groupScopeNotify != null;
  }

  public void setGroupScopeNotifyIsSet(boolean value) {
    if (!value) {
      this.groupScopeNotify = null;
    }
  }

  public ContactsRelationNotifyContent getContactsRelationNotify() {
    return this.contactsRelationNotify;
  }

  public UcMessageBody setContactsRelationNotify(ContactsRelationNotifyContent contactsRelationNotify) {
    this.contactsRelationNotify = contactsRelationNotify;
    return this;
  }

  public void unsetContactsRelationNotify() {
    this.contactsRelationNotify = null;
  }

  /** Returns true if field contactsRelationNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetContactsRelationNotify() {
    return this.contactsRelationNotify != null;
  }

  public void setContactsRelationNotifyIsSet(boolean value) {
    if (!value) {
      this.contactsRelationNotify = null;
    }
  }

  public MeetingAlertSettingNotifyContent getMeetingAlertNotify() {
    return this.meetingAlertNotify;
  }

  public UcMessageBody setMeetingAlertNotify(MeetingAlertSettingNotifyContent meetingAlertNotify) {
    this.meetingAlertNotify = meetingAlertNotify;
    return this;
  }

  public void unsetMeetingAlertNotify() {
    this.meetingAlertNotify = null;
  }

  /** Returns true if field meetingAlertNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingAlertNotify() {
    return this.meetingAlertNotify != null;
  }

  public void setMeetingAlertNotifyIsSet(boolean value) {
    if (!value) {
      this.meetingAlertNotify = null;
    }
  }

  public APITextContent getApiText() {
    return this.apiText;
  }

  public UcMessageBody setApiText(APITextContent apiText) {
    this.apiText = apiText;
    return this;
  }

  public void unsetApiText() {
    this.apiText = null;
  }

  /** Returns true if field apiText is set (has been assigned a value) and false otherwise */
  public boolean isSetApiText() {
    return this.apiText != null;
  }

  public void setApiTextIsSet(boolean value) {
    if (!value) {
      this.apiText = null;
    }
  }

  public APIImageContent getApiImage() {
    return this.apiImage;
  }

  public UcMessageBody setApiImage(APIImageContent apiImage) {
    this.apiImage = apiImage;
    return this;
  }

  public void unsetApiImage() {
    this.apiImage = null;
  }

  /** Returns true if field apiImage is set (has been assigned a value) and false otherwise */
  public boolean isSetApiImage() {
    return this.apiImage != null;
  }

  public void setApiImageIsSet(boolean value) {
    if (!value) {
      this.apiImage = null;
    }
  }

  public APIFileContent getApiFile() {
    return this.apiFile;
  }

  public UcMessageBody setApiFile(APIFileContent apiFile) {
    this.apiFile = apiFile;
    return this;
  }

  public void unsetApiFile() {
    this.apiFile = null;
  }

  /** Returns true if field apiFile is set (has been assigned a value) and false otherwise */
  public boolean isSetApiFile() {
    return this.apiFile != null;
  }

  public void setApiFileIsSet(boolean value) {
    if (!value) {
      this.apiFile = null;
    }
  }

  public APIAckSentContent getApiAckSent() {
    return this.apiAckSent;
  }

  public UcMessageBody setApiAckSent(APIAckSentContent apiAckSent) {
    this.apiAckSent = apiAckSent;
    return this;
  }

  public void unsetApiAckSent() {
    this.apiAckSent = null;
  }

  /** Returns true if field apiAckSent is set (has been assigned a value) and false otherwise */
  public boolean isSetApiAckSent() {
    return this.apiAckSent != null;
  }

  public void setApiAckSentIsSet(boolean value) {
    if (!value) {
      this.apiAckSent = null;
    }
  }

  public APIOAContent getApiOA() {
    return this.apiOA;
  }

  public UcMessageBody setApiOA(APIOAContent apiOA) {
    this.apiOA = apiOA;
    return this;
  }

  public void unsetApiOA() {
    this.apiOA = null;
  }

  /** Returns true if field apiOA is set (has been assigned a value) and false otherwise */
  public boolean isSetApiOA() {
    return this.apiOA != null;
  }

  public void setApiOAIsSet(boolean value) {
    if (!value) {
      this.apiOA = null;
    }
  }

  public APIOAStatusChangeContent getApiOAStatusChange() {
    return this.apiOAStatusChange;
  }

  public UcMessageBody setApiOAStatusChange(APIOAStatusChangeContent apiOAStatusChange) {
    this.apiOAStatusChange = apiOAStatusChange;
    return this;
  }

  public void unsetApiOAStatusChange() {
    this.apiOAStatusChange = null;
  }

  /** Returns true if field apiOAStatusChange is set (has been assigned a value) and false otherwise */
  public boolean isSetApiOAStatusChange() {
    return this.apiOAStatusChange != null;
  }

  public void setApiOAStatusChangeIsSet(boolean value) {
    if (!value) {
      this.apiOAStatusChange = null;
    }
  }

  public APIAppChangeNotifyContent getApiChangeNotify() {
    return this.apiChangeNotify;
  }

  public UcMessageBody setApiChangeNotify(APIAppChangeNotifyContent apiChangeNotify) {
    this.apiChangeNotify = apiChangeNotify;
    return this;
  }

  public void unsetApiChangeNotify() {
    this.apiChangeNotify = null;
  }

  /** Returns true if field apiChangeNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetApiChangeNotify() {
    return this.apiChangeNotify != null;
  }

  public void setApiChangeNotifyIsSet(boolean value) {
    if (!value) {
      this.apiChangeNotify = null;
    }
  }

  public APIAppEventChangeNotify getApiEventNotify() {
    return this.apiEventNotify;
  }

  public UcMessageBody setApiEventNotify(APIAppEventChangeNotify apiEventNotify) {
    this.apiEventNotify = apiEventNotify;
    return this;
  }

  public void unsetApiEventNotify() {
    this.apiEventNotify = null;
  }

  /** Returns true if field apiEventNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetApiEventNotify() {
    return this.apiEventNotify != null;
  }

  public void setApiEventNotifyIsSet(boolean value) {
    if (!value) {
      this.apiEventNotify = null;
    }
  }

  public APICustomizedContent getApiCustomized() {
    return this.apiCustomized;
  }

  public UcMessageBody setApiCustomized(APICustomizedContent apiCustomized) {
    this.apiCustomized = apiCustomized;
    return this;
  }

  public void unsetApiCustomized() {
    this.apiCustomized = null;
  }

  /** Returns true if field apiCustomized is set (has been assigned a value) and false otherwise */
  public boolean isSetApiCustomized() {
    return this.apiCustomized != null;
  }

  public void setApiCustomizedIsSet(boolean value) {
    if (!value) {
      this.apiCustomized = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRESENCE:
      if (value == null) {
        unsetPresence();
      } else {
        setPresence((MessagePresence)value);
      }
      break;

    case PING:
      if (value == null) {
        unsetPing();
      } else {
        setPing((MessagePing)value);
      }
      break;

    case ACK_SENT:
      if (value == null) {
        unsetAckSent();
      } else {
        setAckSent((AckSent)value);
      }
      break;

    case ACK_RECEIVED:
      if (value == null) {
        unsetAckReceived();
      } else {
        setAckReceived((AckReceived)value);
      }
      break;

    case ACK_READ:
      if (value == null) {
        unsetAckRead();
      } else {
        setAckRead((AckRead)value);
      }
      break;

    case SLEEP:
      if (value == null) {
        unsetSleep();
      } else {
        setSleep((SleepSet)value);
      }
      break;

    case WAKEUP_CONFIRM:
      if (value == null) {
        unsetWakeupConfirm();
      } else {
        setWakeupConfirm((WakeupResult)value);
      }
      break;

    case ACK_PLAY:
      if (value == null) {
        unsetAckPlay();
      } else {
        setAckPlay((AckPlay)value);
      }
      break;

    case BATCH_ACK_READ:
      if (value == null) {
        unsetBatchAckRead();
      } else {
        setBatchAckRead((BatchAckRead)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((TextContent)value);
      }
      break;

    case MEDIA:
      if (value == null) {
        unsetMedia();
      } else {
        setMedia((MediaContent)value);
      }
      break;

    case GROUP_ADD:
      if (value == null) {
        unsetGroupAdd();
      } else {
        setGroupAdd((GroupMemberAddContent)value);
      }
      break;

    case GROUP_DEL:
      if (value == null) {
        unsetGroupDel();
      } else {
        setGroupDel((GroupMemberDelContent)value);
      }
      break;

    case GROUP_UPDATE:
      if (value == null) {
        unsetGroupUpdate();
      } else {
        setGroupUpdate((GroupNameUpdateContent)value);
      }
      break;

    case GROUP_CREATE:
      if (value == null) {
        unsetGroupCreate();
      } else {
        setGroupCreate((GroupCreateContent)value);
      }
      break;

    case GROUP_TOP:
      if (value == null) {
        unsetGroupTop();
      } else {
        setGroupTop((GroupTopContent)value);
      }
      break;

    case SUMMARY_CREATE:
      if (value == null) {
        unsetSummaryCreate();
      } else {
        setSummaryCreate((SummaryCreateContent)value);
      }
      break;

    case DOC_SEND:
      if (value == null) {
        unsetDocSend();
      } else {
        setDocSend((DocumentContent)value);
      }
      break;

    case ALERT_RULE:
      if (value == null) {
        unsetAlertRule();
      } else {
        setAlertRule((AlertRuleContent)value);
      }
      break;

    case GROUP_CLOSE:
      if (value == null) {
        unsetGroupClose();
      } else {
        setGroupClose((DiscussionClose)value);
      }
      break;

    case MSG_NOTIFY:
      if (value == null) {
        unsetMsgNotify();
      } else {
        setMsgNotify((MsgNotifyContent)value);
      }
      break;

    case GROUP_KICK:
      if (value == null) {
        unsetGroupKick();
      } else {
        setGroupKick((GroupMemberKickContent)value);
      }
      break;

    case CODE_CREATE:
      if (value == null) {
        unsetCodeCreate();
      } else {
        setCodeCreate((CodeCreateContent)value);
      }
      break;

    case CODE_DEL:
      if (value == null) {
        unsetCodeDel();
      } else {
        setCodeDel((CodeDelContent)value);
      }
      break;

    case DOC_DEL:
      if (value == null) {
        unsetDocDel();
      } else {
        setDocDel((DocumentDelContent)value);
      }
      break;

    case COMMENT_CREATE:
      if (value == null) {
        unsetCommentCreate();
      } else {
        setCommentCreate((CommentCreateContent)value);
      }
      break;

    case COMMENT_DEL:
      if (value == null) {
        unsetCommentDel();
      } else {
        setCommentDel((CommentDelContent)value);
      }
      break;

    case GROUP_AVATAR_UPDATE:
      if (value == null) {
        unsetGroupAvatarUpdate();
      } else {
        setGroupAvatarUpdate((GroupAvatarUpdateContent)value);
      }
      break;

    case GROUP_STATE:
      if (value == null) {
        unsetGroupState();
      } else {
        setGroupState((GroupStateUpdateContent)value);
      }
      break;

    case CLOUD_FILE:
      if (value == null) {
        unsetCloudFile();
      } else {
        setCloudFile((CloudFileContent)value);
      }
      break;

    case MEMBER_ROLE:
      if (value == null) {
        unsetMemberRole();
      } else {
        setMemberRole((MemberRoleUpdateContent)value);
      }
      break;

    case REPORT:
      if (value == null) {
        unsetReport();
      } else {
        setReport((ReportContent)value);
      }
      break;

    case REVOCATION:
      if (value == null) {
        unsetRevocation();
      } else {
        setRevocation((RevocationContent)value);
      }
      break;

    case GROUP_SCOPE:
      if (value == null) {
        unsetGroupScope();
      } else {
        setGroupScope((GroupScopeContent)value);
      }
      break;

    case OWNER_TRANSFER:
      if (value == null) {
        unsetOwnerTransfer();
      } else {
        setOwnerTransfer((GroupOwnerTransferContent)value);
      }
      break;

    case WELCOME:
      if (value == null) {
        unsetWelcome();
      } else {
        setWelcome((SystemWelcomeContent)value);
      }
      break;

    case CLIENT_UPDATE:
      if (value == null) {
        unsetClientUpdate();
      } else {
        setClientUpdate((ClientUpdateContent)value);
      }
      break;

    case COMPLETE_INFO:
      if (value == null) {
        unsetCompleteInfo();
      } else {
        setCompleteInfo((CompleteInfoContent)value);
      }
      break;

    case PWD_COMPLEX_UPDATE:
      if (value == null) {
        unsetPwdComplexUpdate();
      } else {
        setPwdComplexUpdate((PwdComplexUpdateContent)value);
      }
      break;

    case PWD_EXPIRE:
      if (value == null) {
        unsetPwdExpire();
      } else {
        setPwdExpire((PwdExpireContent)value);
      }
      break;

    case PC_GUIDE:
      if (value == null) {
        unsetPcGuide();
      } else {
        setPcGuide((PCClientGuide)value);
      }
      break;

    case MOBILE_GUIDE:
      if (value == null) {
        unsetMobileGuide();
      } else {
        setMobileGuide((MobileClientGuide)value);
      }
      break;

    case PWD_MODIFY:
      if (value == null) {
        unsetPwdModify();
      } else {
        setPwdModify((PasswordModifyContent)value);
      }
      break;

    case TAG_DEL:
      if (value == null) {
        unsetTagDel();
      } else {
        setTagDel((TagDelContent)value);
      }
      break;

    case REMIND:
      if (value == null) {
        unsetRemind();
      } else {
        setRemind((GroupRemindContent)value);
      }
      break;

    case DEPT_UPDATE:
      if (value == null) {
        unsetDeptUpdate();
      } else {
        setDeptUpdate((DeptUpdateContent)value);
      }
      break;

    case DEPT_TRANSFER:
      if (value == null) {
        unsetDeptTransfer();
      } else {
        setDeptTransfer((DeptTransferContent)value);
      }
      break;

    case POSITION_UPDATE:
      if (value == null) {
        unsetPositionUpdate();
      } else {
        setPositionUpdate((PositionUpdateContent)value);
      }
      break;

    case EMPLOYEE_ENTRY:
      if (value == null) {
        unsetEmployeeEntry();
      } else {
        setEmployeeEntry((EmployeeEntryContent)value);
      }
      break;

    case EMPLOYEE_LEAVE:
      if (value == null) {
        unsetEmployeeLeave();
      } else {
        setEmployeeLeave((EmployeeLeaveContent)value);
      }
      break;

    case EMPLOYEE_RIGHTS:
      if (value == null) {
        unsetEmployeeRights();
      } else {
        setEmployeeRights((EmployeeRightsChangeContent)value);
      }
      break;

    case DEPRT_PARENT_CHANGE:
      if (value == null) {
        unsetDeprtParentChange();
      } else {
        setDeprtParentChange((DeptParentChangeContent)value);
      }
      break;

    case COMPANY_JOIN:
      if (value == null) {
        unsetCompanyJoin();
      } else {
        setCompanyJoin((CompanyJoinContent)value);
      }
      break;

    case DEPT_DELETE:
      if (value == null) {
        unsetDeptDelete();
      } else {
        setDeptDelete((DeptDeleteContent)value);
      }
      break;

    case ENTRY_CONFIRM:
      if (value == null) {
        unsetEntryConfirm();
      } else {
        setEntryConfirm((EmployeeEntryConfirmContent)value);
      }
      break;

    case LEAVE_CONFIRM:
      if (value == null) {
        unsetLeaveConfirm();
      } else {
        setLeaveConfirm((EmployeeLeaveConfirmContent)value);
      }
      break;

    case DEPT_CONFIRM:
      if (value == null) {
        unsetDeptConfirm();
      } else {
        setDeptConfirm((DeptTransferConfirmContent)value);
      }
      break;

    case INSTANT_INVITE:
      if (value == null) {
        unsetInstantInvite();
      } else {
        setInstantInvite((InstantIQInviteContent)value);
      }
      break;

    case CONF_INVITE:
      if (value == null) {
        unsetConfInvite();
      } else {
        setConfInvite((IQInviteContent)value);
      }
      break;

    case CONF_RECEIVE:
      if (value == null) {
        unsetConfReceive();
      } else {
        setConfReceive((IQReceiveContent)value);
      }
      break;

    case CONF_REJECT:
      if (value == null) {
        unsetConfReject();
      } else {
        setConfReject((IQRejectContent)value);
      }
      break;

    case CONF_CANCEL:
      if (value == null) {
        unsetConfCancel();
      } else {
        setConfCancel((ConfCancelContent)value);
      }
      break;

    case CONF_ALERT:
      if (value == null) {
        unsetConfAlert();
      } else {
        setConfAlert((ConfAlertContent)value);
      }
      break;

    case INSTANT_RECEIVE:
      if (value == null) {
        unsetInstantReceive();
      } else {
        setInstantReceive((InstantIQReceiveContent)value);
      }
      break;

    case INSTANT_REJECT:
      if (value == null) {
        unsetInstantReject();
      } else {
        setInstantReject((InstantIQRejectContent)value);
      }
      break;

    case CONF_CHAT:
      if (value == null) {
        unsetConfChat();
      } else {
        setConfChat((ConfChatContent)value);
      }
      break;

    case CONF_SUMMARY:
      if (value == null) {
        unsetConfSummary();
      } else {
        setConfSummary((ConfSummaryContent)value);
      }
      break;

    case CALL_STATE:
      if (value == null) {
        unsetCallState();
      } else {
        setCallState((CallStateContent)value);
      }
      break;

    case CONF_UPLOAD:
      if (value == null) {
        unsetConfUpload();
      } else {
        setConfUpload((ConfUploadContent)value);
      }
      break;

    case CONF_DOC_DEL:
      if (value == null) {
        unsetConfDocDel();
      } else {
        setConfDocDel((ConfDelDocContent)value);
      }
      break;

    case CARD_UPDATE:
      if (value == null) {
        unsetCardUpdate();
      } else {
        setCardUpdate((CardUpdateContent)value);
      }
      break;

    case CONTACTER_ADD:
      if (value == null) {
        unsetContacterAdd();
      } else {
        setContacterAdd((ContacterAddContent)value);
      }
      break;

    case CONTACTER_DEL:
      if (value == null) {
        unsetContacterDel();
      } else {
        setContacterDel((ContacterDelContent)value);
      }
      break;

    case ATTENTION_CREATE:
      if (value == null) {
        unsetAttentionCreate();
      } else {
        setAttentionCreate((AttentionCreateContent)value);
      }
      break;

    case ATTENTION_CANCEL:
      if (value == null) {
        unsetAttentionCancel();
      } else {
        setAttentionCancel((AttentionCancelContent)value);
      }
      break;

    case TRANS_INVITE:
      if (value == null) {
        unsetTransInvite();
      } else {
        setTransInvite((FileTransmissionInviteContent)value);
      }
      break;

    case TRANS_RECEIVE:
      if (value == null) {
        unsetTransReceive();
      } else {
        setTransReceive((FileTransmissionReceiveContent)value);
      }
      break;

    case TRANS_REJECT:
      if (value == null) {
        unsetTransReject();
      } else {
        setTransReject((FileTransmissionRejectContent)value);
      }
      break;

    case TRANS_STOP:
      if (value == null) {
        unsetTransStop();
      } else {
        setTransStop((FileTransmissionStopContent)value);
      }
      break;

    case AUDIO_INVITE:
      if (value == null) {
        unsetAudioInvite();
      } else {
        setAudioInvite((AudioInviteContent)value);
      }
      break;

    case AUDIO_RECEIVE:
      if (value == null) {
        unsetAudioReceive();
      } else {
        setAudioReceive((AudioReceiveContent)value);
      }
      break;

    case AUDIO_REJECT:
      if (value == null) {
        unsetAudioReject();
      } else {
        setAudioReject((AudioRejectContent)value);
      }
      break;

    case AUDIO_STOP:
      if (value == null) {
        unsetAudioStop();
      } else {
        setAudioStop((AudioStopContent)value);
      }
      break;

    case CALL_RECENT:
      if (value == null) {
        unsetCallRecent();
      } else {
        setCallRecent((AudioRecentCallContent)value);
      }
      break;

    case CALL_BLOCK:
      if (value == null) {
        unsetCallBlock();
      } else {
        setCallBlock((AudioBlockCallContent)value);
      }
      break;

    case CALL_REJECT:
      if (value == null) {
        unsetCallReject();
      } else {
        setCallReject((AudioRejectCallContent)value);
      }
      break;

    case CALL_CANCEL:
      if (value == null) {
        unsetCallCancel();
      } else {
        setCallCancel((AudioCancelCallContent)value);
      }
      break;

    case CONF_SHARE:
      if (value == null) {
        unsetConfShare();
      } else {
        setConfShare((ConfShareContent)value);
      }
      break;

    case WB_CONTENT:
      if (value == null) {
        unsetWbContent();
      } else {
        setWbContent((WBMessageContent)value);
      }
      break;

    case REMOTE_ASSISTANCE_INVITE:
      if (value == null) {
        unsetRemoteAssistanceInvite();
      } else {
        setRemoteAssistanceInvite((RemoteAssistanceInviteContent)value);
      }
      break;

    case REMOTE_ASSISTANCE_ACCEPT:
      if (value == null) {
        unsetRemoteAssistanceAccept();
      } else {
        setRemoteAssistanceAccept((RemoteAssistanceAcceptContent)value);
      }
      break;

    case REMOTE_ASSISTANCE_REJECT:
      if (value == null) {
        unsetRemoteAssistanceReject();
      } else {
        setRemoteAssistanceReject((RemoteAssistanceRejectContent)value);
      }
      break;

    case REMOTE_ASSISTANCE_END:
      if (value == null) {
        unsetRemoteAssistanceEnd();
      } else {
        setRemoteAssistanceEnd((RemoteAssistanceEndContent)value);
      }
      break;

    case REMOTE_ASSISTANCE_CANCEL:
      if (value == null) {
        unsetRemoteAssistanceCancel();
      } else {
        setRemoteAssistanceCancel((RemoteAssistanceCancelContent)value);
      }
      break;

    case SESSION_TOP:
      if (value == null) {
        unsetSessionTop();
      } else {
        setSessionTop((SessionTopContent)value);
      }
      break;

    case AT_MESSAGE_READED:
      if (value == null) {
        unsetAtMessageReaded();
      } else {
        setAtMessageReaded((AtMessageReadedContent)value);
      }
      break;

    case LOGIN_NOTIFY:
      if (value == null) {
        unsetLoginNotify();
      } else {
        setLoginNotify((UserLoginNotifyContent)value);
      }
      break;

    case GROUP_SCOPE_NOTIFY:
      if (value == null) {
        unsetGroupScopeNotify();
      } else {
        setGroupScopeNotify((GroupScopeNotifyContent)value);
      }
      break;

    case CONTACTS_RELATION_NOTIFY:
      if (value == null) {
        unsetContactsRelationNotify();
      } else {
        setContactsRelationNotify((ContactsRelationNotifyContent)value);
      }
      break;

    case MEETING_ALERT_NOTIFY:
      if (value == null) {
        unsetMeetingAlertNotify();
      } else {
        setMeetingAlertNotify((MeetingAlertSettingNotifyContent)value);
      }
      break;

    case API_TEXT:
      if (value == null) {
        unsetApiText();
      } else {
        setApiText((APITextContent)value);
      }
      break;

    case API_IMAGE:
      if (value == null) {
        unsetApiImage();
      } else {
        setApiImage((APIImageContent)value);
      }
      break;

    case API_FILE:
      if (value == null) {
        unsetApiFile();
      } else {
        setApiFile((APIFileContent)value);
      }
      break;

    case API_ACK_SENT:
      if (value == null) {
        unsetApiAckSent();
      } else {
        setApiAckSent((APIAckSentContent)value);
      }
      break;

    case API_OA:
      if (value == null) {
        unsetApiOA();
      } else {
        setApiOA((APIOAContent)value);
      }
      break;

    case API_OASTATUS_CHANGE:
      if (value == null) {
        unsetApiOAStatusChange();
      } else {
        setApiOAStatusChange((APIOAStatusChangeContent)value);
      }
      break;

    case API_CHANGE_NOTIFY:
      if (value == null) {
        unsetApiChangeNotify();
      } else {
        setApiChangeNotify((APIAppChangeNotifyContent)value);
      }
      break;

    case API_EVENT_NOTIFY:
      if (value == null) {
        unsetApiEventNotify();
      } else {
        setApiEventNotify((APIAppEventChangeNotify)value);
      }
      break;

    case API_CUSTOMIZED:
      if (value == null) {
        unsetApiCustomized();
      } else {
        setApiCustomized((APICustomizedContent)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRESENCE:
      return getPresence();

    case PING:
      return getPing();

    case ACK_SENT:
      return getAckSent();

    case ACK_RECEIVED:
      return getAckReceived();

    case ACK_READ:
      return getAckRead();

    case SLEEP:
      return getSleep();

    case WAKEUP_CONFIRM:
      return getWakeupConfirm();

    case ACK_PLAY:
      return getAckPlay();

    case BATCH_ACK_READ:
      return getBatchAckRead();

    case TEXT:
      return getText();

    case MEDIA:
      return getMedia();

    case GROUP_ADD:
      return getGroupAdd();

    case GROUP_DEL:
      return getGroupDel();

    case GROUP_UPDATE:
      return getGroupUpdate();

    case GROUP_CREATE:
      return getGroupCreate();

    case GROUP_TOP:
      return getGroupTop();

    case SUMMARY_CREATE:
      return getSummaryCreate();

    case DOC_SEND:
      return getDocSend();

    case ALERT_RULE:
      return getAlertRule();

    case GROUP_CLOSE:
      return getGroupClose();

    case MSG_NOTIFY:
      return getMsgNotify();

    case GROUP_KICK:
      return getGroupKick();

    case CODE_CREATE:
      return getCodeCreate();

    case CODE_DEL:
      return getCodeDel();

    case DOC_DEL:
      return getDocDel();

    case COMMENT_CREATE:
      return getCommentCreate();

    case COMMENT_DEL:
      return getCommentDel();

    case GROUP_AVATAR_UPDATE:
      return getGroupAvatarUpdate();

    case GROUP_STATE:
      return getGroupState();

    case CLOUD_FILE:
      return getCloudFile();

    case MEMBER_ROLE:
      return getMemberRole();

    case REPORT:
      return getReport();

    case REVOCATION:
      return getRevocation();

    case GROUP_SCOPE:
      return getGroupScope();

    case OWNER_TRANSFER:
      return getOwnerTransfer();

    case WELCOME:
      return getWelcome();

    case CLIENT_UPDATE:
      return getClientUpdate();

    case COMPLETE_INFO:
      return getCompleteInfo();

    case PWD_COMPLEX_UPDATE:
      return getPwdComplexUpdate();

    case PWD_EXPIRE:
      return getPwdExpire();

    case PC_GUIDE:
      return getPcGuide();

    case MOBILE_GUIDE:
      return getMobileGuide();

    case PWD_MODIFY:
      return getPwdModify();

    case TAG_DEL:
      return getTagDel();

    case REMIND:
      return getRemind();

    case DEPT_UPDATE:
      return getDeptUpdate();

    case DEPT_TRANSFER:
      return getDeptTransfer();

    case POSITION_UPDATE:
      return getPositionUpdate();

    case EMPLOYEE_ENTRY:
      return getEmployeeEntry();

    case EMPLOYEE_LEAVE:
      return getEmployeeLeave();

    case EMPLOYEE_RIGHTS:
      return getEmployeeRights();

    case DEPRT_PARENT_CHANGE:
      return getDeprtParentChange();

    case COMPANY_JOIN:
      return getCompanyJoin();

    case DEPT_DELETE:
      return getDeptDelete();

    case ENTRY_CONFIRM:
      return getEntryConfirm();

    case LEAVE_CONFIRM:
      return getLeaveConfirm();

    case DEPT_CONFIRM:
      return getDeptConfirm();

    case INSTANT_INVITE:
      return getInstantInvite();

    case CONF_INVITE:
      return getConfInvite();

    case CONF_RECEIVE:
      return getConfReceive();

    case CONF_REJECT:
      return getConfReject();

    case CONF_CANCEL:
      return getConfCancel();

    case CONF_ALERT:
      return getConfAlert();

    case INSTANT_RECEIVE:
      return getInstantReceive();

    case INSTANT_REJECT:
      return getInstantReject();

    case CONF_CHAT:
      return getConfChat();

    case CONF_SUMMARY:
      return getConfSummary();

    case CALL_STATE:
      return getCallState();

    case CONF_UPLOAD:
      return getConfUpload();

    case CONF_DOC_DEL:
      return getConfDocDel();

    case CARD_UPDATE:
      return getCardUpdate();

    case CONTACTER_ADD:
      return getContacterAdd();

    case CONTACTER_DEL:
      return getContacterDel();

    case ATTENTION_CREATE:
      return getAttentionCreate();

    case ATTENTION_CANCEL:
      return getAttentionCancel();

    case TRANS_INVITE:
      return getTransInvite();

    case TRANS_RECEIVE:
      return getTransReceive();

    case TRANS_REJECT:
      return getTransReject();

    case TRANS_STOP:
      return getTransStop();

    case AUDIO_INVITE:
      return getAudioInvite();

    case AUDIO_RECEIVE:
      return getAudioReceive();

    case AUDIO_REJECT:
      return getAudioReject();

    case AUDIO_STOP:
      return getAudioStop();

    case CALL_RECENT:
      return getCallRecent();

    case CALL_BLOCK:
      return getCallBlock();

    case CALL_REJECT:
      return getCallReject();

    case CALL_CANCEL:
      return getCallCancel();

    case CONF_SHARE:
      return getConfShare();

    case WB_CONTENT:
      return getWbContent();

    case REMOTE_ASSISTANCE_INVITE:
      return getRemoteAssistanceInvite();

    case REMOTE_ASSISTANCE_ACCEPT:
      return getRemoteAssistanceAccept();

    case REMOTE_ASSISTANCE_REJECT:
      return getRemoteAssistanceReject();

    case REMOTE_ASSISTANCE_END:
      return getRemoteAssistanceEnd();

    case REMOTE_ASSISTANCE_CANCEL:
      return getRemoteAssistanceCancel();

    case SESSION_TOP:
      return getSessionTop();

    case AT_MESSAGE_READED:
      return getAtMessageReaded();

    case LOGIN_NOTIFY:
      return getLoginNotify();

    case GROUP_SCOPE_NOTIFY:
      return getGroupScopeNotify();

    case CONTACTS_RELATION_NOTIFY:
      return getContactsRelationNotify();

    case MEETING_ALERT_NOTIFY:
      return getMeetingAlertNotify();

    case API_TEXT:
      return getApiText();

    case API_IMAGE:
      return getApiImage();

    case API_FILE:
      return getApiFile();

    case API_ACK_SENT:
      return getApiAckSent();

    case API_OA:
      return getApiOA();

    case API_OASTATUS_CHANGE:
      return getApiOAStatusChange();

    case API_CHANGE_NOTIFY:
      return getApiChangeNotify();

    case API_EVENT_NOTIFY:
      return getApiEventNotify();

    case API_CUSTOMIZED:
      return getApiCustomized();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRESENCE:
      return isSetPresence();
    case PING:
      return isSetPing();
    case ACK_SENT:
      return isSetAckSent();
    case ACK_RECEIVED:
      return isSetAckReceived();
    case ACK_READ:
      return isSetAckRead();
    case SLEEP:
      return isSetSleep();
    case WAKEUP_CONFIRM:
      return isSetWakeupConfirm();
    case ACK_PLAY:
      return isSetAckPlay();
    case BATCH_ACK_READ:
      return isSetBatchAckRead();
    case TEXT:
      return isSetText();
    case MEDIA:
      return isSetMedia();
    case GROUP_ADD:
      return isSetGroupAdd();
    case GROUP_DEL:
      return isSetGroupDel();
    case GROUP_UPDATE:
      return isSetGroupUpdate();
    case GROUP_CREATE:
      return isSetGroupCreate();
    case GROUP_TOP:
      return isSetGroupTop();
    case SUMMARY_CREATE:
      return isSetSummaryCreate();
    case DOC_SEND:
      return isSetDocSend();
    case ALERT_RULE:
      return isSetAlertRule();
    case GROUP_CLOSE:
      return isSetGroupClose();
    case MSG_NOTIFY:
      return isSetMsgNotify();
    case GROUP_KICK:
      return isSetGroupKick();
    case CODE_CREATE:
      return isSetCodeCreate();
    case CODE_DEL:
      return isSetCodeDel();
    case DOC_DEL:
      return isSetDocDel();
    case COMMENT_CREATE:
      return isSetCommentCreate();
    case COMMENT_DEL:
      return isSetCommentDel();
    case GROUP_AVATAR_UPDATE:
      return isSetGroupAvatarUpdate();
    case GROUP_STATE:
      return isSetGroupState();
    case CLOUD_FILE:
      return isSetCloudFile();
    case MEMBER_ROLE:
      return isSetMemberRole();
    case REPORT:
      return isSetReport();
    case REVOCATION:
      return isSetRevocation();
    case GROUP_SCOPE:
      return isSetGroupScope();
    case OWNER_TRANSFER:
      return isSetOwnerTransfer();
    case WELCOME:
      return isSetWelcome();
    case CLIENT_UPDATE:
      return isSetClientUpdate();
    case COMPLETE_INFO:
      return isSetCompleteInfo();
    case PWD_COMPLEX_UPDATE:
      return isSetPwdComplexUpdate();
    case PWD_EXPIRE:
      return isSetPwdExpire();
    case PC_GUIDE:
      return isSetPcGuide();
    case MOBILE_GUIDE:
      return isSetMobileGuide();
    case PWD_MODIFY:
      return isSetPwdModify();
    case TAG_DEL:
      return isSetTagDel();
    case REMIND:
      return isSetRemind();
    case DEPT_UPDATE:
      return isSetDeptUpdate();
    case DEPT_TRANSFER:
      return isSetDeptTransfer();
    case POSITION_UPDATE:
      return isSetPositionUpdate();
    case EMPLOYEE_ENTRY:
      return isSetEmployeeEntry();
    case EMPLOYEE_LEAVE:
      return isSetEmployeeLeave();
    case EMPLOYEE_RIGHTS:
      return isSetEmployeeRights();
    case DEPRT_PARENT_CHANGE:
      return isSetDeprtParentChange();
    case COMPANY_JOIN:
      return isSetCompanyJoin();
    case DEPT_DELETE:
      return isSetDeptDelete();
    case ENTRY_CONFIRM:
      return isSetEntryConfirm();
    case LEAVE_CONFIRM:
      return isSetLeaveConfirm();
    case DEPT_CONFIRM:
      return isSetDeptConfirm();
    case INSTANT_INVITE:
      return isSetInstantInvite();
    case CONF_INVITE:
      return isSetConfInvite();
    case CONF_RECEIVE:
      return isSetConfReceive();
    case CONF_REJECT:
      return isSetConfReject();
    case CONF_CANCEL:
      return isSetConfCancel();
    case CONF_ALERT:
      return isSetConfAlert();
    case INSTANT_RECEIVE:
      return isSetInstantReceive();
    case INSTANT_REJECT:
      return isSetInstantReject();
    case CONF_CHAT:
      return isSetConfChat();
    case CONF_SUMMARY:
      return isSetConfSummary();
    case CALL_STATE:
      return isSetCallState();
    case CONF_UPLOAD:
      return isSetConfUpload();
    case CONF_DOC_DEL:
      return isSetConfDocDel();
    case CARD_UPDATE:
      return isSetCardUpdate();
    case CONTACTER_ADD:
      return isSetContacterAdd();
    case CONTACTER_DEL:
      return isSetContacterDel();
    case ATTENTION_CREATE:
      return isSetAttentionCreate();
    case ATTENTION_CANCEL:
      return isSetAttentionCancel();
    case TRANS_INVITE:
      return isSetTransInvite();
    case TRANS_RECEIVE:
      return isSetTransReceive();
    case TRANS_REJECT:
      return isSetTransReject();
    case TRANS_STOP:
      return isSetTransStop();
    case AUDIO_INVITE:
      return isSetAudioInvite();
    case AUDIO_RECEIVE:
      return isSetAudioReceive();
    case AUDIO_REJECT:
      return isSetAudioReject();
    case AUDIO_STOP:
      return isSetAudioStop();
    case CALL_RECENT:
      return isSetCallRecent();
    case CALL_BLOCK:
      return isSetCallBlock();
    case CALL_REJECT:
      return isSetCallReject();
    case CALL_CANCEL:
      return isSetCallCancel();
    case CONF_SHARE:
      return isSetConfShare();
    case WB_CONTENT:
      return isSetWbContent();
    case REMOTE_ASSISTANCE_INVITE:
      return isSetRemoteAssistanceInvite();
    case REMOTE_ASSISTANCE_ACCEPT:
      return isSetRemoteAssistanceAccept();
    case REMOTE_ASSISTANCE_REJECT:
      return isSetRemoteAssistanceReject();
    case REMOTE_ASSISTANCE_END:
      return isSetRemoteAssistanceEnd();
    case REMOTE_ASSISTANCE_CANCEL:
      return isSetRemoteAssistanceCancel();
    case SESSION_TOP:
      return isSetSessionTop();
    case AT_MESSAGE_READED:
      return isSetAtMessageReaded();
    case LOGIN_NOTIFY:
      return isSetLoginNotify();
    case GROUP_SCOPE_NOTIFY:
      return isSetGroupScopeNotify();
    case CONTACTS_RELATION_NOTIFY:
      return isSetContactsRelationNotify();
    case MEETING_ALERT_NOTIFY:
      return isSetMeetingAlertNotify();
    case API_TEXT:
      return isSetApiText();
    case API_IMAGE:
      return isSetApiImage();
    case API_FILE:
      return isSetApiFile();
    case API_ACK_SENT:
      return isSetApiAckSent();
    case API_OA:
      return isSetApiOA();
    case API_OASTATUS_CHANGE:
      return isSetApiOAStatusChange();
    case API_CHANGE_NOTIFY:
      return isSetApiChangeNotify();
    case API_EVENT_NOTIFY:
      return isSetApiEventNotify();
    case API_CUSTOMIZED:
      return isSetApiCustomized();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UcMessageBody)
      return this.equals((UcMessageBody)that);
    return false;
  }

  public boolean equals(UcMessageBody that) {
    if (that == null)
      return false;

    boolean this_present_presence = true && this.isSetPresence();
    boolean that_present_presence = true && that.isSetPresence();
    if (this_present_presence || that_present_presence) {
      if (!(this_present_presence && that_present_presence))
        return false;
      if (!this.presence.equals(that.presence))
        return false;
    }

    boolean this_present_ping = true && this.isSetPing();
    boolean that_present_ping = true && that.isSetPing();
    if (this_present_ping || that_present_ping) {
      if (!(this_present_ping && that_present_ping))
        return false;
      if (!this.ping.equals(that.ping))
        return false;
    }

    boolean this_present_ackSent = true && this.isSetAckSent();
    boolean that_present_ackSent = true && that.isSetAckSent();
    if (this_present_ackSent || that_present_ackSent) {
      if (!(this_present_ackSent && that_present_ackSent))
        return false;
      if (!this.ackSent.equals(that.ackSent))
        return false;
    }

    boolean this_present_ackReceived = true && this.isSetAckReceived();
    boolean that_present_ackReceived = true && that.isSetAckReceived();
    if (this_present_ackReceived || that_present_ackReceived) {
      if (!(this_present_ackReceived && that_present_ackReceived))
        return false;
      if (!this.ackReceived.equals(that.ackReceived))
        return false;
    }

    boolean this_present_ackRead = true && this.isSetAckRead();
    boolean that_present_ackRead = true && that.isSetAckRead();
    if (this_present_ackRead || that_present_ackRead) {
      if (!(this_present_ackRead && that_present_ackRead))
        return false;
      if (!this.ackRead.equals(that.ackRead))
        return false;
    }

    boolean this_present_sleep = true && this.isSetSleep();
    boolean that_present_sleep = true && that.isSetSleep();
    if (this_present_sleep || that_present_sleep) {
      if (!(this_present_sleep && that_present_sleep))
        return false;
      if (!this.sleep.equals(that.sleep))
        return false;
    }

    boolean this_present_wakeupConfirm = true && this.isSetWakeupConfirm();
    boolean that_present_wakeupConfirm = true && that.isSetWakeupConfirm();
    if (this_present_wakeupConfirm || that_present_wakeupConfirm) {
      if (!(this_present_wakeupConfirm && that_present_wakeupConfirm))
        return false;
      if (!this.wakeupConfirm.equals(that.wakeupConfirm))
        return false;
    }

    boolean this_present_ackPlay = true && this.isSetAckPlay();
    boolean that_present_ackPlay = true && that.isSetAckPlay();
    if (this_present_ackPlay || that_present_ackPlay) {
      if (!(this_present_ackPlay && that_present_ackPlay))
        return false;
      if (!this.ackPlay.equals(that.ackPlay))
        return false;
    }

    boolean this_present_batchAckRead = true && this.isSetBatchAckRead();
    boolean that_present_batchAckRead = true && that.isSetBatchAckRead();
    if (this_present_batchAckRead || that_present_batchAckRead) {
      if (!(this_present_batchAckRead && that_present_batchAckRead))
        return false;
      if (!this.batchAckRead.equals(that.batchAckRead))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_media = true && this.isSetMedia();
    boolean that_present_media = true && that.isSetMedia();
    if (this_present_media || that_present_media) {
      if (!(this_present_media && that_present_media))
        return false;
      if (!this.media.equals(that.media))
        return false;
    }

    boolean this_present_groupAdd = true && this.isSetGroupAdd();
    boolean that_present_groupAdd = true && that.isSetGroupAdd();
    if (this_present_groupAdd || that_present_groupAdd) {
      if (!(this_present_groupAdd && that_present_groupAdd))
        return false;
      if (!this.groupAdd.equals(that.groupAdd))
        return false;
    }

    boolean this_present_groupDel = true && this.isSetGroupDel();
    boolean that_present_groupDel = true && that.isSetGroupDel();
    if (this_present_groupDel || that_present_groupDel) {
      if (!(this_present_groupDel && that_present_groupDel))
        return false;
      if (!this.groupDel.equals(that.groupDel))
        return false;
    }

    boolean this_present_groupUpdate = true && this.isSetGroupUpdate();
    boolean that_present_groupUpdate = true && that.isSetGroupUpdate();
    if (this_present_groupUpdate || that_present_groupUpdate) {
      if (!(this_present_groupUpdate && that_present_groupUpdate))
        return false;
      if (!this.groupUpdate.equals(that.groupUpdate))
        return false;
    }

    boolean this_present_groupCreate = true && this.isSetGroupCreate();
    boolean that_present_groupCreate = true && that.isSetGroupCreate();
    if (this_present_groupCreate || that_present_groupCreate) {
      if (!(this_present_groupCreate && that_present_groupCreate))
        return false;
      if (!this.groupCreate.equals(that.groupCreate))
        return false;
    }

    boolean this_present_groupTop = true && this.isSetGroupTop();
    boolean that_present_groupTop = true && that.isSetGroupTop();
    if (this_present_groupTop || that_present_groupTop) {
      if (!(this_present_groupTop && that_present_groupTop))
        return false;
      if (!this.groupTop.equals(that.groupTop))
        return false;
    }

    boolean this_present_summaryCreate = true && this.isSetSummaryCreate();
    boolean that_present_summaryCreate = true && that.isSetSummaryCreate();
    if (this_present_summaryCreate || that_present_summaryCreate) {
      if (!(this_present_summaryCreate && that_present_summaryCreate))
        return false;
      if (!this.summaryCreate.equals(that.summaryCreate))
        return false;
    }

    boolean this_present_docSend = true && this.isSetDocSend();
    boolean that_present_docSend = true && that.isSetDocSend();
    if (this_present_docSend || that_present_docSend) {
      if (!(this_present_docSend && that_present_docSend))
        return false;
      if (!this.docSend.equals(that.docSend))
        return false;
    }

    boolean this_present_alertRule = true && this.isSetAlertRule();
    boolean that_present_alertRule = true && that.isSetAlertRule();
    if (this_present_alertRule || that_present_alertRule) {
      if (!(this_present_alertRule && that_present_alertRule))
        return false;
      if (!this.alertRule.equals(that.alertRule))
        return false;
    }

    boolean this_present_groupClose = true && this.isSetGroupClose();
    boolean that_present_groupClose = true && that.isSetGroupClose();
    if (this_present_groupClose || that_present_groupClose) {
      if (!(this_present_groupClose && that_present_groupClose))
        return false;
      if (!this.groupClose.equals(that.groupClose))
        return false;
    }

    boolean this_present_msgNotify = true && this.isSetMsgNotify();
    boolean that_present_msgNotify = true && that.isSetMsgNotify();
    if (this_present_msgNotify || that_present_msgNotify) {
      if (!(this_present_msgNotify && that_present_msgNotify))
        return false;
      if (!this.msgNotify.equals(that.msgNotify))
        return false;
    }

    boolean this_present_groupKick = true && this.isSetGroupKick();
    boolean that_present_groupKick = true && that.isSetGroupKick();
    if (this_present_groupKick || that_present_groupKick) {
      if (!(this_present_groupKick && that_present_groupKick))
        return false;
      if (!this.groupKick.equals(that.groupKick))
        return false;
    }

    boolean this_present_codeCreate = true && this.isSetCodeCreate();
    boolean that_present_codeCreate = true && that.isSetCodeCreate();
    if (this_present_codeCreate || that_present_codeCreate) {
      if (!(this_present_codeCreate && that_present_codeCreate))
        return false;
      if (!this.codeCreate.equals(that.codeCreate))
        return false;
    }

    boolean this_present_codeDel = true && this.isSetCodeDel();
    boolean that_present_codeDel = true && that.isSetCodeDel();
    if (this_present_codeDel || that_present_codeDel) {
      if (!(this_present_codeDel && that_present_codeDel))
        return false;
      if (!this.codeDel.equals(that.codeDel))
        return false;
    }

    boolean this_present_docDel = true && this.isSetDocDel();
    boolean that_present_docDel = true && that.isSetDocDel();
    if (this_present_docDel || that_present_docDel) {
      if (!(this_present_docDel && that_present_docDel))
        return false;
      if (!this.docDel.equals(that.docDel))
        return false;
    }

    boolean this_present_commentCreate = true && this.isSetCommentCreate();
    boolean that_present_commentCreate = true && that.isSetCommentCreate();
    if (this_present_commentCreate || that_present_commentCreate) {
      if (!(this_present_commentCreate && that_present_commentCreate))
        return false;
      if (!this.commentCreate.equals(that.commentCreate))
        return false;
    }

    boolean this_present_commentDel = true && this.isSetCommentDel();
    boolean that_present_commentDel = true && that.isSetCommentDel();
    if (this_present_commentDel || that_present_commentDel) {
      if (!(this_present_commentDel && that_present_commentDel))
        return false;
      if (!this.commentDel.equals(that.commentDel))
        return false;
    }

    boolean this_present_groupAvatarUpdate = true && this.isSetGroupAvatarUpdate();
    boolean that_present_groupAvatarUpdate = true && that.isSetGroupAvatarUpdate();
    if (this_present_groupAvatarUpdate || that_present_groupAvatarUpdate) {
      if (!(this_present_groupAvatarUpdate && that_present_groupAvatarUpdate))
        return false;
      if (!this.groupAvatarUpdate.equals(that.groupAvatarUpdate))
        return false;
    }

    boolean this_present_groupState = true && this.isSetGroupState();
    boolean that_present_groupState = true && that.isSetGroupState();
    if (this_present_groupState || that_present_groupState) {
      if (!(this_present_groupState && that_present_groupState))
        return false;
      if (!this.groupState.equals(that.groupState))
        return false;
    }

    boolean this_present_cloudFile = true && this.isSetCloudFile();
    boolean that_present_cloudFile = true && that.isSetCloudFile();
    if (this_present_cloudFile || that_present_cloudFile) {
      if (!(this_present_cloudFile && that_present_cloudFile))
        return false;
      if (!this.cloudFile.equals(that.cloudFile))
        return false;
    }

    boolean this_present_memberRole = true && this.isSetMemberRole();
    boolean that_present_memberRole = true && that.isSetMemberRole();
    if (this_present_memberRole || that_present_memberRole) {
      if (!(this_present_memberRole && that_present_memberRole))
        return false;
      if (!this.memberRole.equals(that.memberRole))
        return false;
    }

    boolean this_present_report = true && this.isSetReport();
    boolean that_present_report = true && that.isSetReport();
    if (this_present_report || that_present_report) {
      if (!(this_present_report && that_present_report))
        return false;
      if (!this.report.equals(that.report))
        return false;
    }

    boolean this_present_revocation = true && this.isSetRevocation();
    boolean that_present_revocation = true && that.isSetRevocation();
    if (this_present_revocation || that_present_revocation) {
      if (!(this_present_revocation && that_present_revocation))
        return false;
      if (!this.revocation.equals(that.revocation))
        return false;
    }

    boolean this_present_groupScope = true && this.isSetGroupScope();
    boolean that_present_groupScope = true && that.isSetGroupScope();
    if (this_present_groupScope || that_present_groupScope) {
      if (!(this_present_groupScope && that_present_groupScope))
        return false;
      if (!this.groupScope.equals(that.groupScope))
        return false;
    }

    boolean this_present_ownerTransfer = true && this.isSetOwnerTransfer();
    boolean that_present_ownerTransfer = true && that.isSetOwnerTransfer();
    if (this_present_ownerTransfer || that_present_ownerTransfer) {
      if (!(this_present_ownerTransfer && that_present_ownerTransfer))
        return false;
      if (!this.ownerTransfer.equals(that.ownerTransfer))
        return false;
    }

    boolean this_present_welcome = true && this.isSetWelcome();
    boolean that_present_welcome = true && that.isSetWelcome();
    if (this_present_welcome || that_present_welcome) {
      if (!(this_present_welcome && that_present_welcome))
        return false;
      if (!this.welcome.equals(that.welcome))
        return false;
    }

    boolean this_present_clientUpdate = true && this.isSetClientUpdate();
    boolean that_present_clientUpdate = true && that.isSetClientUpdate();
    if (this_present_clientUpdate || that_present_clientUpdate) {
      if (!(this_present_clientUpdate && that_present_clientUpdate))
        return false;
      if (!this.clientUpdate.equals(that.clientUpdate))
        return false;
    }

    boolean this_present_completeInfo = true && this.isSetCompleteInfo();
    boolean that_present_completeInfo = true && that.isSetCompleteInfo();
    if (this_present_completeInfo || that_present_completeInfo) {
      if (!(this_present_completeInfo && that_present_completeInfo))
        return false;
      if (!this.completeInfo.equals(that.completeInfo))
        return false;
    }

    boolean this_present_pwdComplexUpdate = true && this.isSetPwdComplexUpdate();
    boolean that_present_pwdComplexUpdate = true && that.isSetPwdComplexUpdate();
    if (this_present_pwdComplexUpdate || that_present_pwdComplexUpdate) {
      if (!(this_present_pwdComplexUpdate && that_present_pwdComplexUpdate))
        return false;
      if (!this.pwdComplexUpdate.equals(that.pwdComplexUpdate))
        return false;
    }

    boolean this_present_pwdExpire = true && this.isSetPwdExpire();
    boolean that_present_pwdExpire = true && that.isSetPwdExpire();
    if (this_present_pwdExpire || that_present_pwdExpire) {
      if (!(this_present_pwdExpire && that_present_pwdExpire))
        return false;
      if (!this.pwdExpire.equals(that.pwdExpire))
        return false;
    }

    boolean this_present_pcGuide = true && this.isSetPcGuide();
    boolean that_present_pcGuide = true && that.isSetPcGuide();
    if (this_present_pcGuide || that_present_pcGuide) {
      if (!(this_present_pcGuide && that_present_pcGuide))
        return false;
      if (!this.pcGuide.equals(that.pcGuide))
        return false;
    }

    boolean this_present_mobileGuide = true && this.isSetMobileGuide();
    boolean that_present_mobileGuide = true && that.isSetMobileGuide();
    if (this_present_mobileGuide || that_present_mobileGuide) {
      if (!(this_present_mobileGuide && that_present_mobileGuide))
        return false;
      if (!this.mobileGuide.equals(that.mobileGuide))
        return false;
    }

    boolean this_present_pwdModify = true && this.isSetPwdModify();
    boolean that_present_pwdModify = true && that.isSetPwdModify();
    if (this_present_pwdModify || that_present_pwdModify) {
      if (!(this_present_pwdModify && that_present_pwdModify))
        return false;
      if (!this.pwdModify.equals(that.pwdModify))
        return false;
    }

    boolean this_present_tagDel = true && this.isSetTagDel();
    boolean that_present_tagDel = true && that.isSetTagDel();
    if (this_present_tagDel || that_present_tagDel) {
      if (!(this_present_tagDel && that_present_tagDel))
        return false;
      if (!this.tagDel.equals(that.tagDel))
        return false;
    }

    boolean this_present_remind = true && this.isSetRemind();
    boolean that_present_remind = true && that.isSetRemind();
    if (this_present_remind || that_present_remind) {
      if (!(this_present_remind && that_present_remind))
        return false;
      if (!this.remind.equals(that.remind))
        return false;
    }

    boolean this_present_deptUpdate = true && this.isSetDeptUpdate();
    boolean that_present_deptUpdate = true && that.isSetDeptUpdate();
    if (this_present_deptUpdate || that_present_deptUpdate) {
      if (!(this_present_deptUpdate && that_present_deptUpdate))
        return false;
      if (!this.deptUpdate.equals(that.deptUpdate))
        return false;
    }

    boolean this_present_deptTransfer = true && this.isSetDeptTransfer();
    boolean that_present_deptTransfer = true && that.isSetDeptTransfer();
    if (this_present_deptTransfer || that_present_deptTransfer) {
      if (!(this_present_deptTransfer && that_present_deptTransfer))
        return false;
      if (!this.deptTransfer.equals(that.deptTransfer))
        return false;
    }

    boolean this_present_positionUpdate = true && this.isSetPositionUpdate();
    boolean that_present_positionUpdate = true && that.isSetPositionUpdate();
    if (this_present_positionUpdate || that_present_positionUpdate) {
      if (!(this_present_positionUpdate && that_present_positionUpdate))
        return false;
      if (!this.positionUpdate.equals(that.positionUpdate))
        return false;
    }

    boolean this_present_employeeEntry = true && this.isSetEmployeeEntry();
    boolean that_present_employeeEntry = true && that.isSetEmployeeEntry();
    if (this_present_employeeEntry || that_present_employeeEntry) {
      if (!(this_present_employeeEntry && that_present_employeeEntry))
        return false;
      if (!this.employeeEntry.equals(that.employeeEntry))
        return false;
    }

    boolean this_present_employeeLeave = true && this.isSetEmployeeLeave();
    boolean that_present_employeeLeave = true && that.isSetEmployeeLeave();
    if (this_present_employeeLeave || that_present_employeeLeave) {
      if (!(this_present_employeeLeave && that_present_employeeLeave))
        return false;
      if (!this.employeeLeave.equals(that.employeeLeave))
        return false;
    }

    boolean this_present_employeeRights = true && this.isSetEmployeeRights();
    boolean that_present_employeeRights = true && that.isSetEmployeeRights();
    if (this_present_employeeRights || that_present_employeeRights) {
      if (!(this_present_employeeRights && that_present_employeeRights))
        return false;
      if (!this.employeeRights.equals(that.employeeRights))
        return false;
    }

    boolean this_present_deprtParentChange = true && this.isSetDeprtParentChange();
    boolean that_present_deprtParentChange = true && that.isSetDeprtParentChange();
    if (this_present_deprtParentChange || that_present_deprtParentChange) {
      if (!(this_present_deprtParentChange && that_present_deprtParentChange))
        return false;
      if (!this.deprtParentChange.equals(that.deprtParentChange))
        return false;
    }

    boolean this_present_companyJoin = true && this.isSetCompanyJoin();
    boolean that_present_companyJoin = true && that.isSetCompanyJoin();
    if (this_present_companyJoin || that_present_companyJoin) {
      if (!(this_present_companyJoin && that_present_companyJoin))
        return false;
      if (!this.companyJoin.equals(that.companyJoin))
        return false;
    }

    boolean this_present_deptDelete = true && this.isSetDeptDelete();
    boolean that_present_deptDelete = true && that.isSetDeptDelete();
    if (this_present_deptDelete || that_present_deptDelete) {
      if (!(this_present_deptDelete && that_present_deptDelete))
        return false;
      if (!this.deptDelete.equals(that.deptDelete))
        return false;
    }

    boolean this_present_entryConfirm = true && this.isSetEntryConfirm();
    boolean that_present_entryConfirm = true && that.isSetEntryConfirm();
    if (this_present_entryConfirm || that_present_entryConfirm) {
      if (!(this_present_entryConfirm && that_present_entryConfirm))
        return false;
      if (!this.entryConfirm.equals(that.entryConfirm))
        return false;
    }

    boolean this_present_leaveConfirm = true && this.isSetLeaveConfirm();
    boolean that_present_leaveConfirm = true && that.isSetLeaveConfirm();
    if (this_present_leaveConfirm || that_present_leaveConfirm) {
      if (!(this_present_leaveConfirm && that_present_leaveConfirm))
        return false;
      if (!this.leaveConfirm.equals(that.leaveConfirm))
        return false;
    }

    boolean this_present_deptConfirm = true && this.isSetDeptConfirm();
    boolean that_present_deptConfirm = true && that.isSetDeptConfirm();
    if (this_present_deptConfirm || that_present_deptConfirm) {
      if (!(this_present_deptConfirm && that_present_deptConfirm))
        return false;
      if (!this.deptConfirm.equals(that.deptConfirm))
        return false;
    }

    boolean this_present_instantInvite = true && this.isSetInstantInvite();
    boolean that_present_instantInvite = true && that.isSetInstantInvite();
    if (this_present_instantInvite || that_present_instantInvite) {
      if (!(this_present_instantInvite && that_present_instantInvite))
        return false;
      if (!this.instantInvite.equals(that.instantInvite))
        return false;
    }

    boolean this_present_confInvite = true && this.isSetConfInvite();
    boolean that_present_confInvite = true && that.isSetConfInvite();
    if (this_present_confInvite || that_present_confInvite) {
      if (!(this_present_confInvite && that_present_confInvite))
        return false;
      if (!this.confInvite.equals(that.confInvite))
        return false;
    }

    boolean this_present_confReceive = true && this.isSetConfReceive();
    boolean that_present_confReceive = true && that.isSetConfReceive();
    if (this_present_confReceive || that_present_confReceive) {
      if (!(this_present_confReceive && that_present_confReceive))
        return false;
      if (!this.confReceive.equals(that.confReceive))
        return false;
    }

    boolean this_present_confReject = true && this.isSetConfReject();
    boolean that_present_confReject = true && that.isSetConfReject();
    if (this_present_confReject || that_present_confReject) {
      if (!(this_present_confReject && that_present_confReject))
        return false;
      if (!this.confReject.equals(that.confReject))
        return false;
    }

    boolean this_present_confCancel = true && this.isSetConfCancel();
    boolean that_present_confCancel = true && that.isSetConfCancel();
    if (this_present_confCancel || that_present_confCancel) {
      if (!(this_present_confCancel && that_present_confCancel))
        return false;
      if (!this.confCancel.equals(that.confCancel))
        return false;
    }

    boolean this_present_confAlert = true && this.isSetConfAlert();
    boolean that_present_confAlert = true && that.isSetConfAlert();
    if (this_present_confAlert || that_present_confAlert) {
      if (!(this_present_confAlert && that_present_confAlert))
        return false;
      if (!this.confAlert.equals(that.confAlert))
        return false;
    }

    boolean this_present_instantReceive = true && this.isSetInstantReceive();
    boolean that_present_instantReceive = true && that.isSetInstantReceive();
    if (this_present_instantReceive || that_present_instantReceive) {
      if (!(this_present_instantReceive && that_present_instantReceive))
        return false;
      if (!this.instantReceive.equals(that.instantReceive))
        return false;
    }

    boolean this_present_instantReject = true && this.isSetInstantReject();
    boolean that_present_instantReject = true && that.isSetInstantReject();
    if (this_present_instantReject || that_present_instantReject) {
      if (!(this_present_instantReject && that_present_instantReject))
        return false;
      if (!this.instantReject.equals(that.instantReject))
        return false;
    }

    boolean this_present_confChat = true && this.isSetConfChat();
    boolean that_present_confChat = true && that.isSetConfChat();
    if (this_present_confChat || that_present_confChat) {
      if (!(this_present_confChat && that_present_confChat))
        return false;
      if (!this.confChat.equals(that.confChat))
        return false;
    }

    boolean this_present_confSummary = true && this.isSetConfSummary();
    boolean that_present_confSummary = true && that.isSetConfSummary();
    if (this_present_confSummary || that_present_confSummary) {
      if (!(this_present_confSummary && that_present_confSummary))
        return false;
      if (!this.confSummary.equals(that.confSummary))
        return false;
    }

    boolean this_present_callState = true && this.isSetCallState();
    boolean that_present_callState = true && that.isSetCallState();
    if (this_present_callState || that_present_callState) {
      if (!(this_present_callState && that_present_callState))
        return false;
      if (!this.callState.equals(that.callState))
        return false;
    }

    boolean this_present_confUpload = true && this.isSetConfUpload();
    boolean that_present_confUpload = true && that.isSetConfUpload();
    if (this_present_confUpload || that_present_confUpload) {
      if (!(this_present_confUpload && that_present_confUpload))
        return false;
      if (!this.confUpload.equals(that.confUpload))
        return false;
    }

    boolean this_present_confDocDel = true && this.isSetConfDocDel();
    boolean that_present_confDocDel = true && that.isSetConfDocDel();
    if (this_present_confDocDel || that_present_confDocDel) {
      if (!(this_present_confDocDel && that_present_confDocDel))
        return false;
      if (!this.confDocDel.equals(that.confDocDel))
        return false;
    }

    boolean this_present_cardUpdate = true && this.isSetCardUpdate();
    boolean that_present_cardUpdate = true && that.isSetCardUpdate();
    if (this_present_cardUpdate || that_present_cardUpdate) {
      if (!(this_present_cardUpdate && that_present_cardUpdate))
        return false;
      if (!this.cardUpdate.equals(that.cardUpdate))
        return false;
    }

    boolean this_present_contacterAdd = true && this.isSetContacterAdd();
    boolean that_present_contacterAdd = true && that.isSetContacterAdd();
    if (this_present_contacterAdd || that_present_contacterAdd) {
      if (!(this_present_contacterAdd && that_present_contacterAdd))
        return false;
      if (!this.contacterAdd.equals(that.contacterAdd))
        return false;
    }

    boolean this_present_contacterDel = true && this.isSetContacterDel();
    boolean that_present_contacterDel = true && that.isSetContacterDel();
    if (this_present_contacterDel || that_present_contacterDel) {
      if (!(this_present_contacterDel && that_present_contacterDel))
        return false;
      if (!this.contacterDel.equals(that.contacterDel))
        return false;
    }

    boolean this_present_attentionCreate = true && this.isSetAttentionCreate();
    boolean that_present_attentionCreate = true && that.isSetAttentionCreate();
    if (this_present_attentionCreate || that_present_attentionCreate) {
      if (!(this_present_attentionCreate && that_present_attentionCreate))
        return false;
      if (!this.attentionCreate.equals(that.attentionCreate))
        return false;
    }

    boolean this_present_attentionCancel = true && this.isSetAttentionCancel();
    boolean that_present_attentionCancel = true && that.isSetAttentionCancel();
    if (this_present_attentionCancel || that_present_attentionCancel) {
      if (!(this_present_attentionCancel && that_present_attentionCancel))
        return false;
      if (!this.attentionCancel.equals(that.attentionCancel))
        return false;
    }

    boolean this_present_transInvite = true && this.isSetTransInvite();
    boolean that_present_transInvite = true && that.isSetTransInvite();
    if (this_present_transInvite || that_present_transInvite) {
      if (!(this_present_transInvite && that_present_transInvite))
        return false;
      if (!this.transInvite.equals(that.transInvite))
        return false;
    }

    boolean this_present_transReceive = true && this.isSetTransReceive();
    boolean that_present_transReceive = true && that.isSetTransReceive();
    if (this_present_transReceive || that_present_transReceive) {
      if (!(this_present_transReceive && that_present_transReceive))
        return false;
      if (!this.transReceive.equals(that.transReceive))
        return false;
    }

    boolean this_present_transReject = true && this.isSetTransReject();
    boolean that_present_transReject = true && that.isSetTransReject();
    if (this_present_transReject || that_present_transReject) {
      if (!(this_present_transReject && that_present_transReject))
        return false;
      if (!this.transReject.equals(that.transReject))
        return false;
    }

    boolean this_present_transStop = true && this.isSetTransStop();
    boolean that_present_transStop = true && that.isSetTransStop();
    if (this_present_transStop || that_present_transStop) {
      if (!(this_present_transStop && that_present_transStop))
        return false;
      if (!this.transStop.equals(that.transStop))
        return false;
    }

    boolean this_present_audioInvite = true && this.isSetAudioInvite();
    boolean that_present_audioInvite = true && that.isSetAudioInvite();
    if (this_present_audioInvite || that_present_audioInvite) {
      if (!(this_present_audioInvite && that_present_audioInvite))
        return false;
      if (!this.audioInvite.equals(that.audioInvite))
        return false;
    }

    boolean this_present_audioReceive = true && this.isSetAudioReceive();
    boolean that_present_audioReceive = true && that.isSetAudioReceive();
    if (this_present_audioReceive || that_present_audioReceive) {
      if (!(this_present_audioReceive && that_present_audioReceive))
        return false;
      if (!this.audioReceive.equals(that.audioReceive))
        return false;
    }

    boolean this_present_audioReject = true && this.isSetAudioReject();
    boolean that_present_audioReject = true && that.isSetAudioReject();
    if (this_present_audioReject || that_present_audioReject) {
      if (!(this_present_audioReject && that_present_audioReject))
        return false;
      if (!this.audioReject.equals(that.audioReject))
        return false;
    }

    boolean this_present_audioStop = true && this.isSetAudioStop();
    boolean that_present_audioStop = true && that.isSetAudioStop();
    if (this_present_audioStop || that_present_audioStop) {
      if (!(this_present_audioStop && that_present_audioStop))
        return false;
      if (!this.audioStop.equals(that.audioStop))
        return false;
    }

    boolean this_present_callRecent = true && this.isSetCallRecent();
    boolean that_present_callRecent = true && that.isSetCallRecent();
    if (this_present_callRecent || that_present_callRecent) {
      if (!(this_present_callRecent && that_present_callRecent))
        return false;
      if (!this.callRecent.equals(that.callRecent))
        return false;
    }

    boolean this_present_callBlock = true && this.isSetCallBlock();
    boolean that_present_callBlock = true && that.isSetCallBlock();
    if (this_present_callBlock || that_present_callBlock) {
      if (!(this_present_callBlock && that_present_callBlock))
        return false;
      if (!this.callBlock.equals(that.callBlock))
        return false;
    }

    boolean this_present_callReject = true && this.isSetCallReject();
    boolean that_present_callReject = true && that.isSetCallReject();
    if (this_present_callReject || that_present_callReject) {
      if (!(this_present_callReject && that_present_callReject))
        return false;
      if (!this.callReject.equals(that.callReject))
        return false;
    }

    boolean this_present_callCancel = true && this.isSetCallCancel();
    boolean that_present_callCancel = true && that.isSetCallCancel();
    if (this_present_callCancel || that_present_callCancel) {
      if (!(this_present_callCancel && that_present_callCancel))
        return false;
      if (!this.callCancel.equals(that.callCancel))
        return false;
    }

    boolean this_present_confShare = true && this.isSetConfShare();
    boolean that_present_confShare = true && that.isSetConfShare();
    if (this_present_confShare || that_present_confShare) {
      if (!(this_present_confShare && that_present_confShare))
        return false;
      if (!this.confShare.equals(that.confShare))
        return false;
    }

    boolean this_present_wbContent = true && this.isSetWbContent();
    boolean that_present_wbContent = true && that.isSetWbContent();
    if (this_present_wbContent || that_present_wbContent) {
      if (!(this_present_wbContent && that_present_wbContent))
        return false;
      if (!this.wbContent.equals(that.wbContent))
        return false;
    }

    boolean this_present_remoteAssistanceInvite = true && this.isSetRemoteAssistanceInvite();
    boolean that_present_remoteAssistanceInvite = true && that.isSetRemoteAssistanceInvite();
    if (this_present_remoteAssistanceInvite || that_present_remoteAssistanceInvite) {
      if (!(this_present_remoteAssistanceInvite && that_present_remoteAssistanceInvite))
        return false;
      if (!this.remoteAssistanceInvite.equals(that.remoteAssistanceInvite))
        return false;
    }

    boolean this_present_remoteAssistanceAccept = true && this.isSetRemoteAssistanceAccept();
    boolean that_present_remoteAssistanceAccept = true && that.isSetRemoteAssistanceAccept();
    if (this_present_remoteAssistanceAccept || that_present_remoteAssistanceAccept) {
      if (!(this_present_remoteAssistanceAccept && that_present_remoteAssistanceAccept))
        return false;
      if (!this.remoteAssistanceAccept.equals(that.remoteAssistanceAccept))
        return false;
    }

    boolean this_present_remoteAssistanceReject = true && this.isSetRemoteAssistanceReject();
    boolean that_present_remoteAssistanceReject = true && that.isSetRemoteAssistanceReject();
    if (this_present_remoteAssistanceReject || that_present_remoteAssistanceReject) {
      if (!(this_present_remoteAssistanceReject && that_present_remoteAssistanceReject))
        return false;
      if (!this.remoteAssistanceReject.equals(that.remoteAssistanceReject))
        return false;
    }

    boolean this_present_remoteAssistanceEnd = true && this.isSetRemoteAssistanceEnd();
    boolean that_present_remoteAssistanceEnd = true && that.isSetRemoteAssistanceEnd();
    if (this_present_remoteAssistanceEnd || that_present_remoteAssistanceEnd) {
      if (!(this_present_remoteAssistanceEnd && that_present_remoteAssistanceEnd))
        return false;
      if (!this.remoteAssistanceEnd.equals(that.remoteAssistanceEnd))
        return false;
    }

    boolean this_present_remoteAssistanceCancel = true && this.isSetRemoteAssistanceCancel();
    boolean that_present_remoteAssistanceCancel = true && that.isSetRemoteAssistanceCancel();
    if (this_present_remoteAssistanceCancel || that_present_remoteAssistanceCancel) {
      if (!(this_present_remoteAssistanceCancel && that_present_remoteAssistanceCancel))
        return false;
      if (!this.remoteAssistanceCancel.equals(that.remoteAssistanceCancel))
        return false;
    }

    boolean this_present_sessionTop = true && this.isSetSessionTop();
    boolean that_present_sessionTop = true && that.isSetSessionTop();
    if (this_present_sessionTop || that_present_sessionTop) {
      if (!(this_present_sessionTop && that_present_sessionTop))
        return false;
      if (!this.sessionTop.equals(that.sessionTop))
        return false;
    }

    boolean this_present_atMessageReaded = true && this.isSetAtMessageReaded();
    boolean that_present_atMessageReaded = true && that.isSetAtMessageReaded();
    if (this_present_atMessageReaded || that_present_atMessageReaded) {
      if (!(this_present_atMessageReaded && that_present_atMessageReaded))
        return false;
      if (!this.atMessageReaded.equals(that.atMessageReaded))
        return false;
    }

    boolean this_present_loginNotify = true && this.isSetLoginNotify();
    boolean that_present_loginNotify = true && that.isSetLoginNotify();
    if (this_present_loginNotify || that_present_loginNotify) {
      if (!(this_present_loginNotify && that_present_loginNotify))
        return false;
      if (!this.loginNotify.equals(that.loginNotify))
        return false;
    }

    boolean this_present_groupScopeNotify = true && this.isSetGroupScopeNotify();
    boolean that_present_groupScopeNotify = true && that.isSetGroupScopeNotify();
    if (this_present_groupScopeNotify || that_present_groupScopeNotify) {
      if (!(this_present_groupScopeNotify && that_present_groupScopeNotify))
        return false;
      if (!this.groupScopeNotify.equals(that.groupScopeNotify))
        return false;
    }

    boolean this_present_contactsRelationNotify = true && this.isSetContactsRelationNotify();
    boolean that_present_contactsRelationNotify = true && that.isSetContactsRelationNotify();
    if (this_present_contactsRelationNotify || that_present_contactsRelationNotify) {
      if (!(this_present_contactsRelationNotify && that_present_contactsRelationNotify))
        return false;
      if (!this.contactsRelationNotify.equals(that.contactsRelationNotify))
        return false;
    }

    boolean this_present_meetingAlertNotify = true && this.isSetMeetingAlertNotify();
    boolean that_present_meetingAlertNotify = true && that.isSetMeetingAlertNotify();
    if (this_present_meetingAlertNotify || that_present_meetingAlertNotify) {
      if (!(this_present_meetingAlertNotify && that_present_meetingAlertNotify))
        return false;
      if (!this.meetingAlertNotify.equals(that.meetingAlertNotify))
        return false;
    }

    boolean this_present_apiText = true && this.isSetApiText();
    boolean that_present_apiText = true && that.isSetApiText();
    if (this_present_apiText || that_present_apiText) {
      if (!(this_present_apiText && that_present_apiText))
        return false;
      if (!this.apiText.equals(that.apiText))
        return false;
    }

    boolean this_present_apiImage = true && this.isSetApiImage();
    boolean that_present_apiImage = true && that.isSetApiImage();
    if (this_present_apiImage || that_present_apiImage) {
      if (!(this_present_apiImage && that_present_apiImage))
        return false;
      if (!this.apiImage.equals(that.apiImage))
        return false;
    }

    boolean this_present_apiFile = true && this.isSetApiFile();
    boolean that_present_apiFile = true && that.isSetApiFile();
    if (this_present_apiFile || that_present_apiFile) {
      if (!(this_present_apiFile && that_present_apiFile))
        return false;
      if (!this.apiFile.equals(that.apiFile))
        return false;
    }

    boolean this_present_apiAckSent = true && this.isSetApiAckSent();
    boolean that_present_apiAckSent = true && that.isSetApiAckSent();
    if (this_present_apiAckSent || that_present_apiAckSent) {
      if (!(this_present_apiAckSent && that_present_apiAckSent))
        return false;
      if (!this.apiAckSent.equals(that.apiAckSent))
        return false;
    }

    boolean this_present_apiOA = true && this.isSetApiOA();
    boolean that_present_apiOA = true && that.isSetApiOA();
    if (this_present_apiOA || that_present_apiOA) {
      if (!(this_present_apiOA && that_present_apiOA))
        return false;
      if (!this.apiOA.equals(that.apiOA))
        return false;
    }

    boolean this_present_apiOAStatusChange = true && this.isSetApiOAStatusChange();
    boolean that_present_apiOAStatusChange = true && that.isSetApiOAStatusChange();
    if (this_present_apiOAStatusChange || that_present_apiOAStatusChange) {
      if (!(this_present_apiOAStatusChange && that_present_apiOAStatusChange))
        return false;
      if (!this.apiOAStatusChange.equals(that.apiOAStatusChange))
        return false;
    }

    boolean this_present_apiChangeNotify = true && this.isSetApiChangeNotify();
    boolean that_present_apiChangeNotify = true && that.isSetApiChangeNotify();
    if (this_present_apiChangeNotify || that_present_apiChangeNotify) {
      if (!(this_present_apiChangeNotify && that_present_apiChangeNotify))
        return false;
      if (!this.apiChangeNotify.equals(that.apiChangeNotify))
        return false;
    }

    boolean this_present_apiEventNotify = true && this.isSetApiEventNotify();
    boolean that_present_apiEventNotify = true && that.isSetApiEventNotify();
    if (this_present_apiEventNotify || that_present_apiEventNotify) {
      if (!(this_present_apiEventNotify && that_present_apiEventNotify))
        return false;
      if (!this.apiEventNotify.equals(that.apiEventNotify))
        return false;
    }

    boolean this_present_apiCustomized = true && this.isSetApiCustomized();
    boolean that_present_apiCustomized = true && that.isSetApiCustomized();
    if (this_present_apiCustomized || that_present_apiCustomized) {
      if (!(this_present_apiCustomized && that_present_apiCustomized))
        return false;
      if (!this.apiCustomized.equals(that.apiCustomized))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_presence = true && (isSetPresence());
    list.add(present_presence);
    if (present_presence)
      list.add(presence);

    boolean present_ping = true && (isSetPing());
    list.add(present_ping);
    if (present_ping)
      list.add(ping);

    boolean present_ackSent = true && (isSetAckSent());
    list.add(present_ackSent);
    if (present_ackSent)
      list.add(ackSent);

    boolean present_ackReceived = true && (isSetAckReceived());
    list.add(present_ackReceived);
    if (present_ackReceived)
      list.add(ackReceived);

    boolean present_ackRead = true && (isSetAckRead());
    list.add(present_ackRead);
    if (present_ackRead)
      list.add(ackRead);

    boolean present_sleep = true && (isSetSleep());
    list.add(present_sleep);
    if (present_sleep)
      list.add(sleep);

    boolean present_wakeupConfirm = true && (isSetWakeupConfirm());
    list.add(present_wakeupConfirm);
    if (present_wakeupConfirm)
      list.add(wakeupConfirm);

    boolean present_ackPlay = true && (isSetAckPlay());
    list.add(present_ackPlay);
    if (present_ackPlay)
      list.add(ackPlay);

    boolean present_batchAckRead = true && (isSetBatchAckRead());
    list.add(present_batchAckRead);
    if (present_batchAckRead)
      list.add(batchAckRead);

    boolean present_text = true && (isSetText());
    list.add(present_text);
    if (present_text)
      list.add(text);

    boolean present_media = true && (isSetMedia());
    list.add(present_media);
    if (present_media)
      list.add(media);

    boolean present_groupAdd = true && (isSetGroupAdd());
    list.add(present_groupAdd);
    if (present_groupAdd)
      list.add(groupAdd);

    boolean present_groupDel = true && (isSetGroupDel());
    list.add(present_groupDel);
    if (present_groupDel)
      list.add(groupDel);

    boolean present_groupUpdate = true && (isSetGroupUpdate());
    list.add(present_groupUpdate);
    if (present_groupUpdate)
      list.add(groupUpdate);

    boolean present_groupCreate = true && (isSetGroupCreate());
    list.add(present_groupCreate);
    if (present_groupCreate)
      list.add(groupCreate);

    boolean present_groupTop = true && (isSetGroupTop());
    list.add(present_groupTop);
    if (present_groupTop)
      list.add(groupTop);

    boolean present_summaryCreate = true && (isSetSummaryCreate());
    list.add(present_summaryCreate);
    if (present_summaryCreate)
      list.add(summaryCreate);

    boolean present_docSend = true && (isSetDocSend());
    list.add(present_docSend);
    if (present_docSend)
      list.add(docSend);

    boolean present_alertRule = true && (isSetAlertRule());
    list.add(present_alertRule);
    if (present_alertRule)
      list.add(alertRule);

    boolean present_groupClose = true && (isSetGroupClose());
    list.add(present_groupClose);
    if (present_groupClose)
      list.add(groupClose);

    boolean present_msgNotify = true && (isSetMsgNotify());
    list.add(present_msgNotify);
    if (present_msgNotify)
      list.add(msgNotify);

    boolean present_groupKick = true && (isSetGroupKick());
    list.add(present_groupKick);
    if (present_groupKick)
      list.add(groupKick);

    boolean present_codeCreate = true && (isSetCodeCreate());
    list.add(present_codeCreate);
    if (present_codeCreate)
      list.add(codeCreate);

    boolean present_codeDel = true && (isSetCodeDel());
    list.add(present_codeDel);
    if (present_codeDel)
      list.add(codeDel);

    boolean present_docDel = true && (isSetDocDel());
    list.add(present_docDel);
    if (present_docDel)
      list.add(docDel);

    boolean present_commentCreate = true && (isSetCommentCreate());
    list.add(present_commentCreate);
    if (present_commentCreate)
      list.add(commentCreate);

    boolean present_commentDel = true && (isSetCommentDel());
    list.add(present_commentDel);
    if (present_commentDel)
      list.add(commentDel);

    boolean present_groupAvatarUpdate = true && (isSetGroupAvatarUpdate());
    list.add(present_groupAvatarUpdate);
    if (present_groupAvatarUpdate)
      list.add(groupAvatarUpdate);

    boolean present_groupState = true && (isSetGroupState());
    list.add(present_groupState);
    if (present_groupState)
      list.add(groupState);

    boolean present_cloudFile = true && (isSetCloudFile());
    list.add(present_cloudFile);
    if (present_cloudFile)
      list.add(cloudFile);

    boolean present_memberRole = true && (isSetMemberRole());
    list.add(present_memberRole);
    if (present_memberRole)
      list.add(memberRole);

    boolean present_report = true && (isSetReport());
    list.add(present_report);
    if (present_report)
      list.add(report);

    boolean present_revocation = true && (isSetRevocation());
    list.add(present_revocation);
    if (present_revocation)
      list.add(revocation);

    boolean present_groupScope = true && (isSetGroupScope());
    list.add(present_groupScope);
    if (present_groupScope)
      list.add(groupScope);

    boolean present_ownerTransfer = true && (isSetOwnerTransfer());
    list.add(present_ownerTransfer);
    if (present_ownerTransfer)
      list.add(ownerTransfer);

    boolean present_welcome = true && (isSetWelcome());
    list.add(present_welcome);
    if (present_welcome)
      list.add(welcome);

    boolean present_clientUpdate = true && (isSetClientUpdate());
    list.add(present_clientUpdate);
    if (present_clientUpdate)
      list.add(clientUpdate);

    boolean present_completeInfo = true && (isSetCompleteInfo());
    list.add(present_completeInfo);
    if (present_completeInfo)
      list.add(completeInfo);

    boolean present_pwdComplexUpdate = true && (isSetPwdComplexUpdate());
    list.add(present_pwdComplexUpdate);
    if (present_pwdComplexUpdate)
      list.add(pwdComplexUpdate);

    boolean present_pwdExpire = true && (isSetPwdExpire());
    list.add(present_pwdExpire);
    if (present_pwdExpire)
      list.add(pwdExpire);

    boolean present_pcGuide = true && (isSetPcGuide());
    list.add(present_pcGuide);
    if (present_pcGuide)
      list.add(pcGuide);

    boolean present_mobileGuide = true && (isSetMobileGuide());
    list.add(present_mobileGuide);
    if (present_mobileGuide)
      list.add(mobileGuide);

    boolean present_pwdModify = true && (isSetPwdModify());
    list.add(present_pwdModify);
    if (present_pwdModify)
      list.add(pwdModify);

    boolean present_tagDel = true && (isSetTagDel());
    list.add(present_tagDel);
    if (present_tagDel)
      list.add(tagDel);

    boolean present_remind = true && (isSetRemind());
    list.add(present_remind);
    if (present_remind)
      list.add(remind);

    boolean present_deptUpdate = true && (isSetDeptUpdate());
    list.add(present_deptUpdate);
    if (present_deptUpdate)
      list.add(deptUpdate);

    boolean present_deptTransfer = true && (isSetDeptTransfer());
    list.add(present_deptTransfer);
    if (present_deptTransfer)
      list.add(deptTransfer);

    boolean present_positionUpdate = true && (isSetPositionUpdate());
    list.add(present_positionUpdate);
    if (present_positionUpdate)
      list.add(positionUpdate);

    boolean present_employeeEntry = true && (isSetEmployeeEntry());
    list.add(present_employeeEntry);
    if (present_employeeEntry)
      list.add(employeeEntry);

    boolean present_employeeLeave = true && (isSetEmployeeLeave());
    list.add(present_employeeLeave);
    if (present_employeeLeave)
      list.add(employeeLeave);

    boolean present_employeeRights = true && (isSetEmployeeRights());
    list.add(present_employeeRights);
    if (present_employeeRights)
      list.add(employeeRights);

    boolean present_deprtParentChange = true && (isSetDeprtParentChange());
    list.add(present_deprtParentChange);
    if (present_deprtParentChange)
      list.add(deprtParentChange);

    boolean present_companyJoin = true && (isSetCompanyJoin());
    list.add(present_companyJoin);
    if (present_companyJoin)
      list.add(companyJoin);

    boolean present_deptDelete = true && (isSetDeptDelete());
    list.add(present_deptDelete);
    if (present_deptDelete)
      list.add(deptDelete);

    boolean present_entryConfirm = true && (isSetEntryConfirm());
    list.add(present_entryConfirm);
    if (present_entryConfirm)
      list.add(entryConfirm);

    boolean present_leaveConfirm = true && (isSetLeaveConfirm());
    list.add(present_leaveConfirm);
    if (present_leaveConfirm)
      list.add(leaveConfirm);

    boolean present_deptConfirm = true && (isSetDeptConfirm());
    list.add(present_deptConfirm);
    if (present_deptConfirm)
      list.add(deptConfirm);

    boolean present_instantInvite = true && (isSetInstantInvite());
    list.add(present_instantInvite);
    if (present_instantInvite)
      list.add(instantInvite);

    boolean present_confInvite = true && (isSetConfInvite());
    list.add(present_confInvite);
    if (present_confInvite)
      list.add(confInvite);

    boolean present_confReceive = true && (isSetConfReceive());
    list.add(present_confReceive);
    if (present_confReceive)
      list.add(confReceive);

    boolean present_confReject = true && (isSetConfReject());
    list.add(present_confReject);
    if (present_confReject)
      list.add(confReject);

    boolean present_confCancel = true && (isSetConfCancel());
    list.add(present_confCancel);
    if (present_confCancel)
      list.add(confCancel);

    boolean present_confAlert = true && (isSetConfAlert());
    list.add(present_confAlert);
    if (present_confAlert)
      list.add(confAlert);

    boolean present_instantReceive = true && (isSetInstantReceive());
    list.add(present_instantReceive);
    if (present_instantReceive)
      list.add(instantReceive);

    boolean present_instantReject = true && (isSetInstantReject());
    list.add(present_instantReject);
    if (present_instantReject)
      list.add(instantReject);

    boolean present_confChat = true && (isSetConfChat());
    list.add(present_confChat);
    if (present_confChat)
      list.add(confChat);

    boolean present_confSummary = true && (isSetConfSummary());
    list.add(present_confSummary);
    if (present_confSummary)
      list.add(confSummary);

    boolean present_callState = true && (isSetCallState());
    list.add(present_callState);
    if (present_callState)
      list.add(callState);

    boolean present_confUpload = true && (isSetConfUpload());
    list.add(present_confUpload);
    if (present_confUpload)
      list.add(confUpload);

    boolean present_confDocDel = true && (isSetConfDocDel());
    list.add(present_confDocDel);
    if (present_confDocDel)
      list.add(confDocDel);

    boolean present_cardUpdate = true && (isSetCardUpdate());
    list.add(present_cardUpdate);
    if (present_cardUpdate)
      list.add(cardUpdate);

    boolean present_contacterAdd = true && (isSetContacterAdd());
    list.add(present_contacterAdd);
    if (present_contacterAdd)
      list.add(contacterAdd);

    boolean present_contacterDel = true && (isSetContacterDel());
    list.add(present_contacterDel);
    if (present_contacterDel)
      list.add(contacterDel);

    boolean present_attentionCreate = true && (isSetAttentionCreate());
    list.add(present_attentionCreate);
    if (present_attentionCreate)
      list.add(attentionCreate);

    boolean present_attentionCancel = true && (isSetAttentionCancel());
    list.add(present_attentionCancel);
    if (present_attentionCancel)
      list.add(attentionCancel);

    boolean present_transInvite = true && (isSetTransInvite());
    list.add(present_transInvite);
    if (present_transInvite)
      list.add(transInvite);

    boolean present_transReceive = true && (isSetTransReceive());
    list.add(present_transReceive);
    if (present_transReceive)
      list.add(transReceive);

    boolean present_transReject = true && (isSetTransReject());
    list.add(present_transReject);
    if (present_transReject)
      list.add(transReject);

    boolean present_transStop = true && (isSetTransStop());
    list.add(present_transStop);
    if (present_transStop)
      list.add(transStop);

    boolean present_audioInvite = true && (isSetAudioInvite());
    list.add(present_audioInvite);
    if (present_audioInvite)
      list.add(audioInvite);

    boolean present_audioReceive = true && (isSetAudioReceive());
    list.add(present_audioReceive);
    if (present_audioReceive)
      list.add(audioReceive);

    boolean present_audioReject = true && (isSetAudioReject());
    list.add(present_audioReject);
    if (present_audioReject)
      list.add(audioReject);

    boolean present_audioStop = true && (isSetAudioStop());
    list.add(present_audioStop);
    if (present_audioStop)
      list.add(audioStop);

    boolean present_callRecent = true && (isSetCallRecent());
    list.add(present_callRecent);
    if (present_callRecent)
      list.add(callRecent);

    boolean present_callBlock = true && (isSetCallBlock());
    list.add(present_callBlock);
    if (present_callBlock)
      list.add(callBlock);

    boolean present_callReject = true && (isSetCallReject());
    list.add(present_callReject);
    if (present_callReject)
      list.add(callReject);

    boolean present_callCancel = true && (isSetCallCancel());
    list.add(present_callCancel);
    if (present_callCancel)
      list.add(callCancel);

    boolean present_confShare = true && (isSetConfShare());
    list.add(present_confShare);
    if (present_confShare)
      list.add(confShare);

    boolean present_wbContent = true && (isSetWbContent());
    list.add(present_wbContent);
    if (present_wbContent)
      list.add(wbContent);

    boolean present_remoteAssistanceInvite = true && (isSetRemoteAssistanceInvite());
    list.add(present_remoteAssistanceInvite);
    if (present_remoteAssistanceInvite)
      list.add(remoteAssistanceInvite);

    boolean present_remoteAssistanceAccept = true && (isSetRemoteAssistanceAccept());
    list.add(present_remoteAssistanceAccept);
    if (present_remoteAssistanceAccept)
      list.add(remoteAssistanceAccept);

    boolean present_remoteAssistanceReject = true && (isSetRemoteAssistanceReject());
    list.add(present_remoteAssistanceReject);
    if (present_remoteAssistanceReject)
      list.add(remoteAssistanceReject);

    boolean present_remoteAssistanceEnd = true && (isSetRemoteAssistanceEnd());
    list.add(present_remoteAssistanceEnd);
    if (present_remoteAssistanceEnd)
      list.add(remoteAssistanceEnd);

    boolean present_remoteAssistanceCancel = true && (isSetRemoteAssistanceCancel());
    list.add(present_remoteAssistanceCancel);
    if (present_remoteAssistanceCancel)
      list.add(remoteAssistanceCancel);

    boolean present_sessionTop = true && (isSetSessionTop());
    list.add(present_sessionTop);
    if (present_sessionTop)
      list.add(sessionTop);

    boolean present_atMessageReaded = true && (isSetAtMessageReaded());
    list.add(present_atMessageReaded);
    if (present_atMessageReaded)
      list.add(atMessageReaded);

    boolean present_loginNotify = true && (isSetLoginNotify());
    list.add(present_loginNotify);
    if (present_loginNotify)
      list.add(loginNotify);

    boolean present_groupScopeNotify = true && (isSetGroupScopeNotify());
    list.add(present_groupScopeNotify);
    if (present_groupScopeNotify)
      list.add(groupScopeNotify);

    boolean present_contactsRelationNotify = true && (isSetContactsRelationNotify());
    list.add(present_contactsRelationNotify);
    if (present_contactsRelationNotify)
      list.add(contactsRelationNotify);

    boolean present_meetingAlertNotify = true && (isSetMeetingAlertNotify());
    list.add(present_meetingAlertNotify);
    if (present_meetingAlertNotify)
      list.add(meetingAlertNotify);

    boolean present_apiText = true && (isSetApiText());
    list.add(present_apiText);
    if (present_apiText)
      list.add(apiText);

    boolean present_apiImage = true && (isSetApiImage());
    list.add(present_apiImage);
    if (present_apiImage)
      list.add(apiImage);

    boolean present_apiFile = true && (isSetApiFile());
    list.add(present_apiFile);
    if (present_apiFile)
      list.add(apiFile);

    boolean present_apiAckSent = true && (isSetApiAckSent());
    list.add(present_apiAckSent);
    if (present_apiAckSent)
      list.add(apiAckSent);

    boolean present_apiOA = true && (isSetApiOA());
    list.add(present_apiOA);
    if (present_apiOA)
      list.add(apiOA);

    boolean present_apiOAStatusChange = true && (isSetApiOAStatusChange());
    list.add(present_apiOAStatusChange);
    if (present_apiOAStatusChange)
      list.add(apiOAStatusChange);

    boolean present_apiChangeNotify = true && (isSetApiChangeNotify());
    list.add(present_apiChangeNotify);
    if (present_apiChangeNotify)
      list.add(apiChangeNotify);

    boolean present_apiEventNotify = true && (isSetApiEventNotify());
    list.add(present_apiEventNotify);
    if (present_apiEventNotify)
      list.add(apiEventNotify);

    boolean present_apiCustomized = true && (isSetApiCustomized());
    list.add(present_apiCustomized);
    if (present_apiCustomized)
      list.add(apiCustomized);

    return list.hashCode();
  }

  @Override
  public int compareTo(UcMessageBody other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPresence()).compareTo(other.isSetPresence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presence, other.presence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPing()).compareTo(other.isSetPing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ping, other.ping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAckSent()).compareTo(other.isSetAckSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackSent, other.ackSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAckReceived()).compareTo(other.isSetAckReceived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckReceived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackReceived, other.ackReceived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAckRead()).compareTo(other.isSetAckRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackRead, other.ackRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSleep()).compareTo(other.isSetSleep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSleep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sleep, other.sleep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWakeupConfirm()).compareTo(other.isSetWakeupConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWakeupConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wakeupConfirm, other.wakeupConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAckPlay()).compareTo(other.isSetAckPlay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAckPlay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ackPlay, other.ackPlay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchAckRead()).compareTo(other.isSetBatchAckRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchAckRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchAckRead, other.batchAckRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedia()).compareTo(other.isSetMedia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.media, other.media);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupAdd()).compareTo(other.isSetGroupAdd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupAdd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupAdd, other.groupAdd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupDel()).compareTo(other.isSetGroupDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupDel, other.groupDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupUpdate()).compareTo(other.isSetGroupUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupUpdate, other.groupUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupCreate()).compareTo(other.isSetGroupCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupCreate, other.groupCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupTop()).compareTo(other.isSetGroupTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTop, other.groupTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummaryCreate()).compareTo(other.isSetSummaryCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummaryCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaryCreate, other.summaryCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocSend()).compareTo(other.isSetDocSend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocSend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docSend, other.docSend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertRule()).compareTo(other.isSetAlertRule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertRule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertRule, other.alertRule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupClose()).compareTo(other.isSetGroupClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupClose, other.groupClose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgNotify()).compareTo(other.isSetMsgNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgNotify, other.msgNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupKick()).compareTo(other.isSetGroupKick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupKick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupKick, other.groupKick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCodeCreate()).compareTo(other.isSetCodeCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodeCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeCreate, other.codeCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCodeDel()).compareTo(other.isSetCodeDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodeDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeDel, other.codeDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocDel()).compareTo(other.isSetDocDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docDel, other.docDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentCreate()).compareTo(other.isSetCommentCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCreate, other.commentCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentDel()).compareTo(other.isSetCommentDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentDel, other.commentDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupAvatarUpdate()).compareTo(other.isSetGroupAvatarUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupAvatarUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupAvatarUpdate, other.groupAvatarUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupState()).compareTo(other.isSetGroupState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupState, other.groupState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloudFile()).compareTo(other.isSetCloudFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloudFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudFile, other.cloudFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberRole()).compareTo(other.isSetMemberRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberRole, other.memberRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReport()).compareTo(other.isSetReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report, other.report);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevocation()).compareTo(other.isSetRevocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revocation, other.revocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupScope()).compareTo(other.isSetGroupScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupScope, other.groupScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwnerTransfer()).compareTo(other.isSetOwnerTransfer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerTransfer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerTransfer, other.ownerTransfer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWelcome()).compareTo(other.isSetWelcome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelcome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.welcome, other.welcome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientUpdate()).compareTo(other.isSetClientUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientUpdate, other.clientUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteInfo()).compareTo(other.isSetCompleteInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeInfo, other.completeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwdComplexUpdate()).compareTo(other.isSetPwdComplexUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwdComplexUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwdComplexUpdate, other.pwdComplexUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwdExpire()).compareTo(other.isSetPwdExpire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwdExpire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwdExpire, other.pwdExpire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcGuide()).compareTo(other.isSetPcGuide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcGuide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcGuide, other.pcGuide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileGuide()).compareTo(other.isSetMobileGuide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileGuide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileGuide, other.mobileGuide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwdModify()).compareTo(other.isSetPwdModify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwdModify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwdModify, other.pwdModify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagDel()).compareTo(other.isSetTagDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagDel, other.tagDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemind()).compareTo(other.isSetRemind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remind, other.remind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptUpdate()).compareTo(other.isSetDeptUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptUpdate, other.deptUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptTransfer()).compareTo(other.isSetDeptTransfer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptTransfer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptTransfer, other.deptTransfer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionUpdate()).compareTo(other.isSetPositionUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionUpdate, other.positionUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployeeEntry()).compareTo(other.isSetEmployeeEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeEntry, other.employeeEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployeeLeave()).compareTo(other.isSetEmployeeLeave());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeLeave()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeLeave, other.employeeLeave);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployeeRights()).compareTo(other.isSetEmployeeRights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeRights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeRights, other.employeeRights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeprtParentChange()).compareTo(other.isSetDeprtParentChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeprtParentChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deprtParentChange, other.deprtParentChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyJoin()).compareTo(other.isSetCompanyJoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyJoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyJoin, other.companyJoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptDelete()).compareTo(other.isSetDeptDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptDelete, other.deptDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryConfirm()).compareTo(other.isSetEntryConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryConfirm, other.entryConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaveConfirm()).compareTo(other.isSetLeaveConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaveConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaveConfirm, other.leaveConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeptConfirm()).compareTo(other.isSetDeptConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeptConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deptConfirm, other.deptConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstantInvite()).compareTo(other.isSetInstantInvite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstantInvite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instantInvite, other.instantInvite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfInvite()).compareTo(other.isSetConfInvite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfInvite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confInvite, other.confInvite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfReceive()).compareTo(other.isSetConfReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confReceive, other.confReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfReject()).compareTo(other.isSetConfReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confReject, other.confReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfCancel()).compareTo(other.isSetConfCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confCancel, other.confCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfAlert()).compareTo(other.isSetConfAlert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfAlert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confAlert, other.confAlert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstantReceive()).compareTo(other.isSetInstantReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstantReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instantReceive, other.instantReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstantReject()).compareTo(other.isSetInstantReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstantReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instantReject, other.instantReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfChat()).compareTo(other.isSetConfChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confChat, other.confChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfSummary()).compareTo(other.isSetConfSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confSummary, other.confSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallState()).compareTo(other.isSetCallState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callState, other.callState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfUpload()).compareTo(other.isSetConfUpload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfUpload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confUpload, other.confUpload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfDocDel()).compareTo(other.isSetConfDocDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfDocDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confDocDel, other.confDocDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardUpdate()).compareTo(other.isSetCardUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardUpdate, other.cardUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContacterAdd()).compareTo(other.isSetContacterAdd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContacterAdd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contacterAdd, other.contacterAdd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContacterDel()).compareTo(other.isSetContacterDel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContacterDel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contacterDel, other.contacterDel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttentionCreate()).compareTo(other.isSetAttentionCreate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttentionCreate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attentionCreate, other.attentionCreate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttentionCancel()).compareTo(other.isSetAttentionCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttentionCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attentionCancel, other.attentionCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransInvite()).compareTo(other.isSetTransInvite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransInvite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transInvite, other.transInvite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransReceive()).compareTo(other.isSetTransReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transReceive, other.transReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransReject()).compareTo(other.isSetTransReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transReject, other.transReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransStop()).compareTo(other.isSetTransStop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransStop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transStop, other.transStop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioInvite()).compareTo(other.isSetAudioInvite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioInvite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioInvite, other.audioInvite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioReceive()).compareTo(other.isSetAudioReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioReceive, other.audioReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioReject()).compareTo(other.isSetAudioReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioReject, other.audioReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioStop()).compareTo(other.isSetAudioStop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioStop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioStop, other.audioStop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallRecent()).compareTo(other.isSetCallRecent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallRecent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callRecent, other.callRecent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallBlock()).compareTo(other.isSetCallBlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallBlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callBlock, other.callBlock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallReject()).compareTo(other.isSetCallReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callReject, other.callReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallCancel()).compareTo(other.isSetCallCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callCancel, other.callCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfShare()).compareTo(other.isSetConfShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confShare, other.confShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWbContent()).compareTo(other.isSetWbContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWbContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wbContent, other.wbContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAssistanceInvite()).compareTo(other.isSetRemoteAssistanceInvite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAssistanceInvite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAssistanceInvite, other.remoteAssistanceInvite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAssistanceAccept()).compareTo(other.isSetRemoteAssistanceAccept());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAssistanceAccept()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAssistanceAccept, other.remoteAssistanceAccept);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAssistanceReject()).compareTo(other.isSetRemoteAssistanceReject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAssistanceReject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAssistanceReject, other.remoteAssistanceReject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAssistanceEnd()).compareTo(other.isSetRemoteAssistanceEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAssistanceEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAssistanceEnd, other.remoteAssistanceEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAssistanceCancel()).compareTo(other.isSetRemoteAssistanceCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAssistanceCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAssistanceCancel, other.remoteAssistanceCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionTop()).compareTo(other.isSetSessionTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionTop, other.sessionTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAtMessageReaded()).compareTo(other.isSetAtMessageReaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAtMessageReaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.atMessageReaded, other.atMessageReaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginNotify()).compareTo(other.isSetLoginNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginNotify, other.loginNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupScopeNotify()).compareTo(other.isSetGroupScopeNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupScopeNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupScopeNotify, other.groupScopeNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactsRelationNotify()).compareTo(other.isSetContactsRelationNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactsRelationNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactsRelationNotify, other.contactsRelationNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeetingAlertNotify()).compareTo(other.isSetMeetingAlertNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingAlertNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingAlertNotify, other.meetingAlertNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiText()).compareTo(other.isSetApiText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiText, other.apiText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiImage()).compareTo(other.isSetApiImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiImage, other.apiImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiFile()).compareTo(other.isSetApiFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiFile, other.apiFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiAckSent()).compareTo(other.isSetApiAckSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiAckSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiAckSent, other.apiAckSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiOA()).compareTo(other.isSetApiOA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiOA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiOA, other.apiOA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiOAStatusChange()).compareTo(other.isSetApiOAStatusChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiOAStatusChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiOAStatusChange, other.apiOAStatusChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiChangeNotify()).compareTo(other.isSetApiChangeNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiChangeNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiChangeNotify, other.apiChangeNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiEventNotify()).compareTo(other.isSetApiEventNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiEventNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiEventNotify, other.apiEventNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiCustomized()).compareTo(other.isSetApiCustomized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiCustomized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiCustomized, other.apiCustomized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UcMessageBody(");
    boolean first = true;

    if (isSetPresence()) {
      sb.append("presence:");
      if (this.presence == null) {
        sb.append("null");
      } else {
        sb.append(this.presence);
      }
      first = false;
    }
    if (isSetPing()) {
      if (!first) sb.append(", ");
      sb.append("ping:");
      if (this.ping == null) {
        sb.append("null");
      } else {
        sb.append(this.ping);
      }
      first = false;
    }
    if (isSetAckSent()) {
      if (!first) sb.append(", ");
      sb.append("ackSent:");
      if (this.ackSent == null) {
        sb.append("null");
      } else {
        sb.append(this.ackSent);
      }
      first = false;
    }
    if (isSetAckReceived()) {
      if (!first) sb.append(", ");
      sb.append("ackReceived:");
      if (this.ackReceived == null) {
        sb.append("null");
      } else {
        sb.append(this.ackReceived);
      }
      first = false;
    }
    if (isSetAckRead()) {
      if (!first) sb.append(", ");
      sb.append("ackRead:");
      if (this.ackRead == null) {
        sb.append("null");
      } else {
        sb.append(this.ackRead);
      }
      first = false;
    }
    if (isSetSleep()) {
      if (!first) sb.append(", ");
      sb.append("sleep:");
      if (this.sleep == null) {
        sb.append("null");
      } else {
        sb.append(this.sleep);
      }
      first = false;
    }
    if (isSetWakeupConfirm()) {
      if (!first) sb.append(", ");
      sb.append("wakeupConfirm:");
      if (this.wakeupConfirm == null) {
        sb.append("null");
      } else {
        sb.append(this.wakeupConfirm);
      }
      first = false;
    }
    if (isSetAckPlay()) {
      if (!first) sb.append(", ");
      sb.append("ackPlay:");
      if (this.ackPlay == null) {
        sb.append("null");
      } else {
        sb.append(this.ackPlay);
      }
      first = false;
    }
    if (isSetBatchAckRead()) {
      if (!first) sb.append(", ");
      sb.append("batchAckRead:");
      if (this.batchAckRead == null) {
        sb.append("null");
      } else {
        sb.append(this.batchAckRead);
      }
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetMedia()) {
      if (!first) sb.append(", ");
      sb.append("media:");
      if (this.media == null) {
        sb.append("null");
      } else {
        sb.append(this.media);
      }
      first = false;
    }
    if (isSetGroupAdd()) {
      if (!first) sb.append(", ");
      sb.append("groupAdd:");
      if (this.groupAdd == null) {
        sb.append("null");
      } else {
        sb.append(this.groupAdd);
      }
      first = false;
    }
    if (isSetGroupDel()) {
      if (!first) sb.append(", ");
      sb.append("groupDel:");
      if (this.groupDel == null) {
        sb.append("null");
      } else {
        sb.append(this.groupDel);
      }
      first = false;
    }
    if (isSetGroupUpdate()) {
      if (!first) sb.append(", ");
      sb.append("groupUpdate:");
      if (this.groupUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.groupUpdate);
      }
      first = false;
    }
    if (isSetGroupCreate()) {
      if (!first) sb.append(", ");
      sb.append("groupCreate:");
      if (this.groupCreate == null) {
        sb.append("null");
      } else {
        sb.append(this.groupCreate);
      }
      first = false;
    }
    if (isSetGroupTop()) {
      if (!first) sb.append(", ");
      sb.append("groupTop:");
      if (this.groupTop == null) {
        sb.append("null");
      } else {
        sb.append(this.groupTop);
      }
      first = false;
    }
    if (isSetSummaryCreate()) {
      if (!first) sb.append(", ");
      sb.append("summaryCreate:");
      if (this.summaryCreate == null) {
        sb.append("null");
      } else {
        sb.append(this.summaryCreate);
      }
      first = false;
    }
    if (isSetDocSend()) {
      if (!first) sb.append(", ");
      sb.append("docSend:");
      if (this.docSend == null) {
        sb.append("null");
      } else {
        sb.append(this.docSend);
      }
      first = false;
    }
    if (isSetAlertRule()) {
      if (!first) sb.append(", ");
      sb.append("alertRule:");
      if (this.alertRule == null) {
        sb.append("null");
      } else {
        sb.append(this.alertRule);
      }
      first = false;
    }
    if (isSetGroupClose()) {
      if (!first) sb.append(", ");
      sb.append("groupClose:");
      if (this.groupClose == null) {
        sb.append("null");
      } else {
        sb.append(this.groupClose);
      }
      first = false;
    }
    if (isSetMsgNotify()) {
      if (!first) sb.append(", ");
      sb.append("msgNotify:");
      if (this.msgNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.msgNotify);
      }
      first = false;
    }
    if (isSetGroupKick()) {
      if (!first) sb.append(", ");
      sb.append("groupKick:");
      if (this.groupKick == null) {
        sb.append("null");
      } else {
        sb.append(this.groupKick);
      }
      first = false;
    }
    if (isSetCodeCreate()) {
      if (!first) sb.append(", ");
      sb.append("codeCreate:");
      if (this.codeCreate == null) {
        sb.append("null");
      } else {
        sb.append(this.codeCreate);
      }
      first = false;
    }
    if (isSetCodeDel()) {
      if (!first) sb.append(", ");
      sb.append("codeDel:");
      if (this.codeDel == null) {
        sb.append("null");
      } else {
        sb.append(this.codeDel);
      }
      first = false;
    }
    if (isSetDocDel()) {
      if (!first) sb.append(", ");
      sb.append("docDel:");
      if (this.docDel == null) {
        sb.append("null");
      } else {
        sb.append(this.docDel);
      }
      first = false;
    }
    if (isSetCommentCreate()) {
      if (!first) sb.append(", ");
      sb.append("commentCreate:");
      if (this.commentCreate == null) {
        sb.append("null");
      } else {
        sb.append(this.commentCreate);
      }
      first = false;
    }
    if (isSetCommentDel()) {
      if (!first) sb.append(", ");
      sb.append("commentDel:");
      if (this.commentDel == null) {
        sb.append("null");
      } else {
        sb.append(this.commentDel);
      }
      first = false;
    }
    if (isSetGroupAvatarUpdate()) {
      if (!first) sb.append(", ");
      sb.append("groupAvatarUpdate:");
      if (this.groupAvatarUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.groupAvatarUpdate);
      }
      first = false;
    }
    if (isSetGroupState()) {
      if (!first) sb.append(", ");
      sb.append("groupState:");
      if (this.groupState == null) {
        sb.append("null");
      } else {
        sb.append(this.groupState);
      }
      first = false;
    }
    if (isSetCloudFile()) {
      if (!first) sb.append(", ");
      sb.append("cloudFile:");
      if (this.cloudFile == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudFile);
      }
      first = false;
    }
    if (isSetMemberRole()) {
      if (!first) sb.append(", ");
      sb.append("memberRole:");
      if (this.memberRole == null) {
        sb.append("null");
      } else {
        sb.append(this.memberRole);
      }
      first = false;
    }
    if (isSetReport()) {
      if (!first) sb.append(", ");
      sb.append("report:");
      if (this.report == null) {
        sb.append("null");
      } else {
        sb.append(this.report);
      }
      first = false;
    }
    if (isSetRevocation()) {
      if (!first) sb.append(", ");
      sb.append("revocation:");
      if (this.revocation == null) {
        sb.append("null");
      } else {
        sb.append(this.revocation);
      }
      first = false;
    }
    if (isSetGroupScope()) {
      if (!first) sb.append(", ");
      sb.append("groupScope:");
      if (this.groupScope == null) {
        sb.append("null");
      } else {
        sb.append(this.groupScope);
      }
      first = false;
    }
    if (isSetOwnerTransfer()) {
      if (!first) sb.append(", ");
      sb.append("ownerTransfer:");
      if (this.ownerTransfer == null) {
        sb.append("null");
      } else {
        sb.append(this.ownerTransfer);
      }
      first = false;
    }
    if (isSetWelcome()) {
      if (!first) sb.append(", ");
      sb.append("welcome:");
      if (this.welcome == null) {
        sb.append("null");
      } else {
        sb.append(this.welcome);
      }
      first = false;
    }
    if (isSetClientUpdate()) {
      if (!first) sb.append(", ");
      sb.append("clientUpdate:");
      if (this.clientUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.clientUpdate);
      }
      first = false;
    }
    if (isSetCompleteInfo()) {
      if (!first) sb.append(", ");
      sb.append("completeInfo:");
      if (this.completeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.completeInfo);
      }
      first = false;
    }
    if (isSetPwdComplexUpdate()) {
      if (!first) sb.append(", ");
      sb.append("pwdComplexUpdate:");
      if (this.pwdComplexUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.pwdComplexUpdate);
      }
      first = false;
    }
    if (isSetPwdExpire()) {
      if (!first) sb.append(", ");
      sb.append("pwdExpire:");
      if (this.pwdExpire == null) {
        sb.append("null");
      } else {
        sb.append(this.pwdExpire);
      }
      first = false;
    }
    if (isSetPcGuide()) {
      if (!first) sb.append(", ");
      sb.append("pcGuide:");
      if (this.pcGuide == null) {
        sb.append("null");
      } else {
        sb.append(this.pcGuide);
      }
      first = false;
    }
    if (isSetMobileGuide()) {
      if (!first) sb.append(", ");
      sb.append("mobileGuide:");
      if (this.mobileGuide == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileGuide);
      }
      first = false;
    }
    if (isSetPwdModify()) {
      if (!first) sb.append(", ");
      sb.append("pwdModify:");
      if (this.pwdModify == null) {
        sb.append("null");
      } else {
        sb.append(this.pwdModify);
      }
      first = false;
    }
    if (isSetTagDel()) {
      if (!first) sb.append(", ");
      sb.append("tagDel:");
      if (this.tagDel == null) {
        sb.append("null");
      } else {
        sb.append(this.tagDel);
      }
      first = false;
    }
    if (isSetRemind()) {
      if (!first) sb.append(", ");
      sb.append("remind:");
      if (this.remind == null) {
        sb.append("null");
      } else {
        sb.append(this.remind);
      }
      first = false;
    }
    if (isSetDeptUpdate()) {
      if (!first) sb.append(", ");
      sb.append("deptUpdate:");
      if (this.deptUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.deptUpdate);
      }
      first = false;
    }
    if (isSetDeptTransfer()) {
      if (!first) sb.append(", ");
      sb.append("deptTransfer:");
      if (this.deptTransfer == null) {
        sb.append("null");
      } else {
        sb.append(this.deptTransfer);
      }
      first = false;
    }
    if (isSetPositionUpdate()) {
      if (!first) sb.append(", ");
      sb.append("positionUpdate:");
      if (this.positionUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.positionUpdate);
      }
      first = false;
    }
    if (isSetEmployeeEntry()) {
      if (!first) sb.append(", ");
      sb.append("employeeEntry:");
      if (this.employeeEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeEntry);
      }
      first = false;
    }
    if (isSetEmployeeLeave()) {
      if (!first) sb.append(", ");
      sb.append("employeeLeave:");
      if (this.employeeLeave == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeLeave);
      }
      first = false;
    }
    if (isSetEmployeeRights()) {
      if (!first) sb.append(", ");
      sb.append("employeeRights:");
      if (this.employeeRights == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeRights);
      }
      first = false;
    }
    if (isSetDeprtParentChange()) {
      if (!first) sb.append(", ");
      sb.append("deprtParentChange:");
      if (this.deprtParentChange == null) {
        sb.append("null");
      } else {
        sb.append(this.deprtParentChange);
      }
      first = false;
    }
    if (isSetCompanyJoin()) {
      if (!first) sb.append(", ");
      sb.append("companyJoin:");
      if (this.companyJoin == null) {
        sb.append("null");
      } else {
        sb.append(this.companyJoin);
      }
      first = false;
    }
    if (isSetDeptDelete()) {
      if (!first) sb.append(", ");
      sb.append("deptDelete:");
      if (this.deptDelete == null) {
        sb.append("null");
      } else {
        sb.append(this.deptDelete);
      }
      first = false;
    }
    if (isSetEntryConfirm()) {
      if (!first) sb.append(", ");
      sb.append("entryConfirm:");
      if (this.entryConfirm == null) {
        sb.append("null");
      } else {
        sb.append(this.entryConfirm);
      }
      first = false;
    }
    if (isSetLeaveConfirm()) {
      if (!first) sb.append(", ");
      sb.append("leaveConfirm:");
      if (this.leaveConfirm == null) {
        sb.append("null");
      } else {
        sb.append(this.leaveConfirm);
      }
      first = false;
    }
    if (isSetDeptConfirm()) {
      if (!first) sb.append(", ");
      sb.append("deptConfirm:");
      if (this.deptConfirm == null) {
        sb.append("null");
      } else {
        sb.append(this.deptConfirm);
      }
      first = false;
    }
    if (isSetInstantInvite()) {
      if (!first) sb.append(", ");
      sb.append("instantInvite:");
      if (this.instantInvite == null) {
        sb.append("null");
      } else {
        sb.append(this.instantInvite);
      }
      first = false;
    }
    if (isSetConfInvite()) {
      if (!first) sb.append(", ");
      sb.append("confInvite:");
      if (this.confInvite == null) {
        sb.append("null");
      } else {
        sb.append(this.confInvite);
      }
      first = false;
    }
    if (isSetConfReceive()) {
      if (!first) sb.append(", ");
      sb.append("confReceive:");
      if (this.confReceive == null) {
        sb.append("null");
      } else {
        sb.append(this.confReceive);
      }
      first = false;
    }
    if (isSetConfReject()) {
      if (!first) sb.append(", ");
      sb.append("confReject:");
      if (this.confReject == null) {
        sb.append("null");
      } else {
        sb.append(this.confReject);
      }
      first = false;
    }
    if (isSetConfCancel()) {
      if (!first) sb.append(", ");
      sb.append("confCancel:");
      if (this.confCancel == null) {
        sb.append("null");
      } else {
        sb.append(this.confCancel);
      }
      first = false;
    }
    if (isSetConfAlert()) {
      if (!first) sb.append(", ");
      sb.append("confAlert:");
      if (this.confAlert == null) {
        sb.append("null");
      } else {
        sb.append(this.confAlert);
      }
      first = false;
    }
    if (isSetInstantReceive()) {
      if (!first) sb.append(", ");
      sb.append("instantReceive:");
      if (this.instantReceive == null) {
        sb.append("null");
      } else {
        sb.append(this.instantReceive);
      }
      first = false;
    }
    if (isSetInstantReject()) {
      if (!first) sb.append(", ");
      sb.append("instantReject:");
      if (this.instantReject == null) {
        sb.append("null");
      } else {
        sb.append(this.instantReject);
      }
      first = false;
    }
    if (isSetConfChat()) {
      if (!first) sb.append(", ");
      sb.append("confChat:");
      if (this.confChat == null) {
        sb.append("null");
      } else {
        sb.append(this.confChat);
      }
      first = false;
    }
    if (isSetConfSummary()) {
      if (!first) sb.append(", ");
      sb.append("confSummary:");
      if (this.confSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.confSummary);
      }
      first = false;
    }
    if (isSetCallState()) {
      if (!first) sb.append(", ");
      sb.append("callState:");
      if (this.callState == null) {
        sb.append("null");
      } else {
        sb.append(this.callState);
      }
      first = false;
    }
    if (isSetConfUpload()) {
      if (!first) sb.append(", ");
      sb.append("confUpload:");
      if (this.confUpload == null) {
        sb.append("null");
      } else {
        sb.append(this.confUpload);
      }
      first = false;
    }
    if (isSetConfDocDel()) {
      if (!first) sb.append(", ");
      sb.append("confDocDel:");
      if (this.confDocDel == null) {
        sb.append("null");
      } else {
        sb.append(this.confDocDel);
      }
      first = false;
    }
    if (isSetCardUpdate()) {
      if (!first) sb.append(", ");
      sb.append("cardUpdate:");
      if (this.cardUpdate == null) {
        sb.append("null");
      } else {
        sb.append(this.cardUpdate);
      }
      first = false;
    }
    if (isSetContacterAdd()) {
      if (!first) sb.append(", ");
      sb.append("contacterAdd:");
      if (this.contacterAdd == null) {
        sb.append("null");
      } else {
        sb.append(this.contacterAdd);
      }
      first = false;
    }
    if (isSetContacterDel()) {
      if (!first) sb.append(", ");
      sb.append("contacterDel:");
      if (this.contacterDel == null) {
        sb.append("null");
      } else {
        sb.append(this.contacterDel);
      }
      first = false;
    }
    if (isSetAttentionCreate()) {
      if (!first) sb.append(", ");
      sb.append("attentionCreate:");
      if (this.attentionCreate == null) {
        sb.append("null");
      } else {
        sb.append(this.attentionCreate);
      }
      first = false;
    }
    if (isSetAttentionCancel()) {
      if (!first) sb.append(", ");
      sb.append("attentionCancel:");
      if (this.attentionCancel == null) {
        sb.append("null");
      } else {
        sb.append(this.attentionCancel);
      }
      first = false;
    }
    if (isSetTransInvite()) {
      if (!first) sb.append(", ");
      sb.append("transInvite:");
      if (this.transInvite == null) {
        sb.append("null");
      } else {
        sb.append(this.transInvite);
      }
      first = false;
    }
    if (isSetTransReceive()) {
      if (!first) sb.append(", ");
      sb.append("transReceive:");
      if (this.transReceive == null) {
        sb.append("null");
      } else {
        sb.append(this.transReceive);
      }
      first = false;
    }
    if (isSetTransReject()) {
      if (!first) sb.append(", ");
      sb.append("transReject:");
      if (this.transReject == null) {
        sb.append("null");
      } else {
        sb.append(this.transReject);
      }
      first = false;
    }
    if (isSetTransStop()) {
      if (!first) sb.append(", ");
      sb.append("transStop:");
      if (this.transStop == null) {
        sb.append("null");
      } else {
        sb.append(this.transStop);
      }
      first = false;
    }
    if (isSetAudioInvite()) {
      if (!first) sb.append(", ");
      sb.append("audioInvite:");
      if (this.audioInvite == null) {
        sb.append("null");
      } else {
        sb.append(this.audioInvite);
      }
      first = false;
    }
    if (isSetAudioReceive()) {
      if (!first) sb.append(", ");
      sb.append("audioReceive:");
      if (this.audioReceive == null) {
        sb.append("null");
      } else {
        sb.append(this.audioReceive);
      }
      first = false;
    }
    if (isSetAudioReject()) {
      if (!first) sb.append(", ");
      sb.append("audioReject:");
      if (this.audioReject == null) {
        sb.append("null");
      } else {
        sb.append(this.audioReject);
      }
      first = false;
    }
    if (isSetAudioStop()) {
      if (!first) sb.append(", ");
      sb.append("audioStop:");
      if (this.audioStop == null) {
        sb.append("null");
      } else {
        sb.append(this.audioStop);
      }
      first = false;
    }
    if (isSetCallRecent()) {
      if (!first) sb.append(", ");
      sb.append("callRecent:");
      if (this.callRecent == null) {
        sb.append("null");
      } else {
        sb.append(this.callRecent);
      }
      first = false;
    }
    if (isSetCallBlock()) {
      if (!first) sb.append(", ");
      sb.append("callBlock:");
      if (this.callBlock == null) {
        sb.append("null");
      } else {
        sb.append(this.callBlock);
      }
      first = false;
    }
    if (isSetCallReject()) {
      if (!first) sb.append(", ");
      sb.append("callReject:");
      if (this.callReject == null) {
        sb.append("null");
      } else {
        sb.append(this.callReject);
      }
      first = false;
    }
    if (isSetCallCancel()) {
      if (!first) sb.append(", ");
      sb.append("callCancel:");
      if (this.callCancel == null) {
        sb.append("null");
      } else {
        sb.append(this.callCancel);
      }
      first = false;
    }
    if (isSetConfShare()) {
      if (!first) sb.append(", ");
      sb.append("confShare:");
      if (this.confShare == null) {
        sb.append("null");
      } else {
        sb.append(this.confShare);
      }
      first = false;
    }
    if (isSetWbContent()) {
      if (!first) sb.append(", ");
      sb.append("wbContent:");
      if (this.wbContent == null) {
        sb.append("null");
      } else {
        sb.append(this.wbContent);
      }
      first = false;
    }
    if (isSetRemoteAssistanceInvite()) {
      if (!first) sb.append(", ");
      sb.append("remoteAssistanceInvite:");
      if (this.remoteAssistanceInvite == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAssistanceInvite);
      }
      first = false;
    }
    if (isSetRemoteAssistanceAccept()) {
      if (!first) sb.append(", ");
      sb.append("remoteAssistanceAccept:");
      if (this.remoteAssistanceAccept == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAssistanceAccept);
      }
      first = false;
    }
    if (isSetRemoteAssistanceReject()) {
      if (!first) sb.append(", ");
      sb.append("remoteAssistanceReject:");
      if (this.remoteAssistanceReject == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAssistanceReject);
      }
      first = false;
    }
    if (isSetRemoteAssistanceEnd()) {
      if (!first) sb.append(", ");
      sb.append("remoteAssistanceEnd:");
      if (this.remoteAssistanceEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAssistanceEnd);
      }
      first = false;
    }
    if (isSetRemoteAssistanceCancel()) {
      if (!first) sb.append(", ");
      sb.append("remoteAssistanceCancel:");
      if (this.remoteAssistanceCancel == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAssistanceCancel);
      }
      first = false;
    }
    if (isSetSessionTop()) {
      if (!first) sb.append(", ");
      sb.append("sessionTop:");
      if (this.sessionTop == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionTop);
      }
      first = false;
    }
    if (isSetAtMessageReaded()) {
      if (!first) sb.append(", ");
      sb.append("atMessageReaded:");
      if (this.atMessageReaded == null) {
        sb.append("null");
      } else {
        sb.append(this.atMessageReaded);
      }
      first = false;
    }
    if (isSetLoginNotify()) {
      if (!first) sb.append(", ");
      sb.append("loginNotify:");
      if (this.loginNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.loginNotify);
      }
      first = false;
    }
    if (isSetGroupScopeNotify()) {
      if (!first) sb.append(", ");
      sb.append("groupScopeNotify:");
      if (this.groupScopeNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.groupScopeNotify);
      }
      first = false;
    }
    if (isSetContactsRelationNotify()) {
      if (!first) sb.append(", ");
      sb.append("contactsRelationNotify:");
      if (this.contactsRelationNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.contactsRelationNotify);
      }
      first = false;
    }
    if (isSetMeetingAlertNotify()) {
      if (!first) sb.append(", ");
      sb.append("meetingAlertNotify:");
      if (this.meetingAlertNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingAlertNotify);
      }
      first = false;
    }
    if (isSetApiText()) {
      if (!first) sb.append(", ");
      sb.append("apiText:");
      if (this.apiText == null) {
        sb.append("null");
      } else {
        sb.append(this.apiText);
      }
      first = false;
    }
    if (isSetApiImage()) {
      if (!first) sb.append(", ");
      sb.append("apiImage:");
      if (this.apiImage == null) {
        sb.append("null");
      } else {
        sb.append(this.apiImage);
      }
      first = false;
    }
    if (isSetApiFile()) {
      if (!first) sb.append(", ");
      sb.append("apiFile:");
      if (this.apiFile == null) {
        sb.append("null");
      } else {
        sb.append(this.apiFile);
      }
      first = false;
    }
    if (isSetApiAckSent()) {
      if (!first) sb.append(", ");
      sb.append("apiAckSent:");
      if (this.apiAckSent == null) {
        sb.append("null");
      } else {
        sb.append(this.apiAckSent);
      }
      first = false;
    }
    if (isSetApiOA()) {
      if (!first) sb.append(", ");
      sb.append("apiOA:");
      if (this.apiOA == null) {
        sb.append("null");
      } else {
        sb.append(this.apiOA);
      }
      first = false;
    }
    if (isSetApiOAStatusChange()) {
      if (!first) sb.append(", ");
      sb.append("apiOAStatusChange:");
      if (this.apiOAStatusChange == null) {
        sb.append("null");
      } else {
        sb.append(this.apiOAStatusChange);
      }
      first = false;
    }
    if (isSetApiChangeNotify()) {
      if (!first) sb.append(", ");
      sb.append("apiChangeNotify:");
      if (this.apiChangeNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.apiChangeNotify);
      }
      first = false;
    }
    if (isSetApiEventNotify()) {
      if (!first) sb.append(", ");
      sb.append("apiEventNotify:");
      if (this.apiEventNotify == null) {
        sb.append("null");
      } else {
        sb.append(this.apiEventNotify);
      }
      first = false;
    }
    if (isSetApiCustomized()) {
      if (!first) sb.append(", ");
      sb.append("apiCustomized:");
      if (this.apiCustomized == null) {
        sb.append("null");
      } else {
        sb.append(this.apiCustomized);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (presence != null) {
      presence.validate();
    }
    if (ping != null) {
      ping.validate();
    }
    if (ackSent != null) {
      ackSent.validate();
    }
    if (ackReceived != null) {
      ackReceived.validate();
    }
    if (ackRead != null) {
      ackRead.validate();
    }
    if (sleep != null) {
      sleep.validate();
    }
    if (wakeupConfirm != null) {
      wakeupConfirm.validate();
    }
    if (ackPlay != null) {
      ackPlay.validate();
    }
    if (batchAckRead != null) {
      batchAckRead.validate();
    }
    if (text != null) {
      text.validate();
    }
    if (media != null) {
      media.validate();
    }
    if (groupAdd != null) {
      groupAdd.validate();
    }
    if (groupDel != null) {
      groupDel.validate();
    }
    if (groupUpdate != null) {
      groupUpdate.validate();
    }
    if (groupCreate != null) {
      groupCreate.validate();
    }
    if (groupTop != null) {
      groupTop.validate();
    }
    if (summaryCreate != null) {
      summaryCreate.validate();
    }
    if (docSend != null) {
      docSend.validate();
    }
    if (alertRule != null) {
      alertRule.validate();
    }
    if (groupClose != null) {
      groupClose.validate();
    }
    if (msgNotify != null) {
      msgNotify.validate();
    }
    if (groupKick != null) {
      groupKick.validate();
    }
    if (codeCreate != null) {
      codeCreate.validate();
    }
    if (codeDel != null) {
      codeDel.validate();
    }
    if (docDel != null) {
      docDel.validate();
    }
    if (commentCreate != null) {
      commentCreate.validate();
    }
    if (commentDel != null) {
      commentDel.validate();
    }
    if (groupAvatarUpdate != null) {
      groupAvatarUpdate.validate();
    }
    if (groupState != null) {
      groupState.validate();
    }
    if (cloudFile != null) {
      cloudFile.validate();
    }
    if (memberRole != null) {
      memberRole.validate();
    }
    if (report != null) {
      report.validate();
    }
    if (revocation != null) {
      revocation.validate();
    }
    if (groupScope != null) {
      groupScope.validate();
    }
    if (ownerTransfer != null) {
      ownerTransfer.validate();
    }
    if (welcome != null) {
      welcome.validate();
    }
    if (clientUpdate != null) {
      clientUpdate.validate();
    }
    if (completeInfo != null) {
      completeInfo.validate();
    }
    if (pwdComplexUpdate != null) {
      pwdComplexUpdate.validate();
    }
    if (pwdExpire != null) {
      pwdExpire.validate();
    }
    if (pcGuide != null) {
      pcGuide.validate();
    }
    if (mobileGuide != null) {
      mobileGuide.validate();
    }
    if (pwdModify != null) {
      pwdModify.validate();
    }
    if (tagDel != null) {
      tagDel.validate();
    }
    if (remind != null) {
      remind.validate();
    }
    if (deptUpdate != null) {
      deptUpdate.validate();
    }
    if (deptTransfer != null) {
      deptTransfer.validate();
    }
    if (positionUpdate != null) {
      positionUpdate.validate();
    }
    if (employeeEntry != null) {
      employeeEntry.validate();
    }
    if (employeeLeave != null) {
      employeeLeave.validate();
    }
    if (employeeRights != null) {
      employeeRights.validate();
    }
    if (deprtParentChange != null) {
      deprtParentChange.validate();
    }
    if (companyJoin != null) {
      companyJoin.validate();
    }
    if (deptDelete != null) {
      deptDelete.validate();
    }
    if (entryConfirm != null) {
      entryConfirm.validate();
    }
    if (leaveConfirm != null) {
      leaveConfirm.validate();
    }
    if (deptConfirm != null) {
      deptConfirm.validate();
    }
    if (instantInvite != null) {
      instantInvite.validate();
    }
    if (confInvite != null) {
      confInvite.validate();
    }
    if (confReceive != null) {
      confReceive.validate();
    }
    if (confReject != null) {
      confReject.validate();
    }
    if (confCancel != null) {
      confCancel.validate();
    }
    if (confAlert != null) {
      confAlert.validate();
    }
    if (instantReceive != null) {
      instantReceive.validate();
    }
    if (instantReject != null) {
      instantReject.validate();
    }
    if (confChat != null) {
      confChat.validate();
    }
    if (confSummary != null) {
      confSummary.validate();
    }
    if (callState != null) {
      callState.validate();
    }
    if (confUpload != null) {
      confUpload.validate();
    }
    if (confDocDel != null) {
      confDocDel.validate();
    }
    if (cardUpdate != null) {
      cardUpdate.validate();
    }
    if (contacterAdd != null) {
      contacterAdd.validate();
    }
    if (contacterDel != null) {
      contacterDel.validate();
    }
    if (attentionCreate != null) {
      attentionCreate.validate();
    }
    if (attentionCancel != null) {
      attentionCancel.validate();
    }
    if (transInvite != null) {
      transInvite.validate();
    }
    if (transReceive != null) {
      transReceive.validate();
    }
    if (transReject != null) {
      transReject.validate();
    }
    if (transStop != null) {
      transStop.validate();
    }
    if (audioInvite != null) {
      audioInvite.validate();
    }
    if (audioReceive != null) {
      audioReceive.validate();
    }
    if (audioReject != null) {
      audioReject.validate();
    }
    if (audioStop != null) {
      audioStop.validate();
    }
    if (callRecent != null) {
      callRecent.validate();
    }
    if (callBlock != null) {
      callBlock.validate();
    }
    if (callReject != null) {
      callReject.validate();
    }
    if (callCancel != null) {
      callCancel.validate();
    }
    if (confShare != null) {
      confShare.validate();
    }
    if (wbContent != null) {
      wbContent.validate();
    }
    if (remoteAssistanceInvite != null) {
      remoteAssistanceInvite.validate();
    }
    if (remoteAssistanceAccept != null) {
      remoteAssistanceAccept.validate();
    }
    if (remoteAssistanceReject != null) {
      remoteAssistanceReject.validate();
    }
    if (remoteAssistanceEnd != null) {
      remoteAssistanceEnd.validate();
    }
    if (remoteAssistanceCancel != null) {
      remoteAssistanceCancel.validate();
    }
    if (sessionTop != null) {
      sessionTop.validate();
    }
    if (atMessageReaded != null) {
      atMessageReaded.validate();
    }
    if (loginNotify != null) {
      loginNotify.validate();
    }
    if (groupScopeNotify != null) {
      groupScopeNotify.validate();
    }
    if (contactsRelationNotify != null) {
      contactsRelationNotify.validate();
    }
    if (meetingAlertNotify != null) {
      meetingAlertNotify.validate();
    }
    if (apiText != null) {
      apiText.validate();
    }
    if (apiImage != null) {
      apiImage.validate();
    }
    if (apiFile != null) {
      apiFile.validate();
    }
    if (apiAckSent != null) {
      apiAckSent.validate();
    }
    if (apiOA != null) {
      apiOA.validate();
    }
    if (apiOAStatusChange != null) {
      apiOAStatusChange.validate();
    }
    if (apiChangeNotify != null) {
      apiChangeNotify.validate();
    }
    if (apiEventNotify != null) {
      apiEventNotify.validate();
    }
    if (apiCustomized != null) {
      apiCustomized.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UcMessageBodyStandardSchemeFactory implements SchemeFactory {
    public UcMessageBodyStandardScheme getScheme() {
      return new UcMessageBodyStandardScheme();
    }
  }

  private static class UcMessageBodyStandardScheme extends StandardScheme<UcMessageBody> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UcMessageBody struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 15: // PRESENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.presence = new MessagePresence();
              struct.presence.read(iprot);
              struct.setPresenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ping = new MessagePing();
              struct.ping.read(iprot);
              struct.setPingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACK_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ackSent = new AckSent();
              struct.ackSent.read(iprot);
              struct.setAckSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ACK_RECEIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ackReceived = new AckReceived();
              struct.ackReceived.read(iprot);
              struct.setAckReceivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ACK_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ackRead = new AckRead();
              struct.ackRead.read(iprot);
              struct.setAckReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SLEEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sleep = new SleepSet();
              struct.sleep.read(iprot);
              struct.setSleepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // WAKEUP_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.wakeupConfirm = new WakeupResult();
              struct.wakeupConfirm.read(iprot);
              struct.setWakeupConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ACK_PLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ackPlay = new AckPlay();
              struct.ackPlay.read(iprot);
              struct.setAckPlayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // BATCH_ACK_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.batchAckRead = new BatchAckRead();
              struct.batchAckRead.read(iprot);
              struct.setBatchAckReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.text = new TextContent();
              struct.text.read(iprot);
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // MEDIA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.media = new MediaContent();
              struct.media.read(iprot);
              struct.setMediaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // GROUP_ADD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupAdd = new GroupMemberAddContent();
              struct.groupAdd.read(iprot);
              struct.setGroupAddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // GROUP_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupDel = new GroupMemberDelContent();
              struct.groupDel.read(iprot);
              struct.setGroupDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // GROUP_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupUpdate = new GroupNameUpdateContent();
              struct.groupUpdate.read(iprot);
              struct.setGroupUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // GROUP_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupCreate = new GroupCreateContent();
              struct.groupCreate.read(iprot);
              struct.setGroupCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // GROUP_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupTop = new GroupTopContent();
              struct.groupTop.read(iprot);
              struct.setGroupTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // SUMMARY_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.summaryCreate = new SummaryCreateContent();
              struct.summaryCreate.read(iprot);
              struct.setSummaryCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // DOC_SEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.docSend = new DocumentContent();
              struct.docSend.read(iprot);
              struct.setDocSendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // ALERT_RULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alertRule = new AlertRuleContent();
              struct.alertRule.read(iprot);
              struct.setAlertRuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // GROUP_CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupClose = new DiscussionClose();
              struct.groupClose.read(iprot);
              struct.setGroupCloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // MSG_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.msgNotify = new MsgNotifyContent();
              struct.msgNotify.read(iprot);
              struct.setMsgNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // GROUP_KICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupKick = new GroupMemberKickContent();
              struct.groupKick.read(iprot);
              struct.setGroupKickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // CODE_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.codeCreate = new CodeCreateContent();
              struct.codeCreate.read(iprot);
              struct.setCodeCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // CODE_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.codeDel = new CodeDelContent();
              struct.codeDel.read(iprot);
              struct.setCodeDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // DOC_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.docDel = new DocumentDelContent();
              struct.docDel.read(iprot);
              struct.setDocDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // COMMENT_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commentCreate = new CommentCreateContent();
              struct.commentCreate.read(iprot);
              struct.setCommentCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // COMMENT_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commentDel = new CommentDelContent();
              struct.commentDel.read(iprot);
              struct.setCommentDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // GROUP_AVATAR_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupAvatarUpdate = new GroupAvatarUpdateContent();
              struct.groupAvatarUpdate.read(iprot);
              struct.setGroupAvatarUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // GROUP_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupState = new GroupStateUpdateContent();
              struct.groupState.read(iprot);
              struct.setGroupStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // CLOUD_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cloudFile = new CloudFileContent();
              struct.cloudFile.read(iprot);
              struct.setCloudFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // MEMBER_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memberRole = new MemberRoleUpdateContent();
              struct.memberRole.read(iprot);
              struct.setMemberRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.report = new ReportContent();
              struct.report.read(iprot);
              struct.setReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // REVOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.revocation = new RevocationContent();
              struct.revocation.read(iprot);
              struct.setRevocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // GROUP_SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupScope = new GroupScopeContent();
              struct.groupScope.read(iprot);
              struct.setGroupScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // OWNER_TRANSFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ownerTransfer = new GroupOwnerTransferContent();
              struct.ownerTransfer.read(iprot);
              struct.setOwnerTransferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // WELCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.welcome = new SystemWelcomeContent();
              struct.welcome.read(iprot);
              struct.setWelcomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // CLIENT_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clientUpdate = new ClientUpdateContent();
              struct.clientUpdate.read(iprot);
              struct.setClientUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // COMPLETE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.completeInfo = new CompleteInfoContent();
              struct.completeInfo.read(iprot);
              struct.setCompleteInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // PWD_COMPLEX_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pwdComplexUpdate = new PwdComplexUpdateContent();
              struct.pwdComplexUpdate.read(iprot);
              struct.setPwdComplexUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // PWD_EXPIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pwdExpire = new PwdExpireContent();
              struct.pwdExpire.read(iprot);
              struct.setPwdExpireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // PC_GUIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pcGuide = new PCClientGuide();
              struct.pcGuide.read(iprot);
              struct.setPcGuideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // MOBILE_GUIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mobileGuide = new MobileClientGuide();
              struct.mobileGuide.read(iprot);
              struct.setMobileGuideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // PWD_MODIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pwdModify = new PasswordModifyContent();
              struct.pwdModify.read(iprot);
              struct.setPwdModifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // TAG_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tagDel = new TagDelContent();
              struct.tagDel.read(iprot);
              struct.setTagDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // REMIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remind = new GroupRemindContent();
              struct.remind.read(iprot);
              struct.setRemindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 150: // DEPT_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deptUpdate = new DeptUpdateContent();
              struct.deptUpdate.read(iprot);
              struct.setDeptUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 151: // DEPT_TRANSFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deptTransfer = new DeptTransferContent();
              struct.deptTransfer.read(iprot);
              struct.setDeptTransferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 152: // POSITION_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.positionUpdate = new PositionUpdateContent();
              struct.positionUpdate.read(iprot);
              struct.setPositionUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 153: // EMPLOYEE_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.employeeEntry = new EmployeeEntryContent();
              struct.employeeEntry.read(iprot);
              struct.setEmployeeEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 154: // EMPLOYEE_LEAVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.employeeLeave = new EmployeeLeaveContent();
              struct.employeeLeave.read(iprot);
              struct.setEmployeeLeaveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 155: // EMPLOYEE_RIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.employeeRights = new EmployeeRightsChangeContent();
              struct.employeeRights.read(iprot);
              struct.setEmployeeRightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 156: // DEPRT_PARENT_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deprtParentChange = new DeptParentChangeContent();
              struct.deprtParentChange.read(iprot);
              struct.setDeprtParentChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 157: // COMPANY_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.companyJoin = new CompanyJoinContent();
              struct.companyJoin.read(iprot);
              struct.setCompanyJoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 158: // DEPT_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deptDelete = new DeptDeleteContent();
              struct.deptDelete.read(iprot);
              struct.setDeptDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 159: // ENTRY_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entryConfirm = new EmployeeEntryConfirmContent();
              struct.entryConfirm.read(iprot);
              struct.setEntryConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 160: // LEAVE_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leaveConfirm = new EmployeeLeaveConfirmContent();
              struct.leaveConfirm.read(iprot);
              struct.setLeaveConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 161: // DEPT_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deptConfirm = new DeptTransferConfirmContent();
              struct.deptConfirm.read(iprot);
              struct.setDeptConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // INSTANT_INVITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.instantInvite = new InstantIQInviteContent();
              struct.instantInvite.read(iprot);
              struct.setInstantInviteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // CONF_INVITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confInvite = new IQInviteContent();
              struct.confInvite.read(iprot);
              struct.setConfInviteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 202: // CONF_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confReceive = new IQReceiveContent();
              struct.confReceive.read(iprot);
              struct.setConfReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 203: // CONF_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confReject = new IQRejectContent();
              struct.confReject.read(iprot);
              struct.setConfRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 204: // CONF_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confCancel = new ConfCancelContent();
              struct.confCancel.read(iprot);
              struct.setConfCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 205: // CONF_ALERT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confAlert = new ConfAlertContent();
              struct.confAlert.read(iprot);
              struct.setConfAlertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 207: // INSTANT_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.instantReceive = new InstantIQReceiveContent();
              struct.instantReceive.read(iprot);
              struct.setInstantReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 208: // INSTANT_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.instantReject = new InstantIQRejectContent();
              struct.instantReject.read(iprot);
              struct.setInstantRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 209: // CONF_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confChat = new ConfChatContent();
              struct.confChat.read(iprot);
              struct.setConfChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 210: // CONF_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confSummary = new ConfSummaryContent();
              struct.confSummary.read(iprot);
              struct.setConfSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 211: // CALL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callState = new CallStateContent();
              struct.callState.read(iprot);
              struct.setCallStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 212: // CONF_UPLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confUpload = new ConfUploadContent();
              struct.confUpload.read(iprot);
              struct.setConfUploadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 213: // CONF_DOC_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confDocDel = new ConfDelDocContent();
              struct.confDocDel.read(iprot);
              struct.setConfDocDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 250: // CARD_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cardUpdate = new CardUpdateContent();
              struct.cardUpdate.read(iprot);
              struct.setCardUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 251: // CONTACTER_ADD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contacterAdd = new ContacterAddContent();
              struct.contacterAdd.read(iprot);
              struct.setContacterAddIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 252: // CONTACTER_DEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contacterDel = new ContacterDelContent();
              struct.contacterDel.read(iprot);
              struct.setContacterDelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 253: // ATTENTION_CREATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.attentionCreate = new AttentionCreateContent();
              struct.attentionCreate.read(iprot);
              struct.setAttentionCreateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 254: // ATTENTION_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.attentionCancel = new AttentionCancelContent();
              struct.attentionCancel.read(iprot);
              struct.setAttentionCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 300: // TRANS_INVITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transInvite = new FileTransmissionInviteContent();
              struct.transInvite.read(iprot);
              struct.setTransInviteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 301: // TRANS_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transReceive = new FileTransmissionReceiveContent();
              struct.transReceive.read(iprot);
              struct.setTransReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 302: // TRANS_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transReject = new FileTransmissionRejectContent();
              struct.transReject.read(iprot);
              struct.setTransRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 303: // TRANS_STOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transStop = new FileTransmissionStopContent();
              struct.transStop.read(iprot);
              struct.setTransStopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 350: // AUDIO_INVITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioInvite = new AudioInviteContent();
              struct.audioInvite.read(iprot);
              struct.setAudioInviteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 351: // AUDIO_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioReceive = new AudioReceiveContent();
              struct.audioReceive.read(iprot);
              struct.setAudioReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 352: // AUDIO_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioReject = new AudioRejectContent();
              struct.audioReject.read(iprot);
              struct.setAudioRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 353: // AUDIO_STOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioStop = new AudioStopContent();
              struct.audioStop.read(iprot);
              struct.setAudioStopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 354: // CALL_RECENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callRecent = new AudioRecentCallContent();
              struct.callRecent.read(iprot);
              struct.setCallRecentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 355: // CALL_BLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callBlock = new AudioBlockCallContent();
              struct.callBlock.read(iprot);
              struct.setCallBlockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 356: // CALL_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callReject = new AudioRejectCallContent();
              struct.callReject.read(iprot);
              struct.setCallRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 357: // CALL_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callCancel = new AudioCancelCallContent();
              struct.callCancel.read(iprot);
              struct.setCallCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 400: // CONF_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.confShare = new ConfShareContent();
              struct.confShare.read(iprot);
              struct.setConfShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 450: // WB_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.wbContent = new WBMessageContent();
              struct.wbContent.read(iprot);
              struct.setWbContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 601: // REMOTE_ASSISTANCE_INVITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remoteAssistanceInvite = new RemoteAssistanceInviteContent();
              struct.remoteAssistanceInvite.read(iprot);
              struct.setRemoteAssistanceInviteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 602: // REMOTE_ASSISTANCE_ACCEPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remoteAssistanceAccept = new RemoteAssistanceAcceptContent();
              struct.remoteAssistanceAccept.read(iprot);
              struct.setRemoteAssistanceAcceptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 603: // REMOTE_ASSISTANCE_REJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remoteAssistanceReject = new RemoteAssistanceRejectContent();
              struct.remoteAssistanceReject.read(iprot);
              struct.setRemoteAssistanceRejectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 604: // REMOTE_ASSISTANCE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remoteAssistanceEnd = new RemoteAssistanceEndContent();
              struct.remoteAssistanceEnd.read(iprot);
              struct.setRemoteAssistanceEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 605: // REMOTE_ASSISTANCE_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remoteAssistanceCancel = new RemoteAssistanceCancelContent();
              struct.remoteAssistanceCancel.read(iprot);
              struct.setRemoteAssistanceCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 800: // SESSION_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sessionTop = new SessionTopContent();
              struct.sessionTop.read(iprot);
              struct.setSessionTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 801: // AT_MESSAGE_READED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.atMessageReaded = new AtMessageReadedContent();
              struct.atMessageReaded.read(iprot);
              struct.setAtMessageReadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 802: // LOGIN_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loginNotify = new UserLoginNotifyContent();
              struct.loginNotify.read(iprot);
              struct.setLoginNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 803: // GROUP_SCOPE_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupScopeNotify = new GroupScopeNotifyContent();
              struct.groupScopeNotify.read(iprot);
              struct.setGroupScopeNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 804: // CONTACTS_RELATION_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contactsRelationNotify = new ContactsRelationNotifyContent();
              struct.contactsRelationNotify.read(iprot);
              struct.setContactsRelationNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 805: // MEETING_ALERT_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.meetingAlertNotify = new MeetingAlertSettingNotifyContent();
              struct.meetingAlertNotify.read(iprot);
              struct.setMeetingAlertNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10000: // API_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiText = new APITextContent();
              struct.apiText.read(iprot);
              struct.setApiTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10001: // API_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiImage = new APIImageContent();
              struct.apiImage.read(iprot);
              struct.setApiImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10002: // API_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiFile = new APIFileContent();
              struct.apiFile.read(iprot);
              struct.setApiFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10003: // API_ACK_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiAckSent = new APIAckSentContent();
              struct.apiAckSent.read(iprot);
              struct.setApiAckSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10004: // API_OA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiOA = new APIOAContent();
              struct.apiOA.read(iprot);
              struct.setApiOAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10005: // API_OASTATUS_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiOAStatusChange = new APIOAStatusChangeContent();
              struct.apiOAStatusChange.read(iprot);
              struct.setApiOAStatusChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10006: // API_CHANGE_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiChangeNotify = new APIAppChangeNotifyContent();
              struct.apiChangeNotify.read(iprot);
              struct.setApiChangeNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10007: // API_EVENT_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiEventNotify = new APIAppEventChangeNotify();
              struct.apiEventNotify.read(iprot);
              struct.setApiEventNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10008: // API_CUSTOMIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.apiCustomized = new APICustomizedContent();
              struct.apiCustomized.read(iprot);
              struct.setApiCustomizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UcMessageBody struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.presence != null) {
        if (struct.isSetPresence()) {
          oprot.writeFieldBegin(PRESENCE_FIELD_DESC);
          struct.presence.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ping != null) {
        if (struct.isSetPing()) {
          oprot.writeFieldBegin(PING_FIELD_DESC);
          struct.ping.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ackSent != null) {
        if (struct.isSetAckSent()) {
          oprot.writeFieldBegin(ACK_SENT_FIELD_DESC);
          struct.ackSent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ackReceived != null) {
        if (struct.isSetAckReceived()) {
          oprot.writeFieldBegin(ACK_RECEIVED_FIELD_DESC);
          struct.ackReceived.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ackRead != null) {
        if (struct.isSetAckRead()) {
          oprot.writeFieldBegin(ACK_READ_FIELD_DESC);
          struct.ackRead.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sleep != null) {
        if (struct.isSetSleep()) {
          oprot.writeFieldBegin(SLEEP_FIELD_DESC);
          struct.sleep.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wakeupConfirm != null) {
        if (struct.isSetWakeupConfirm()) {
          oprot.writeFieldBegin(WAKEUP_CONFIRM_FIELD_DESC);
          struct.wakeupConfirm.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ackPlay != null) {
        if (struct.isSetAckPlay()) {
          oprot.writeFieldBegin(ACK_PLAY_FIELD_DESC);
          struct.ackPlay.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batchAckRead != null) {
        if (struct.isSetBatchAckRead()) {
          oprot.writeFieldBegin(BATCH_ACK_READ_FIELD_DESC);
          struct.batchAckRead.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          struct.text.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.media != null) {
        if (struct.isSetMedia()) {
          oprot.writeFieldBegin(MEDIA_FIELD_DESC);
          struct.media.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupAdd != null) {
        if (struct.isSetGroupAdd()) {
          oprot.writeFieldBegin(GROUP_ADD_FIELD_DESC);
          struct.groupAdd.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupDel != null) {
        if (struct.isSetGroupDel()) {
          oprot.writeFieldBegin(GROUP_DEL_FIELD_DESC);
          struct.groupDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupUpdate != null) {
        if (struct.isSetGroupUpdate()) {
          oprot.writeFieldBegin(GROUP_UPDATE_FIELD_DESC);
          struct.groupUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupCreate != null) {
        if (struct.isSetGroupCreate()) {
          oprot.writeFieldBegin(GROUP_CREATE_FIELD_DESC);
          struct.groupCreate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupTop != null) {
        if (struct.isSetGroupTop()) {
          oprot.writeFieldBegin(GROUP_TOP_FIELD_DESC);
          struct.groupTop.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.summaryCreate != null) {
        if (struct.isSetSummaryCreate()) {
          oprot.writeFieldBegin(SUMMARY_CREATE_FIELD_DESC);
          struct.summaryCreate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.docSend != null) {
        if (struct.isSetDocSend()) {
          oprot.writeFieldBegin(DOC_SEND_FIELD_DESC);
          struct.docSend.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alertRule != null) {
        if (struct.isSetAlertRule()) {
          oprot.writeFieldBegin(ALERT_RULE_FIELD_DESC);
          struct.alertRule.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupClose != null) {
        if (struct.isSetGroupClose()) {
          oprot.writeFieldBegin(GROUP_CLOSE_FIELD_DESC);
          struct.groupClose.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.msgNotify != null) {
        if (struct.isSetMsgNotify()) {
          oprot.writeFieldBegin(MSG_NOTIFY_FIELD_DESC);
          struct.msgNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupKick != null) {
        if (struct.isSetGroupKick()) {
          oprot.writeFieldBegin(GROUP_KICK_FIELD_DESC);
          struct.groupKick.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.codeCreate != null) {
        if (struct.isSetCodeCreate()) {
          oprot.writeFieldBegin(CODE_CREATE_FIELD_DESC);
          struct.codeCreate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.codeDel != null) {
        if (struct.isSetCodeDel()) {
          oprot.writeFieldBegin(CODE_DEL_FIELD_DESC);
          struct.codeDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.docDel != null) {
        if (struct.isSetDocDel()) {
          oprot.writeFieldBegin(DOC_DEL_FIELD_DESC);
          struct.docDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentCreate != null) {
        if (struct.isSetCommentCreate()) {
          oprot.writeFieldBegin(COMMENT_CREATE_FIELD_DESC);
          struct.commentCreate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentDel != null) {
        if (struct.isSetCommentDel()) {
          oprot.writeFieldBegin(COMMENT_DEL_FIELD_DESC);
          struct.commentDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupAvatarUpdate != null) {
        if (struct.isSetGroupAvatarUpdate()) {
          oprot.writeFieldBegin(GROUP_AVATAR_UPDATE_FIELD_DESC);
          struct.groupAvatarUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupState != null) {
        if (struct.isSetGroupState()) {
          oprot.writeFieldBegin(GROUP_STATE_FIELD_DESC);
          struct.groupState.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cloudFile != null) {
        if (struct.isSetCloudFile()) {
          oprot.writeFieldBegin(CLOUD_FILE_FIELD_DESC);
          struct.cloudFile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.memberRole != null) {
        if (struct.isSetMemberRole()) {
          oprot.writeFieldBegin(MEMBER_ROLE_FIELD_DESC);
          struct.memberRole.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.report != null) {
        if (struct.isSetReport()) {
          oprot.writeFieldBegin(REPORT_FIELD_DESC);
          struct.report.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.revocation != null) {
        if (struct.isSetRevocation()) {
          oprot.writeFieldBegin(REVOCATION_FIELD_DESC);
          struct.revocation.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupScope != null) {
        if (struct.isSetGroupScope()) {
          oprot.writeFieldBegin(GROUP_SCOPE_FIELD_DESC);
          struct.groupScope.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ownerTransfer != null) {
        if (struct.isSetOwnerTransfer()) {
          oprot.writeFieldBegin(OWNER_TRANSFER_FIELD_DESC);
          struct.ownerTransfer.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.welcome != null) {
        if (struct.isSetWelcome()) {
          oprot.writeFieldBegin(WELCOME_FIELD_DESC);
          struct.welcome.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientUpdate != null) {
        if (struct.isSetClientUpdate()) {
          oprot.writeFieldBegin(CLIENT_UPDATE_FIELD_DESC);
          struct.clientUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.completeInfo != null) {
        if (struct.isSetCompleteInfo()) {
          oprot.writeFieldBegin(COMPLETE_INFO_FIELD_DESC);
          struct.completeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pwdComplexUpdate != null) {
        if (struct.isSetPwdComplexUpdate()) {
          oprot.writeFieldBegin(PWD_COMPLEX_UPDATE_FIELD_DESC);
          struct.pwdComplexUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pwdExpire != null) {
        if (struct.isSetPwdExpire()) {
          oprot.writeFieldBegin(PWD_EXPIRE_FIELD_DESC);
          struct.pwdExpire.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pcGuide != null) {
        if (struct.isSetPcGuide()) {
          oprot.writeFieldBegin(PC_GUIDE_FIELD_DESC);
          struct.pcGuide.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileGuide != null) {
        if (struct.isSetMobileGuide()) {
          oprot.writeFieldBegin(MOBILE_GUIDE_FIELD_DESC);
          struct.mobileGuide.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pwdModify != null) {
        if (struct.isSetPwdModify()) {
          oprot.writeFieldBegin(PWD_MODIFY_FIELD_DESC);
          struct.pwdModify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagDel != null) {
        if (struct.isSetTagDel()) {
          oprot.writeFieldBegin(TAG_DEL_FIELD_DESC);
          struct.tagDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remind != null) {
        if (struct.isSetRemind()) {
          oprot.writeFieldBegin(REMIND_FIELD_DESC);
          struct.remind.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deptUpdate != null) {
        if (struct.isSetDeptUpdate()) {
          oprot.writeFieldBegin(DEPT_UPDATE_FIELD_DESC);
          struct.deptUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deptTransfer != null) {
        if (struct.isSetDeptTransfer()) {
          oprot.writeFieldBegin(DEPT_TRANSFER_FIELD_DESC);
          struct.deptTransfer.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionUpdate != null) {
        if (struct.isSetPositionUpdate()) {
          oprot.writeFieldBegin(POSITION_UPDATE_FIELD_DESC);
          struct.positionUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.employeeEntry != null) {
        if (struct.isSetEmployeeEntry()) {
          oprot.writeFieldBegin(EMPLOYEE_ENTRY_FIELD_DESC);
          struct.employeeEntry.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.employeeLeave != null) {
        if (struct.isSetEmployeeLeave()) {
          oprot.writeFieldBegin(EMPLOYEE_LEAVE_FIELD_DESC);
          struct.employeeLeave.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.employeeRights != null) {
        if (struct.isSetEmployeeRights()) {
          oprot.writeFieldBegin(EMPLOYEE_RIGHTS_FIELD_DESC);
          struct.employeeRights.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deprtParentChange != null) {
        if (struct.isSetDeprtParentChange()) {
          oprot.writeFieldBegin(DEPRT_PARENT_CHANGE_FIELD_DESC);
          struct.deprtParentChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyJoin != null) {
        if (struct.isSetCompanyJoin()) {
          oprot.writeFieldBegin(COMPANY_JOIN_FIELD_DESC);
          struct.companyJoin.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deptDelete != null) {
        if (struct.isSetDeptDelete()) {
          oprot.writeFieldBegin(DEPT_DELETE_FIELD_DESC);
          struct.deptDelete.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entryConfirm != null) {
        if (struct.isSetEntryConfirm()) {
          oprot.writeFieldBegin(ENTRY_CONFIRM_FIELD_DESC);
          struct.entryConfirm.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.leaveConfirm != null) {
        if (struct.isSetLeaveConfirm()) {
          oprot.writeFieldBegin(LEAVE_CONFIRM_FIELD_DESC);
          struct.leaveConfirm.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deptConfirm != null) {
        if (struct.isSetDeptConfirm()) {
          oprot.writeFieldBegin(DEPT_CONFIRM_FIELD_DESC);
          struct.deptConfirm.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instantInvite != null) {
        if (struct.isSetInstantInvite()) {
          oprot.writeFieldBegin(INSTANT_INVITE_FIELD_DESC);
          struct.instantInvite.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confInvite != null) {
        if (struct.isSetConfInvite()) {
          oprot.writeFieldBegin(CONF_INVITE_FIELD_DESC);
          struct.confInvite.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confReceive != null) {
        if (struct.isSetConfReceive()) {
          oprot.writeFieldBegin(CONF_RECEIVE_FIELD_DESC);
          struct.confReceive.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confReject != null) {
        if (struct.isSetConfReject()) {
          oprot.writeFieldBegin(CONF_REJECT_FIELD_DESC);
          struct.confReject.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confCancel != null) {
        if (struct.isSetConfCancel()) {
          oprot.writeFieldBegin(CONF_CANCEL_FIELD_DESC);
          struct.confCancel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confAlert != null) {
        if (struct.isSetConfAlert()) {
          oprot.writeFieldBegin(CONF_ALERT_FIELD_DESC);
          struct.confAlert.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instantReceive != null) {
        if (struct.isSetInstantReceive()) {
          oprot.writeFieldBegin(INSTANT_RECEIVE_FIELD_DESC);
          struct.instantReceive.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instantReject != null) {
        if (struct.isSetInstantReject()) {
          oprot.writeFieldBegin(INSTANT_REJECT_FIELD_DESC);
          struct.instantReject.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confChat != null) {
        if (struct.isSetConfChat()) {
          oprot.writeFieldBegin(CONF_CHAT_FIELD_DESC);
          struct.confChat.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confSummary != null) {
        if (struct.isSetConfSummary()) {
          oprot.writeFieldBegin(CONF_SUMMARY_FIELD_DESC);
          struct.confSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callState != null) {
        if (struct.isSetCallState()) {
          oprot.writeFieldBegin(CALL_STATE_FIELD_DESC);
          struct.callState.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confUpload != null) {
        if (struct.isSetConfUpload()) {
          oprot.writeFieldBegin(CONF_UPLOAD_FIELD_DESC);
          struct.confUpload.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confDocDel != null) {
        if (struct.isSetConfDocDel()) {
          oprot.writeFieldBegin(CONF_DOC_DEL_FIELD_DESC);
          struct.confDocDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardUpdate != null) {
        if (struct.isSetCardUpdate()) {
          oprot.writeFieldBegin(CARD_UPDATE_FIELD_DESC);
          struct.cardUpdate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contacterAdd != null) {
        if (struct.isSetContacterAdd()) {
          oprot.writeFieldBegin(CONTACTER_ADD_FIELD_DESC);
          struct.contacterAdd.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contacterDel != null) {
        if (struct.isSetContacterDel()) {
          oprot.writeFieldBegin(CONTACTER_DEL_FIELD_DESC);
          struct.contacterDel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attentionCreate != null) {
        if (struct.isSetAttentionCreate()) {
          oprot.writeFieldBegin(ATTENTION_CREATE_FIELD_DESC);
          struct.attentionCreate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attentionCancel != null) {
        if (struct.isSetAttentionCancel()) {
          oprot.writeFieldBegin(ATTENTION_CANCEL_FIELD_DESC);
          struct.attentionCancel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transInvite != null) {
        if (struct.isSetTransInvite()) {
          oprot.writeFieldBegin(TRANS_INVITE_FIELD_DESC);
          struct.transInvite.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transReceive != null) {
        if (struct.isSetTransReceive()) {
          oprot.writeFieldBegin(TRANS_RECEIVE_FIELD_DESC);
          struct.transReceive.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transReject != null) {
        if (struct.isSetTransReject()) {
          oprot.writeFieldBegin(TRANS_REJECT_FIELD_DESC);
          struct.transReject.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.transStop != null) {
        if (struct.isSetTransStop()) {
          oprot.writeFieldBegin(TRANS_STOP_FIELD_DESC);
          struct.transStop.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioInvite != null) {
        if (struct.isSetAudioInvite()) {
          oprot.writeFieldBegin(AUDIO_INVITE_FIELD_DESC);
          struct.audioInvite.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioReceive != null) {
        if (struct.isSetAudioReceive()) {
          oprot.writeFieldBegin(AUDIO_RECEIVE_FIELD_DESC);
          struct.audioReceive.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioReject != null) {
        if (struct.isSetAudioReject()) {
          oprot.writeFieldBegin(AUDIO_REJECT_FIELD_DESC);
          struct.audioReject.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioStop != null) {
        if (struct.isSetAudioStop()) {
          oprot.writeFieldBegin(AUDIO_STOP_FIELD_DESC);
          struct.audioStop.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callRecent != null) {
        if (struct.isSetCallRecent()) {
          oprot.writeFieldBegin(CALL_RECENT_FIELD_DESC);
          struct.callRecent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callBlock != null) {
        if (struct.isSetCallBlock()) {
          oprot.writeFieldBegin(CALL_BLOCK_FIELD_DESC);
          struct.callBlock.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callReject != null) {
        if (struct.isSetCallReject()) {
          oprot.writeFieldBegin(CALL_REJECT_FIELD_DESC);
          struct.callReject.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callCancel != null) {
        if (struct.isSetCallCancel()) {
          oprot.writeFieldBegin(CALL_CANCEL_FIELD_DESC);
          struct.callCancel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.confShare != null) {
        if (struct.isSetConfShare()) {
          oprot.writeFieldBegin(CONF_SHARE_FIELD_DESC);
          struct.confShare.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wbContent != null) {
        if (struct.isSetWbContent()) {
          oprot.writeFieldBegin(WB_CONTENT_FIELD_DESC);
          struct.wbContent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAssistanceInvite != null) {
        if (struct.isSetRemoteAssistanceInvite()) {
          oprot.writeFieldBegin(REMOTE_ASSISTANCE_INVITE_FIELD_DESC);
          struct.remoteAssistanceInvite.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAssistanceAccept != null) {
        if (struct.isSetRemoteAssistanceAccept()) {
          oprot.writeFieldBegin(REMOTE_ASSISTANCE_ACCEPT_FIELD_DESC);
          struct.remoteAssistanceAccept.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAssistanceReject != null) {
        if (struct.isSetRemoteAssistanceReject()) {
          oprot.writeFieldBegin(REMOTE_ASSISTANCE_REJECT_FIELD_DESC);
          struct.remoteAssistanceReject.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAssistanceEnd != null) {
        if (struct.isSetRemoteAssistanceEnd()) {
          oprot.writeFieldBegin(REMOTE_ASSISTANCE_END_FIELD_DESC);
          struct.remoteAssistanceEnd.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remoteAssistanceCancel != null) {
        if (struct.isSetRemoteAssistanceCancel()) {
          oprot.writeFieldBegin(REMOTE_ASSISTANCE_CANCEL_FIELD_DESC);
          struct.remoteAssistanceCancel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sessionTop != null) {
        if (struct.isSetSessionTop()) {
          oprot.writeFieldBegin(SESSION_TOP_FIELD_DESC);
          struct.sessionTop.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.atMessageReaded != null) {
        if (struct.isSetAtMessageReaded()) {
          oprot.writeFieldBegin(AT_MESSAGE_READED_FIELD_DESC);
          struct.atMessageReaded.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginNotify != null) {
        if (struct.isSetLoginNotify()) {
          oprot.writeFieldBegin(LOGIN_NOTIFY_FIELD_DESC);
          struct.loginNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupScopeNotify != null) {
        if (struct.isSetGroupScopeNotify()) {
          oprot.writeFieldBegin(GROUP_SCOPE_NOTIFY_FIELD_DESC);
          struct.groupScopeNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contactsRelationNotify != null) {
        if (struct.isSetContactsRelationNotify()) {
          oprot.writeFieldBegin(CONTACTS_RELATION_NOTIFY_FIELD_DESC);
          struct.contactsRelationNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.meetingAlertNotify != null) {
        if (struct.isSetMeetingAlertNotify()) {
          oprot.writeFieldBegin(MEETING_ALERT_NOTIFY_FIELD_DESC);
          struct.meetingAlertNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiText != null) {
        if (struct.isSetApiText()) {
          oprot.writeFieldBegin(API_TEXT_FIELD_DESC);
          struct.apiText.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiImage != null) {
        if (struct.isSetApiImage()) {
          oprot.writeFieldBegin(API_IMAGE_FIELD_DESC);
          struct.apiImage.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiFile != null) {
        if (struct.isSetApiFile()) {
          oprot.writeFieldBegin(API_FILE_FIELD_DESC);
          struct.apiFile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiAckSent != null) {
        if (struct.isSetApiAckSent()) {
          oprot.writeFieldBegin(API_ACK_SENT_FIELD_DESC);
          struct.apiAckSent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiOA != null) {
        if (struct.isSetApiOA()) {
          oprot.writeFieldBegin(API_OA_FIELD_DESC);
          struct.apiOA.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiOAStatusChange != null) {
        if (struct.isSetApiOAStatusChange()) {
          oprot.writeFieldBegin(API_OASTATUS_CHANGE_FIELD_DESC);
          struct.apiOAStatusChange.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiChangeNotify != null) {
        if (struct.isSetApiChangeNotify()) {
          oprot.writeFieldBegin(API_CHANGE_NOTIFY_FIELD_DESC);
          struct.apiChangeNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiEventNotify != null) {
        if (struct.isSetApiEventNotify()) {
          oprot.writeFieldBegin(API_EVENT_NOTIFY_FIELD_DESC);
          struct.apiEventNotify.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.apiCustomized != null) {
        if (struct.isSetApiCustomized()) {
          oprot.writeFieldBegin(API_CUSTOMIZED_FIELD_DESC);
          struct.apiCustomized.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UcMessageBodyTupleSchemeFactory implements SchemeFactory {
    public UcMessageBodyTupleScheme getScheme() {
      return new UcMessageBodyTupleScheme();
    }
  }

  private static class UcMessageBodyTupleScheme extends TupleScheme<UcMessageBody> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UcMessageBody struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPresence()) {
        optionals.set(0);
      }
      if (struct.isSetPing()) {
        optionals.set(1);
      }
      if (struct.isSetAckSent()) {
        optionals.set(2);
      }
      if (struct.isSetAckReceived()) {
        optionals.set(3);
      }
      if (struct.isSetAckRead()) {
        optionals.set(4);
      }
      if (struct.isSetSleep()) {
        optionals.set(5);
      }
      if (struct.isSetWakeupConfirm()) {
        optionals.set(6);
      }
      if (struct.isSetAckPlay()) {
        optionals.set(7);
      }
      if (struct.isSetBatchAckRead()) {
        optionals.set(8);
      }
      if (struct.isSetText()) {
        optionals.set(9);
      }
      if (struct.isSetMedia()) {
        optionals.set(10);
      }
      if (struct.isSetGroupAdd()) {
        optionals.set(11);
      }
      if (struct.isSetGroupDel()) {
        optionals.set(12);
      }
      if (struct.isSetGroupUpdate()) {
        optionals.set(13);
      }
      if (struct.isSetGroupCreate()) {
        optionals.set(14);
      }
      if (struct.isSetGroupTop()) {
        optionals.set(15);
      }
      if (struct.isSetSummaryCreate()) {
        optionals.set(16);
      }
      if (struct.isSetDocSend()) {
        optionals.set(17);
      }
      if (struct.isSetAlertRule()) {
        optionals.set(18);
      }
      if (struct.isSetGroupClose()) {
        optionals.set(19);
      }
      if (struct.isSetMsgNotify()) {
        optionals.set(20);
      }
      if (struct.isSetGroupKick()) {
        optionals.set(21);
      }
      if (struct.isSetCodeCreate()) {
        optionals.set(22);
      }
      if (struct.isSetCodeDel()) {
        optionals.set(23);
      }
      if (struct.isSetDocDel()) {
        optionals.set(24);
      }
      if (struct.isSetCommentCreate()) {
        optionals.set(25);
      }
      if (struct.isSetCommentDel()) {
        optionals.set(26);
      }
      if (struct.isSetGroupAvatarUpdate()) {
        optionals.set(27);
      }
      if (struct.isSetGroupState()) {
        optionals.set(28);
      }
      if (struct.isSetCloudFile()) {
        optionals.set(29);
      }
      if (struct.isSetMemberRole()) {
        optionals.set(30);
      }
      if (struct.isSetReport()) {
        optionals.set(31);
      }
      if (struct.isSetRevocation()) {
        optionals.set(32);
      }
      if (struct.isSetGroupScope()) {
        optionals.set(33);
      }
      if (struct.isSetOwnerTransfer()) {
        optionals.set(34);
      }
      if (struct.isSetWelcome()) {
        optionals.set(35);
      }
      if (struct.isSetClientUpdate()) {
        optionals.set(36);
      }
      if (struct.isSetCompleteInfo()) {
        optionals.set(37);
      }
      if (struct.isSetPwdComplexUpdate()) {
        optionals.set(38);
      }
      if (struct.isSetPwdExpire()) {
        optionals.set(39);
      }
      if (struct.isSetPcGuide()) {
        optionals.set(40);
      }
      if (struct.isSetMobileGuide()) {
        optionals.set(41);
      }
      if (struct.isSetPwdModify()) {
        optionals.set(42);
      }
      if (struct.isSetTagDel()) {
        optionals.set(43);
      }
      if (struct.isSetRemind()) {
        optionals.set(44);
      }
      if (struct.isSetDeptUpdate()) {
        optionals.set(45);
      }
      if (struct.isSetDeptTransfer()) {
        optionals.set(46);
      }
      if (struct.isSetPositionUpdate()) {
        optionals.set(47);
      }
      if (struct.isSetEmployeeEntry()) {
        optionals.set(48);
      }
      if (struct.isSetEmployeeLeave()) {
        optionals.set(49);
      }
      if (struct.isSetEmployeeRights()) {
        optionals.set(50);
      }
      if (struct.isSetDeprtParentChange()) {
        optionals.set(51);
      }
      if (struct.isSetCompanyJoin()) {
        optionals.set(52);
      }
      if (struct.isSetDeptDelete()) {
        optionals.set(53);
      }
      if (struct.isSetEntryConfirm()) {
        optionals.set(54);
      }
      if (struct.isSetLeaveConfirm()) {
        optionals.set(55);
      }
      if (struct.isSetDeptConfirm()) {
        optionals.set(56);
      }
      if (struct.isSetInstantInvite()) {
        optionals.set(57);
      }
      if (struct.isSetConfInvite()) {
        optionals.set(58);
      }
      if (struct.isSetConfReceive()) {
        optionals.set(59);
      }
      if (struct.isSetConfReject()) {
        optionals.set(60);
      }
      if (struct.isSetConfCancel()) {
        optionals.set(61);
      }
      if (struct.isSetConfAlert()) {
        optionals.set(62);
      }
      if (struct.isSetInstantReceive()) {
        optionals.set(63);
      }
      if (struct.isSetInstantReject()) {
        optionals.set(64);
      }
      if (struct.isSetConfChat()) {
        optionals.set(65);
      }
      if (struct.isSetConfSummary()) {
        optionals.set(66);
      }
      if (struct.isSetCallState()) {
        optionals.set(67);
      }
      if (struct.isSetConfUpload()) {
        optionals.set(68);
      }
      if (struct.isSetConfDocDel()) {
        optionals.set(69);
      }
      if (struct.isSetCardUpdate()) {
        optionals.set(70);
      }
      if (struct.isSetContacterAdd()) {
        optionals.set(71);
      }
      if (struct.isSetContacterDel()) {
        optionals.set(72);
      }
      if (struct.isSetAttentionCreate()) {
        optionals.set(73);
      }
      if (struct.isSetAttentionCancel()) {
        optionals.set(74);
      }
      if (struct.isSetTransInvite()) {
        optionals.set(75);
      }
      if (struct.isSetTransReceive()) {
        optionals.set(76);
      }
      if (struct.isSetTransReject()) {
        optionals.set(77);
      }
      if (struct.isSetTransStop()) {
        optionals.set(78);
      }
      if (struct.isSetAudioInvite()) {
        optionals.set(79);
      }
      if (struct.isSetAudioReceive()) {
        optionals.set(80);
      }
      if (struct.isSetAudioReject()) {
        optionals.set(81);
      }
      if (struct.isSetAudioStop()) {
        optionals.set(82);
      }
      if (struct.isSetCallRecent()) {
        optionals.set(83);
      }
      if (struct.isSetCallBlock()) {
        optionals.set(84);
      }
      if (struct.isSetCallReject()) {
        optionals.set(85);
      }
      if (struct.isSetCallCancel()) {
        optionals.set(86);
      }
      if (struct.isSetConfShare()) {
        optionals.set(87);
      }
      if (struct.isSetWbContent()) {
        optionals.set(88);
      }
      if (struct.isSetRemoteAssistanceInvite()) {
        optionals.set(89);
      }
      if (struct.isSetRemoteAssistanceAccept()) {
        optionals.set(90);
      }
      if (struct.isSetRemoteAssistanceReject()) {
        optionals.set(91);
      }
      if (struct.isSetRemoteAssistanceEnd()) {
        optionals.set(92);
      }
      if (struct.isSetRemoteAssistanceCancel()) {
        optionals.set(93);
      }
      if (struct.isSetSessionTop()) {
        optionals.set(94);
      }
      if (struct.isSetAtMessageReaded()) {
        optionals.set(95);
      }
      if (struct.isSetLoginNotify()) {
        optionals.set(96);
      }
      if (struct.isSetGroupScopeNotify()) {
        optionals.set(97);
      }
      if (struct.isSetContactsRelationNotify()) {
        optionals.set(98);
      }
      if (struct.isSetMeetingAlertNotify()) {
        optionals.set(99);
      }
      if (struct.isSetApiText()) {
        optionals.set(100);
      }
      if (struct.isSetApiImage()) {
        optionals.set(101);
      }
      if (struct.isSetApiFile()) {
        optionals.set(102);
      }
      if (struct.isSetApiAckSent()) {
        optionals.set(103);
      }
      if (struct.isSetApiOA()) {
        optionals.set(104);
      }
      if (struct.isSetApiOAStatusChange()) {
        optionals.set(105);
      }
      if (struct.isSetApiChangeNotify()) {
        optionals.set(106);
      }
      if (struct.isSetApiEventNotify()) {
        optionals.set(107);
      }
      if (struct.isSetApiCustomized()) {
        optionals.set(108);
      }
      oprot.writeBitSet(optionals, 109);
      if (struct.isSetPresence()) {
        struct.presence.write(oprot);
      }
      if (struct.isSetPing()) {
        struct.ping.write(oprot);
      }
      if (struct.isSetAckSent()) {
        struct.ackSent.write(oprot);
      }
      if (struct.isSetAckReceived()) {
        struct.ackReceived.write(oprot);
      }
      if (struct.isSetAckRead()) {
        struct.ackRead.write(oprot);
      }
      if (struct.isSetSleep()) {
        struct.sleep.write(oprot);
      }
      if (struct.isSetWakeupConfirm()) {
        struct.wakeupConfirm.write(oprot);
      }
      if (struct.isSetAckPlay()) {
        struct.ackPlay.write(oprot);
      }
      if (struct.isSetBatchAckRead()) {
        struct.batchAckRead.write(oprot);
      }
      if (struct.isSetText()) {
        struct.text.write(oprot);
      }
      if (struct.isSetMedia()) {
        struct.media.write(oprot);
      }
      if (struct.isSetGroupAdd()) {
        struct.groupAdd.write(oprot);
      }
      if (struct.isSetGroupDel()) {
        struct.groupDel.write(oprot);
      }
      if (struct.isSetGroupUpdate()) {
        struct.groupUpdate.write(oprot);
      }
      if (struct.isSetGroupCreate()) {
        struct.groupCreate.write(oprot);
      }
      if (struct.isSetGroupTop()) {
        struct.groupTop.write(oprot);
      }
      if (struct.isSetSummaryCreate()) {
        struct.summaryCreate.write(oprot);
      }
      if (struct.isSetDocSend()) {
        struct.docSend.write(oprot);
      }
      if (struct.isSetAlertRule()) {
        struct.alertRule.write(oprot);
      }
      if (struct.isSetGroupClose()) {
        struct.groupClose.write(oprot);
      }
      if (struct.isSetMsgNotify()) {
        struct.msgNotify.write(oprot);
      }
      if (struct.isSetGroupKick()) {
        struct.groupKick.write(oprot);
      }
      if (struct.isSetCodeCreate()) {
        struct.codeCreate.write(oprot);
      }
      if (struct.isSetCodeDel()) {
        struct.codeDel.write(oprot);
      }
      if (struct.isSetDocDel()) {
        struct.docDel.write(oprot);
      }
      if (struct.isSetCommentCreate()) {
        struct.commentCreate.write(oprot);
      }
      if (struct.isSetCommentDel()) {
        struct.commentDel.write(oprot);
      }
      if (struct.isSetGroupAvatarUpdate()) {
        struct.groupAvatarUpdate.write(oprot);
      }
      if (struct.isSetGroupState()) {
        struct.groupState.write(oprot);
      }
      if (struct.isSetCloudFile()) {
        struct.cloudFile.write(oprot);
      }
      if (struct.isSetMemberRole()) {
        struct.memberRole.write(oprot);
      }
      if (struct.isSetReport()) {
        struct.report.write(oprot);
      }
      if (struct.isSetRevocation()) {
        struct.revocation.write(oprot);
      }
      if (struct.isSetGroupScope()) {
        struct.groupScope.write(oprot);
      }
      if (struct.isSetOwnerTransfer()) {
        struct.ownerTransfer.write(oprot);
      }
      if (struct.isSetWelcome()) {
        struct.welcome.write(oprot);
      }
      if (struct.isSetClientUpdate()) {
        struct.clientUpdate.write(oprot);
      }
      if (struct.isSetCompleteInfo()) {
        struct.completeInfo.write(oprot);
      }
      if (struct.isSetPwdComplexUpdate()) {
        struct.pwdComplexUpdate.write(oprot);
      }
      if (struct.isSetPwdExpire()) {
        struct.pwdExpire.write(oprot);
      }
      if (struct.isSetPcGuide()) {
        struct.pcGuide.write(oprot);
      }
      if (struct.isSetMobileGuide()) {
        struct.mobileGuide.write(oprot);
      }
      if (struct.isSetPwdModify()) {
        struct.pwdModify.write(oprot);
      }
      if (struct.isSetTagDel()) {
        struct.tagDel.write(oprot);
      }
      if (struct.isSetRemind()) {
        struct.remind.write(oprot);
      }
      if (struct.isSetDeptUpdate()) {
        struct.deptUpdate.write(oprot);
      }
      if (struct.isSetDeptTransfer()) {
        struct.deptTransfer.write(oprot);
      }
      if (struct.isSetPositionUpdate()) {
        struct.positionUpdate.write(oprot);
      }
      if (struct.isSetEmployeeEntry()) {
        struct.employeeEntry.write(oprot);
      }
      if (struct.isSetEmployeeLeave()) {
        struct.employeeLeave.write(oprot);
      }
      if (struct.isSetEmployeeRights()) {
        struct.employeeRights.write(oprot);
      }
      if (struct.isSetDeprtParentChange()) {
        struct.deprtParentChange.write(oprot);
      }
      if (struct.isSetCompanyJoin()) {
        struct.companyJoin.write(oprot);
      }
      if (struct.isSetDeptDelete()) {
        struct.deptDelete.write(oprot);
      }
      if (struct.isSetEntryConfirm()) {
        struct.entryConfirm.write(oprot);
      }
      if (struct.isSetLeaveConfirm()) {
        struct.leaveConfirm.write(oprot);
      }
      if (struct.isSetDeptConfirm()) {
        struct.deptConfirm.write(oprot);
      }
      if (struct.isSetInstantInvite()) {
        struct.instantInvite.write(oprot);
      }
      if (struct.isSetConfInvite()) {
        struct.confInvite.write(oprot);
      }
      if (struct.isSetConfReceive()) {
        struct.confReceive.write(oprot);
      }
      if (struct.isSetConfReject()) {
        struct.confReject.write(oprot);
      }
      if (struct.isSetConfCancel()) {
        struct.confCancel.write(oprot);
      }
      if (struct.isSetConfAlert()) {
        struct.confAlert.write(oprot);
      }
      if (struct.isSetInstantReceive()) {
        struct.instantReceive.write(oprot);
      }
      if (struct.isSetInstantReject()) {
        struct.instantReject.write(oprot);
      }
      if (struct.isSetConfChat()) {
        struct.confChat.write(oprot);
      }
      if (struct.isSetConfSummary()) {
        struct.confSummary.write(oprot);
      }
      if (struct.isSetCallState()) {
        struct.callState.write(oprot);
      }
      if (struct.isSetConfUpload()) {
        struct.confUpload.write(oprot);
      }
      if (struct.isSetConfDocDel()) {
        struct.confDocDel.write(oprot);
      }
      if (struct.isSetCardUpdate()) {
        struct.cardUpdate.write(oprot);
      }
      if (struct.isSetContacterAdd()) {
        struct.contacterAdd.write(oprot);
      }
      if (struct.isSetContacterDel()) {
        struct.contacterDel.write(oprot);
      }
      if (struct.isSetAttentionCreate()) {
        struct.attentionCreate.write(oprot);
      }
      if (struct.isSetAttentionCancel()) {
        struct.attentionCancel.write(oprot);
      }
      if (struct.isSetTransInvite()) {
        struct.transInvite.write(oprot);
      }
      if (struct.isSetTransReceive()) {
        struct.transReceive.write(oprot);
      }
      if (struct.isSetTransReject()) {
        struct.transReject.write(oprot);
      }
      if (struct.isSetTransStop()) {
        struct.transStop.write(oprot);
      }
      if (struct.isSetAudioInvite()) {
        struct.audioInvite.write(oprot);
      }
      if (struct.isSetAudioReceive()) {
        struct.audioReceive.write(oprot);
      }
      if (struct.isSetAudioReject()) {
        struct.audioReject.write(oprot);
      }
      if (struct.isSetAudioStop()) {
        struct.audioStop.write(oprot);
      }
      if (struct.isSetCallRecent()) {
        struct.callRecent.write(oprot);
      }
      if (struct.isSetCallBlock()) {
        struct.callBlock.write(oprot);
      }
      if (struct.isSetCallReject()) {
        struct.callReject.write(oprot);
      }
      if (struct.isSetCallCancel()) {
        struct.callCancel.write(oprot);
      }
      if (struct.isSetConfShare()) {
        struct.confShare.write(oprot);
      }
      if (struct.isSetWbContent()) {
        struct.wbContent.write(oprot);
      }
      if (struct.isSetRemoteAssistanceInvite()) {
        struct.remoteAssistanceInvite.write(oprot);
      }
      if (struct.isSetRemoteAssistanceAccept()) {
        struct.remoteAssistanceAccept.write(oprot);
      }
      if (struct.isSetRemoteAssistanceReject()) {
        struct.remoteAssistanceReject.write(oprot);
      }
      if (struct.isSetRemoteAssistanceEnd()) {
        struct.remoteAssistanceEnd.write(oprot);
      }
      if (struct.isSetRemoteAssistanceCancel()) {
        struct.remoteAssistanceCancel.write(oprot);
      }
      if (struct.isSetSessionTop()) {
        struct.sessionTop.write(oprot);
      }
      if (struct.isSetAtMessageReaded()) {
        struct.atMessageReaded.write(oprot);
      }
      if (struct.isSetLoginNotify()) {
        struct.loginNotify.write(oprot);
      }
      if (struct.isSetGroupScopeNotify()) {
        struct.groupScopeNotify.write(oprot);
      }
      if (struct.isSetContactsRelationNotify()) {
        struct.contactsRelationNotify.write(oprot);
      }
      if (struct.isSetMeetingAlertNotify()) {
        struct.meetingAlertNotify.write(oprot);
      }
      if (struct.isSetApiText()) {
        struct.apiText.write(oprot);
      }
      if (struct.isSetApiImage()) {
        struct.apiImage.write(oprot);
      }
      if (struct.isSetApiFile()) {
        struct.apiFile.write(oprot);
      }
      if (struct.isSetApiAckSent()) {
        struct.apiAckSent.write(oprot);
      }
      if (struct.isSetApiOA()) {
        struct.apiOA.write(oprot);
      }
      if (struct.isSetApiOAStatusChange()) {
        struct.apiOAStatusChange.write(oprot);
      }
      if (struct.isSetApiChangeNotify()) {
        struct.apiChangeNotify.write(oprot);
      }
      if (struct.isSetApiEventNotify()) {
        struct.apiEventNotify.write(oprot);
      }
      if (struct.isSetApiCustomized()) {
        struct.apiCustomized.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UcMessageBody struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(109);
      if (incoming.get(0)) {
        struct.presence = new MessagePresence();
        struct.presence.read(iprot);
        struct.setPresenceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ping = new MessagePing();
        struct.ping.read(iprot);
        struct.setPingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ackSent = new AckSent();
        struct.ackSent.read(iprot);
        struct.setAckSentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ackReceived = new AckReceived();
        struct.ackReceived.read(iprot);
        struct.setAckReceivedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ackRead = new AckRead();
        struct.ackRead.read(iprot);
        struct.setAckReadIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sleep = new SleepSet();
        struct.sleep.read(iprot);
        struct.setSleepIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wakeupConfirm = new WakeupResult();
        struct.wakeupConfirm.read(iprot);
        struct.setWakeupConfirmIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ackPlay = new AckPlay();
        struct.ackPlay.read(iprot);
        struct.setAckPlayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.batchAckRead = new BatchAckRead();
        struct.batchAckRead.read(iprot);
        struct.setBatchAckReadIsSet(true);
      }
      if (incoming.get(9)) {
        struct.text = new TextContent();
        struct.text.read(iprot);
        struct.setTextIsSet(true);
      }
      if (incoming.get(10)) {
        struct.media = new MediaContent();
        struct.media.read(iprot);
        struct.setMediaIsSet(true);
      }
      if (incoming.get(11)) {
        struct.groupAdd = new GroupMemberAddContent();
        struct.groupAdd.read(iprot);
        struct.setGroupAddIsSet(true);
      }
      if (incoming.get(12)) {
        struct.groupDel = new GroupMemberDelContent();
        struct.groupDel.read(iprot);
        struct.setGroupDelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.groupUpdate = new GroupNameUpdateContent();
        struct.groupUpdate.read(iprot);
        struct.setGroupUpdateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.groupCreate = new GroupCreateContent();
        struct.groupCreate.read(iprot);
        struct.setGroupCreateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.groupTop = new GroupTopContent();
        struct.groupTop.read(iprot);
        struct.setGroupTopIsSet(true);
      }
      if (incoming.get(16)) {
        struct.summaryCreate = new SummaryCreateContent();
        struct.summaryCreate.read(iprot);
        struct.setSummaryCreateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.docSend = new DocumentContent();
        struct.docSend.read(iprot);
        struct.setDocSendIsSet(true);
      }
      if (incoming.get(18)) {
        struct.alertRule = new AlertRuleContent();
        struct.alertRule.read(iprot);
        struct.setAlertRuleIsSet(true);
      }
      if (incoming.get(19)) {
        struct.groupClose = new DiscussionClose();
        struct.groupClose.read(iprot);
        struct.setGroupCloseIsSet(true);
      }
      if (incoming.get(20)) {
        struct.msgNotify = new MsgNotifyContent();
        struct.msgNotify.read(iprot);
        struct.setMsgNotifyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.groupKick = new GroupMemberKickContent();
        struct.groupKick.read(iprot);
        struct.setGroupKickIsSet(true);
      }
      if (incoming.get(22)) {
        struct.codeCreate = new CodeCreateContent();
        struct.codeCreate.read(iprot);
        struct.setCodeCreateIsSet(true);
      }
      if (incoming.get(23)) {
        struct.codeDel = new CodeDelContent();
        struct.codeDel.read(iprot);
        struct.setCodeDelIsSet(true);
      }
      if (incoming.get(24)) {
        struct.docDel = new DocumentDelContent();
        struct.docDel.read(iprot);
        struct.setDocDelIsSet(true);
      }
      if (incoming.get(25)) {
        struct.commentCreate = new CommentCreateContent();
        struct.commentCreate.read(iprot);
        struct.setCommentCreateIsSet(true);
      }
      if (incoming.get(26)) {
        struct.commentDel = new CommentDelContent();
        struct.commentDel.read(iprot);
        struct.setCommentDelIsSet(true);
      }
      if (incoming.get(27)) {
        struct.groupAvatarUpdate = new GroupAvatarUpdateContent();
        struct.groupAvatarUpdate.read(iprot);
        struct.setGroupAvatarUpdateIsSet(true);
      }
      if (incoming.get(28)) {
        struct.groupState = new GroupStateUpdateContent();
        struct.groupState.read(iprot);
        struct.setGroupStateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.cloudFile = new CloudFileContent();
        struct.cloudFile.read(iprot);
        struct.setCloudFileIsSet(true);
      }
      if (incoming.get(30)) {
        struct.memberRole = new MemberRoleUpdateContent();
        struct.memberRole.read(iprot);
        struct.setMemberRoleIsSet(true);
      }
      if (incoming.get(31)) {
        struct.report = new ReportContent();
        struct.report.read(iprot);
        struct.setReportIsSet(true);
      }
      if (incoming.get(32)) {
        struct.revocation = new RevocationContent();
        struct.revocation.read(iprot);
        struct.setRevocationIsSet(true);
      }
      if (incoming.get(33)) {
        struct.groupScope = new GroupScopeContent();
        struct.groupScope.read(iprot);
        struct.setGroupScopeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.ownerTransfer = new GroupOwnerTransferContent();
        struct.ownerTransfer.read(iprot);
        struct.setOwnerTransferIsSet(true);
      }
      if (incoming.get(35)) {
        struct.welcome = new SystemWelcomeContent();
        struct.welcome.read(iprot);
        struct.setWelcomeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.clientUpdate = new ClientUpdateContent();
        struct.clientUpdate.read(iprot);
        struct.setClientUpdateIsSet(true);
      }
      if (incoming.get(37)) {
        struct.completeInfo = new CompleteInfoContent();
        struct.completeInfo.read(iprot);
        struct.setCompleteInfoIsSet(true);
      }
      if (incoming.get(38)) {
        struct.pwdComplexUpdate = new PwdComplexUpdateContent();
        struct.pwdComplexUpdate.read(iprot);
        struct.setPwdComplexUpdateIsSet(true);
      }
      if (incoming.get(39)) {
        struct.pwdExpire = new PwdExpireContent();
        struct.pwdExpire.read(iprot);
        struct.setPwdExpireIsSet(true);
      }
      if (incoming.get(40)) {
        struct.pcGuide = new PCClientGuide();
        struct.pcGuide.read(iprot);
        struct.setPcGuideIsSet(true);
      }
      if (incoming.get(41)) {
        struct.mobileGuide = new MobileClientGuide();
        struct.mobileGuide.read(iprot);
        struct.setMobileGuideIsSet(true);
      }
      if (incoming.get(42)) {
        struct.pwdModify = new PasswordModifyContent();
        struct.pwdModify.read(iprot);
        struct.setPwdModifyIsSet(true);
      }
      if (incoming.get(43)) {
        struct.tagDel = new TagDelContent();
        struct.tagDel.read(iprot);
        struct.setTagDelIsSet(true);
      }
      if (incoming.get(44)) {
        struct.remind = new GroupRemindContent();
        struct.remind.read(iprot);
        struct.setRemindIsSet(true);
      }
      if (incoming.get(45)) {
        struct.deptUpdate = new DeptUpdateContent();
        struct.deptUpdate.read(iprot);
        struct.setDeptUpdateIsSet(true);
      }
      if (incoming.get(46)) {
        struct.deptTransfer = new DeptTransferContent();
        struct.deptTransfer.read(iprot);
        struct.setDeptTransferIsSet(true);
      }
      if (incoming.get(47)) {
        struct.positionUpdate = new PositionUpdateContent();
        struct.positionUpdate.read(iprot);
        struct.setPositionUpdateIsSet(true);
      }
      if (incoming.get(48)) {
        struct.employeeEntry = new EmployeeEntryContent();
        struct.employeeEntry.read(iprot);
        struct.setEmployeeEntryIsSet(true);
      }
      if (incoming.get(49)) {
        struct.employeeLeave = new EmployeeLeaveContent();
        struct.employeeLeave.read(iprot);
        struct.setEmployeeLeaveIsSet(true);
      }
      if (incoming.get(50)) {
        struct.employeeRights = new EmployeeRightsChangeContent();
        struct.employeeRights.read(iprot);
        struct.setEmployeeRightsIsSet(true);
      }
      if (incoming.get(51)) {
        struct.deprtParentChange = new DeptParentChangeContent();
        struct.deprtParentChange.read(iprot);
        struct.setDeprtParentChangeIsSet(true);
      }
      if (incoming.get(52)) {
        struct.companyJoin = new CompanyJoinContent();
        struct.companyJoin.read(iprot);
        struct.setCompanyJoinIsSet(true);
      }
      if (incoming.get(53)) {
        struct.deptDelete = new DeptDeleteContent();
        struct.deptDelete.read(iprot);
        struct.setDeptDeleteIsSet(true);
      }
      if (incoming.get(54)) {
        struct.entryConfirm = new EmployeeEntryConfirmContent();
        struct.entryConfirm.read(iprot);
        struct.setEntryConfirmIsSet(true);
      }
      if (incoming.get(55)) {
        struct.leaveConfirm = new EmployeeLeaveConfirmContent();
        struct.leaveConfirm.read(iprot);
        struct.setLeaveConfirmIsSet(true);
      }
      if (incoming.get(56)) {
        struct.deptConfirm = new DeptTransferConfirmContent();
        struct.deptConfirm.read(iprot);
        struct.setDeptConfirmIsSet(true);
      }
      if (incoming.get(57)) {
        struct.instantInvite = new InstantIQInviteContent();
        struct.instantInvite.read(iprot);
        struct.setInstantInviteIsSet(true);
      }
      if (incoming.get(58)) {
        struct.confInvite = new IQInviteContent();
        struct.confInvite.read(iprot);
        struct.setConfInviteIsSet(true);
      }
      if (incoming.get(59)) {
        struct.confReceive = new IQReceiveContent();
        struct.confReceive.read(iprot);
        struct.setConfReceiveIsSet(true);
      }
      if (incoming.get(60)) {
        struct.confReject = new IQRejectContent();
        struct.confReject.read(iprot);
        struct.setConfRejectIsSet(true);
      }
      if (incoming.get(61)) {
        struct.confCancel = new ConfCancelContent();
        struct.confCancel.read(iprot);
        struct.setConfCancelIsSet(true);
      }
      if (incoming.get(62)) {
        struct.confAlert = new ConfAlertContent();
        struct.confAlert.read(iprot);
        struct.setConfAlertIsSet(true);
      }
      if (incoming.get(63)) {
        struct.instantReceive = new InstantIQReceiveContent();
        struct.instantReceive.read(iprot);
        struct.setInstantReceiveIsSet(true);
      }
      if (incoming.get(64)) {
        struct.instantReject = new InstantIQRejectContent();
        struct.instantReject.read(iprot);
        struct.setInstantRejectIsSet(true);
      }
      if (incoming.get(65)) {
        struct.confChat = new ConfChatContent();
        struct.confChat.read(iprot);
        struct.setConfChatIsSet(true);
      }
      if (incoming.get(66)) {
        struct.confSummary = new ConfSummaryContent();
        struct.confSummary.read(iprot);
        struct.setConfSummaryIsSet(true);
      }
      if (incoming.get(67)) {
        struct.callState = new CallStateContent();
        struct.callState.read(iprot);
        struct.setCallStateIsSet(true);
      }
      if (incoming.get(68)) {
        struct.confUpload = new ConfUploadContent();
        struct.confUpload.read(iprot);
        struct.setConfUploadIsSet(true);
      }
      if (incoming.get(69)) {
        struct.confDocDel = new ConfDelDocContent();
        struct.confDocDel.read(iprot);
        struct.setConfDocDelIsSet(true);
      }
      if (incoming.get(70)) {
        struct.cardUpdate = new CardUpdateContent();
        struct.cardUpdate.read(iprot);
        struct.setCardUpdateIsSet(true);
      }
      if (incoming.get(71)) {
        struct.contacterAdd = new ContacterAddContent();
        struct.contacterAdd.read(iprot);
        struct.setContacterAddIsSet(true);
      }
      if (incoming.get(72)) {
        struct.contacterDel = new ContacterDelContent();
        struct.contacterDel.read(iprot);
        struct.setContacterDelIsSet(true);
      }
      if (incoming.get(73)) {
        struct.attentionCreate = new AttentionCreateContent();
        struct.attentionCreate.read(iprot);
        struct.setAttentionCreateIsSet(true);
      }
      if (incoming.get(74)) {
        struct.attentionCancel = new AttentionCancelContent();
        struct.attentionCancel.read(iprot);
        struct.setAttentionCancelIsSet(true);
      }
      if (incoming.get(75)) {
        struct.transInvite = new FileTransmissionInviteContent();
        struct.transInvite.read(iprot);
        struct.setTransInviteIsSet(true);
      }
      if (incoming.get(76)) {
        struct.transReceive = new FileTransmissionReceiveContent();
        struct.transReceive.read(iprot);
        struct.setTransReceiveIsSet(true);
      }
      if (incoming.get(77)) {
        struct.transReject = new FileTransmissionRejectContent();
        struct.transReject.read(iprot);
        struct.setTransRejectIsSet(true);
      }
      if (incoming.get(78)) {
        struct.transStop = new FileTransmissionStopContent();
        struct.transStop.read(iprot);
        struct.setTransStopIsSet(true);
      }
      if (incoming.get(79)) {
        struct.audioInvite = new AudioInviteContent();
        struct.audioInvite.read(iprot);
        struct.setAudioInviteIsSet(true);
      }
      if (incoming.get(80)) {
        struct.audioReceive = new AudioReceiveContent();
        struct.audioReceive.read(iprot);
        struct.setAudioReceiveIsSet(true);
      }
      if (incoming.get(81)) {
        struct.audioReject = new AudioRejectContent();
        struct.audioReject.read(iprot);
        struct.setAudioRejectIsSet(true);
      }
      if (incoming.get(82)) {
        struct.audioStop = new AudioStopContent();
        struct.audioStop.read(iprot);
        struct.setAudioStopIsSet(true);
      }
      if (incoming.get(83)) {
        struct.callRecent = new AudioRecentCallContent();
        struct.callRecent.read(iprot);
        struct.setCallRecentIsSet(true);
      }
      if (incoming.get(84)) {
        struct.callBlock = new AudioBlockCallContent();
        struct.callBlock.read(iprot);
        struct.setCallBlockIsSet(true);
      }
      if (incoming.get(85)) {
        struct.callReject = new AudioRejectCallContent();
        struct.callReject.read(iprot);
        struct.setCallRejectIsSet(true);
      }
      if (incoming.get(86)) {
        struct.callCancel = new AudioCancelCallContent();
        struct.callCancel.read(iprot);
        struct.setCallCancelIsSet(true);
      }
      if (incoming.get(87)) {
        struct.confShare = new ConfShareContent();
        struct.confShare.read(iprot);
        struct.setConfShareIsSet(true);
      }
      if (incoming.get(88)) {
        struct.wbContent = new WBMessageContent();
        struct.wbContent.read(iprot);
        struct.setWbContentIsSet(true);
      }
      if (incoming.get(89)) {
        struct.remoteAssistanceInvite = new RemoteAssistanceInviteContent();
        struct.remoteAssistanceInvite.read(iprot);
        struct.setRemoteAssistanceInviteIsSet(true);
      }
      if (incoming.get(90)) {
        struct.remoteAssistanceAccept = new RemoteAssistanceAcceptContent();
        struct.remoteAssistanceAccept.read(iprot);
        struct.setRemoteAssistanceAcceptIsSet(true);
      }
      if (incoming.get(91)) {
        struct.remoteAssistanceReject = new RemoteAssistanceRejectContent();
        struct.remoteAssistanceReject.read(iprot);
        struct.setRemoteAssistanceRejectIsSet(true);
      }
      if (incoming.get(92)) {
        struct.remoteAssistanceEnd = new RemoteAssistanceEndContent();
        struct.remoteAssistanceEnd.read(iprot);
        struct.setRemoteAssistanceEndIsSet(true);
      }
      if (incoming.get(93)) {
        struct.remoteAssistanceCancel = new RemoteAssistanceCancelContent();
        struct.remoteAssistanceCancel.read(iprot);
        struct.setRemoteAssistanceCancelIsSet(true);
      }
      if (incoming.get(94)) {
        struct.sessionTop = new SessionTopContent();
        struct.sessionTop.read(iprot);
        struct.setSessionTopIsSet(true);
      }
      if (incoming.get(95)) {
        struct.atMessageReaded = new AtMessageReadedContent();
        struct.atMessageReaded.read(iprot);
        struct.setAtMessageReadedIsSet(true);
      }
      if (incoming.get(96)) {
        struct.loginNotify = new UserLoginNotifyContent();
        struct.loginNotify.read(iprot);
        struct.setLoginNotifyIsSet(true);
      }
      if (incoming.get(97)) {
        struct.groupScopeNotify = new GroupScopeNotifyContent();
        struct.groupScopeNotify.read(iprot);
        struct.setGroupScopeNotifyIsSet(true);
      }
      if (incoming.get(98)) {
        struct.contactsRelationNotify = new ContactsRelationNotifyContent();
        struct.contactsRelationNotify.read(iprot);
        struct.setContactsRelationNotifyIsSet(true);
      }
      if (incoming.get(99)) {
        struct.meetingAlertNotify = new MeetingAlertSettingNotifyContent();
        struct.meetingAlertNotify.read(iprot);
        struct.setMeetingAlertNotifyIsSet(true);
      }
      if (incoming.get(100)) {
        struct.apiText = new APITextContent();
        struct.apiText.read(iprot);
        struct.setApiTextIsSet(true);
      }
      if (incoming.get(101)) {
        struct.apiImage = new APIImageContent();
        struct.apiImage.read(iprot);
        struct.setApiImageIsSet(true);
      }
      if (incoming.get(102)) {
        struct.apiFile = new APIFileContent();
        struct.apiFile.read(iprot);
        struct.setApiFileIsSet(true);
      }
      if (incoming.get(103)) {
        struct.apiAckSent = new APIAckSentContent();
        struct.apiAckSent.read(iprot);
        struct.setApiAckSentIsSet(true);
      }
      if (incoming.get(104)) {
        struct.apiOA = new APIOAContent();
        struct.apiOA.read(iprot);
        struct.setApiOAIsSet(true);
      }
      if (incoming.get(105)) {
        struct.apiOAStatusChange = new APIOAStatusChangeContent();
        struct.apiOAStatusChange.read(iprot);
        struct.setApiOAStatusChangeIsSet(true);
      }
      if (incoming.get(106)) {
        struct.apiChangeNotify = new APIAppChangeNotifyContent();
        struct.apiChangeNotify.read(iprot);
        struct.setApiChangeNotifyIsSet(true);
      }
      if (incoming.get(107)) {
        struct.apiEventNotify = new APIAppEventChangeNotify();
        struct.apiEventNotify.read(iprot);
        struct.setApiEventNotifyIsSet(true);
      }
      if (incoming.get(108)) {
        struct.apiCustomized = new APICustomizedContent();
        struct.apiCustomized.read(iprot);
        struct.setApiCustomizedIsSet(true);
      }
    }
  }

}

