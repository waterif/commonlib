/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class ClientUpdateContent implements org.apache.thrift.TBase<ClientUpdateContent, ClientUpdateContent._Fields>, java.io.Serializable, Cloneable, Comparable<ClientUpdateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientUpdateContent");

  private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("version_code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IS_FORCE_UPGRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_force_upgrade", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_sdk_version", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_SDK_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("min_sdk_version", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("version_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientUpdateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientUpdateContentTupleSchemeFactory());
  }

  public int version_code; // required
  public byte is_force_upgrade; // required
  public short max_sdk_version; // optional
  public short min_sdk_version; // required
  public String version_name; // required
  public String desc; // required
  public String url; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION_CODE((short)1, "version_code"),
    IS_FORCE_UPGRADE((short)2, "is_force_upgrade"),
    MAX_SDK_VERSION((short)3, "max_sdk_version"),
    MIN_SDK_VERSION((short)4, "min_sdk_version"),
    VERSION_NAME((short)5, "version_name"),
    DESC((short)6, "desc"),
    URL((short)7, "url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_CODE
          return VERSION_CODE;
        case 2: // IS_FORCE_UPGRADE
          return IS_FORCE_UPGRADE;
        case 3: // MAX_SDK_VERSION
          return MAX_SDK_VERSION;
        case 4: // MIN_SDK_VERSION
          return MIN_SDK_VERSION;
        case 5: // VERSION_NAME
          return VERSION_NAME;
        case 6: // DESC
          return DESC;
        case 7: // URL
          return URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_CODE_ISSET_ID = 0;
  private static final int __IS_FORCE_UPGRADE_ISSET_ID = 1;
  private static final int __MAX_SDK_VERSION_ISSET_ID = 2;
  private static final int __MIN_SDK_VERSION_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MAX_SDK_VERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("version_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FORCE_UPGRADE, new org.apache.thrift.meta_data.FieldMetaData("is_force_upgrade", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MAX_SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("max_sdk_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MIN_SDK_VERSION, new org.apache.thrift.meta_data.FieldMetaData("min_sdk_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.VERSION_NAME, new org.apache.thrift.meta_data.FieldMetaData("version_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientUpdateContent.class, metaDataMap);
  }

  public ClientUpdateContent() {
  }

  public ClientUpdateContent(
    int version_code,
    byte is_force_upgrade,
    short min_sdk_version,
    String version_name,
    String desc,
    String url)
  {
    this();
    this.version_code = version_code;
    setVersion_codeIsSet(true);
    this.is_force_upgrade = is_force_upgrade;
    setIs_force_upgradeIsSet(true);
    this.min_sdk_version = min_sdk_version;
    setMin_sdk_versionIsSet(true);
    this.version_name = version_name;
    this.desc = desc;
    this.url = url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientUpdateContent(ClientUpdateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version_code = other.version_code;
    this.is_force_upgrade = other.is_force_upgrade;
    this.max_sdk_version = other.max_sdk_version;
    this.min_sdk_version = other.min_sdk_version;
    if (other.isSetVersion_name()) {
      this.version_name = other.version_name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
  }

  public ClientUpdateContent deepCopy() {
    return new ClientUpdateContent(this);
  }

  @Override
  public void clear() {
    setVersion_codeIsSet(false);
    this.version_code = 0;
    setIs_force_upgradeIsSet(false);
    this.is_force_upgrade = 0;
    setMax_sdk_versionIsSet(false);
    this.max_sdk_version = 0;
    setMin_sdk_versionIsSet(false);
    this.min_sdk_version = 0;
    this.version_name = null;
    this.desc = null;
    this.url = null;
  }

  public int getVersion_code() {
    return this.version_code;
  }

  public ClientUpdateContent setVersion_code(int version_code) {
    this.version_code = version_code;
    setVersion_codeIsSet(true);
    return this;
  }

  public void unsetVersion_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_CODE_ISSET_ID);
  }

  /** Returns true if field version_code is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_code() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_CODE_ISSET_ID);
  }

  public void setVersion_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_CODE_ISSET_ID, value);
  }

  public byte getIs_force_upgrade() {
    return this.is_force_upgrade;
  }

  public ClientUpdateContent setIs_force_upgrade(byte is_force_upgrade) {
    this.is_force_upgrade = is_force_upgrade;
    setIs_force_upgradeIsSet(true);
    return this;
  }

  public void unsetIs_force_upgrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_FORCE_UPGRADE_ISSET_ID);
  }

  /** Returns true if field is_force_upgrade is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_force_upgrade() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_FORCE_UPGRADE_ISSET_ID);
  }

  public void setIs_force_upgradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_FORCE_UPGRADE_ISSET_ID, value);
  }

  public short getMax_sdk_version() {
    return this.max_sdk_version;
  }

  public ClientUpdateContent setMax_sdk_version(short max_sdk_version) {
    this.max_sdk_version = max_sdk_version;
    setMax_sdk_versionIsSet(true);
    return this;
  }

  public void unsetMax_sdk_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SDK_VERSION_ISSET_ID);
  }

  /** Returns true if field max_sdk_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_sdk_version() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_SDK_VERSION_ISSET_ID);
  }

  public void setMax_sdk_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SDK_VERSION_ISSET_ID, value);
  }

  public short getMin_sdk_version() {
    return this.min_sdk_version;
  }

  public ClientUpdateContent setMin_sdk_version(short min_sdk_version) {
    this.min_sdk_version = min_sdk_version;
    setMin_sdk_versionIsSet(true);
    return this;
  }

  public void unsetMin_sdk_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_SDK_VERSION_ISSET_ID);
  }

  /** Returns true if field min_sdk_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_sdk_version() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_SDK_VERSION_ISSET_ID);
  }

  public void setMin_sdk_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_SDK_VERSION_ISSET_ID, value);
  }

  public String getVersion_name() {
    return this.version_name;
  }

  public ClientUpdateContent setVersion_name(String version_name) {
    this.version_name = version_name;
    return this;
  }

  public void unsetVersion_name() {
    this.version_name = null;
  }

  /** Returns true if field version_name is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion_name() {
    return this.version_name != null;
  }

  public void setVersion_nameIsSet(boolean value) {
    if (!value) {
      this.version_name = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public ClientUpdateContent setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public ClientUpdateContent setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION_CODE:
      if (value == null) {
        unsetVersion_code();
      } else {
        setVersion_code((Integer)value);
      }
      break;

    case IS_FORCE_UPGRADE:
      if (value == null) {
        unsetIs_force_upgrade();
      } else {
        setIs_force_upgrade((Byte)value);
      }
      break;

    case MAX_SDK_VERSION:
      if (value == null) {
        unsetMax_sdk_version();
      } else {
        setMax_sdk_version((Short)value);
      }
      break;

    case MIN_SDK_VERSION:
      if (value == null) {
        unsetMin_sdk_version();
      } else {
        setMin_sdk_version((Short)value);
      }
      break;

    case VERSION_NAME:
      if (value == null) {
        unsetVersion_name();
      } else {
        setVersion_name((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_CODE:
      return Integer.valueOf(getVersion_code());

    case IS_FORCE_UPGRADE:
      return Byte.valueOf(getIs_force_upgrade());

    case MAX_SDK_VERSION:
      return Short.valueOf(getMax_sdk_version());

    case MIN_SDK_VERSION:
      return Short.valueOf(getMin_sdk_version());

    case VERSION_NAME:
      return getVersion_name();

    case DESC:
      return getDesc();

    case URL:
      return getUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION_CODE:
      return isSetVersion_code();
    case IS_FORCE_UPGRADE:
      return isSetIs_force_upgrade();
    case MAX_SDK_VERSION:
      return isSetMax_sdk_version();
    case MIN_SDK_VERSION:
      return isSetMin_sdk_version();
    case VERSION_NAME:
      return isSetVersion_name();
    case DESC:
      return isSetDesc();
    case URL:
      return isSetUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientUpdateContent)
      return this.equals((ClientUpdateContent)that);
    return false;
  }

  public boolean equals(ClientUpdateContent that) {
    if (that == null)
      return false;

    boolean this_present_version_code = true;
    boolean that_present_version_code = true;
    if (this_present_version_code || that_present_version_code) {
      if (!(this_present_version_code && that_present_version_code))
        return false;
      if (this.version_code != that.version_code)
        return false;
    }

    boolean this_present_is_force_upgrade = true;
    boolean that_present_is_force_upgrade = true;
    if (this_present_is_force_upgrade || that_present_is_force_upgrade) {
      if (!(this_present_is_force_upgrade && that_present_is_force_upgrade))
        return false;
      if (this.is_force_upgrade != that.is_force_upgrade)
        return false;
    }

    boolean this_present_max_sdk_version = true && this.isSetMax_sdk_version();
    boolean that_present_max_sdk_version = true && that.isSetMax_sdk_version();
    if (this_present_max_sdk_version || that_present_max_sdk_version) {
      if (!(this_present_max_sdk_version && that_present_max_sdk_version))
        return false;
      if (this.max_sdk_version != that.max_sdk_version)
        return false;
    }

    boolean this_present_min_sdk_version = true;
    boolean that_present_min_sdk_version = true;
    if (this_present_min_sdk_version || that_present_min_sdk_version) {
      if (!(this_present_min_sdk_version && that_present_min_sdk_version))
        return false;
      if (this.min_sdk_version != that.min_sdk_version)
        return false;
    }

    boolean this_present_version_name = true && this.isSetVersion_name();
    boolean that_present_version_name = true && that.isSetVersion_name();
    if (this_present_version_name || that_present_version_name) {
      if (!(this_present_version_name && that_present_version_name))
        return false;
      if (!this.version_name.equals(that.version_name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_version_code = true;
    list.add(present_version_code);
    if (present_version_code)
      list.add(version_code);

    boolean present_is_force_upgrade = true;
    list.add(present_is_force_upgrade);
    if (present_is_force_upgrade)
      list.add(is_force_upgrade);

    boolean present_max_sdk_version = true && (isSetMax_sdk_version());
    list.add(present_max_sdk_version);
    if (present_max_sdk_version)
      list.add(max_sdk_version);

    boolean present_min_sdk_version = true;
    list.add(present_min_sdk_version);
    if (present_min_sdk_version)
      list.add(min_sdk_version);

    boolean present_version_name = true && (isSetVersion_name());
    list.add(present_version_name);
    if (present_version_name)
      list.add(version_name);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientUpdateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion_code()).compareTo(other.isSetVersion_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_code, other.version_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_force_upgrade()).compareTo(other.isSetIs_force_upgrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_force_upgrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_force_upgrade, other.is_force_upgrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_sdk_version()).compareTo(other.isSetMax_sdk_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_sdk_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_sdk_version, other.max_sdk_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_sdk_version()).compareTo(other.isSetMin_sdk_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_sdk_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_sdk_version, other.min_sdk_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion_name()).compareTo(other.isSetVersion_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_name, other.version_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientUpdateContent(");
    boolean first = true;

    sb.append("version_code:");
    sb.append(this.version_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_force_upgrade:");
    sb.append(this.is_force_upgrade);
    first = false;
    if (isSetMax_sdk_version()) {
      if (!first) sb.append(", ");
      sb.append("max_sdk_version:");
      sb.append(this.max_sdk_version);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("min_sdk_version:");
    sb.append(this.min_sdk_version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_name:");
    if (this.version_name == null) {
      sb.append("null");
    } else {
      sb.append(this.version_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version_code' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'is_force_upgrade' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'min_sdk_version' because it's a primitive and you chose the non-beans generator.
    if (version_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_name' was not present! Struct: " + toString());
    }
    if (desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'desc' was not present! Struct: " + toString());
    }
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientUpdateContentStandardSchemeFactory implements SchemeFactory {
    public ClientUpdateContentStandardScheme getScheme() {
      return new ClientUpdateContentStandardScheme();
    }
  }

  private static class ClientUpdateContentStandardScheme extends StandardScheme<ClientUpdateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientUpdateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version_code = iprot.readI32();
              struct.setVersion_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_FORCE_UPGRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.is_force_upgrade = iprot.readByte();
              struct.setIs_force_upgradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.max_sdk_version = iprot.readI16();
              struct.setMax_sdk_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_SDK_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.min_sdk_version = iprot.readI16();
              struct.setMin_sdk_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version_name = iprot.readString();
              struct.setVersion_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_code' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_force_upgrade()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_force_upgrade' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMin_sdk_version()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_sdk_version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientUpdateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
      oprot.writeI32(struct.version_code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FORCE_UPGRADE_FIELD_DESC);
      oprot.writeByte(struct.is_force_upgrade);
      oprot.writeFieldEnd();
      if (struct.isSetMax_sdk_version()) {
        oprot.writeFieldBegin(MAX_SDK_VERSION_FIELD_DESC);
        oprot.writeI16(struct.max_sdk_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_SDK_VERSION_FIELD_DESC);
      oprot.writeI16(struct.min_sdk_version);
      oprot.writeFieldEnd();
      if (struct.version_name != null) {
        oprot.writeFieldBegin(VERSION_NAME_FIELD_DESC);
        oprot.writeString(struct.version_name);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientUpdateContentTupleSchemeFactory implements SchemeFactory {
    public ClientUpdateContentTupleScheme getScheme() {
      return new ClientUpdateContentTupleScheme();
    }
  }

  private static class ClientUpdateContentTupleScheme extends TupleScheme<ClientUpdateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientUpdateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.version_code);
      oprot.writeByte(struct.is_force_upgrade);
      oprot.writeI16(struct.min_sdk_version);
      oprot.writeString(struct.version_name);
      oprot.writeString(struct.desc);
      oprot.writeString(struct.url);
      BitSet optionals = new BitSet();
      if (struct.isSetMax_sdk_version()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMax_sdk_version()) {
        oprot.writeI16(struct.max_sdk_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientUpdateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version_code = iprot.readI32();
      struct.setVersion_codeIsSet(true);
      struct.is_force_upgrade = iprot.readByte();
      struct.setIs_force_upgradeIsSet(true);
      struct.min_sdk_version = iprot.readI16();
      struct.setMin_sdk_versionIsSet(true);
      struct.version_name = iprot.readString();
      struct.setVersion_nameIsSet(true);
      struct.desc = iprot.readString();
      struct.setDescIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.max_sdk_version = iprot.readI16();
        struct.setMax_sdk_versionIsSet(true);
      }
    }
  }

}

