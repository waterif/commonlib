/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class FileTransmissionStopContent implements org.apache.thrift.TBase<FileTransmissionStopContent, FileTransmissionStopContent._Fields>, java.io.Serializable, Cloneable, Comparable<FileTransmissionStopContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileTransmissionStopContent");

  private static final org.apache.thrift.protocol.TField SEND_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTaskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIVE_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTaskId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileTransmissionStopContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileTransmissionStopContentTupleSchemeFactory());
  }

  public long sendTaskId; // required
  public long receiveTaskId; // required
  public String fileName; // required
  public long fileSize; // required
  public byte flag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEND_TASK_ID((short)1, "sendTaskId"),
    RECEIVE_TASK_ID((short)2, "receiveTaskId"),
    FILE_NAME((short)3, "fileName"),
    FILE_SIZE((short)4, "fileSize"),
    FLAG((short)5, "flag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEND_TASK_ID
          return SEND_TASK_ID;
        case 2: // RECEIVE_TASK_ID
          return RECEIVE_TASK_ID;
        case 3: // FILE_NAME
          return FILE_NAME;
        case 4: // FILE_SIZE
          return FILE_SIZE;
        case 5: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDTASKID_ISSET_ID = 0;
  private static final int __RECEIVETASKID_ISSET_ID = 1;
  private static final int __FILESIZE_ISSET_ID = 2;
  private static final int __FLAG_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEND_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("sendTaskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVE_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("receiveTaskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileTransmissionStopContent.class, metaDataMap);
  }

  public FileTransmissionStopContent() {
  }

  public FileTransmissionStopContent(
    long sendTaskId,
    long receiveTaskId,
    String fileName,
    long fileSize,
    byte flag)
  {
    this();
    this.sendTaskId = sendTaskId;
    setSendTaskIdIsSet(true);
    this.receiveTaskId = receiveTaskId;
    setReceiveTaskIdIsSet(true);
    this.fileName = fileName;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileTransmissionStopContent(FileTransmissionStopContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sendTaskId = other.sendTaskId;
    this.receiveTaskId = other.receiveTaskId;
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    this.fileSize = other.fileSize;
    this.flag = other.flag;
  }

  public FileTransmissionStopContent deepCopy() {
    return new FileTransmissionStopContent(this);
  }

  @Override
  public void clear() {
    setSendTaskIdIsSet(false);
    this.sendTaskId = 0;
    setReceiveTaskIdIsSet(false);
    this.receiveTaskId = 0;
    this.fileName = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    setFlagIsSet(false);
    this.flag = 0;
  }

  public long getSendTaskId() {
    return this.sendTaskId;
  }

  public FileTransmissionStopContent setSendTaskId(long sendTaskId) {
    this.sendTaskId = sendTaskId;
    setSendTaskIdIsSet(true);
    return this;
  }

  public void unsetSendTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDTASKID_ISSET_ID);
  }

  /** Returns true if field sendTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDTASKID_ISSET_ID);
  }

  public void setSendTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDTASKID_ISSET_ID, value);
  }

  public long getReceiveTaskId() {
    return this.receiveTaskId;
  }

  public FileTransmissionStopContent setReceiveTaskId(long receiveTaskId) {
    this.receiveTaskId = receiveTaskId;
    setReceiveTaskIdIsSet(true);
    return this;
  }

  public void unsetReceiveTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVETASKID_ISSET_ID);
  }

  /** Returns true if field receiveTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVETASKID_ISSET_ID);
  }

  public void setReceiveTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVETASKID_ISSET_ID, value);
  }

  public String getFileName() {
    return this.fileName;
  }

  public FileTransmissionStopContent setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public FileTransmissionStopContent setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public byte getFlag() {
    return this.flag;
  }

  public FileTransmissionStopContent setFlag(byte flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEND_TASK_ID:
      if (value == null) {
        unsetSendTaskId();
      } else {
        setSendTaskId((Long)value);
      }
      break;

    case RECEIVE_TASK_ID:
      if (value == null) {
        unsetReceiveTaskId();
      } else {
        setReceiveTaskId((Long)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Long)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEND_TASK_ID:
      return Long.valueOf(getSendTaskId());

    case RECEIVE_TASK_ID:
      return Long.valueOf(getReceiveTaskId());

    case FILE_NAME:
      return getFileName();

    case FILE_SIZE:
      return Long.valueOf(getFileSize());

    case FLAG:
      return Byte.valueOf(getFlag());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEND_TASK_ID:
      return isSetSendTaskId();
    case RECEIVE_TASK_ID:
      return isSetReceiveTaskId();
    case FILE_NAME:
      return isSetFileName();
    case FILE_SIZE:
      return isSetFileSize();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileTransmissionStopContent)
      return this.equals((FileTransmissionStopContent)that);
    return false;
  }

  public boolean equals(FileTransmissionStopContent that) {
    if (that == null)
      return false;

    boolean this_present_sendTaskId = true;
    boolean that_present_sendTaskId = true;
    if (this_present_sendTaskId || that_present_sendTaskId) {
      if (!(this_present_sendTaskId && that_present_sendTaskId))
        return false;
      if (this.sendTaskId != that.sendTaskId)
        return false;
    }

    boolean this_present_receiveTaskId = true;
    boolean that_present_receiveTaskId = true;
    if (this_present_receiveTaskId || that_present_receiveTaskId) {
      if (!(this_present_receiveTaskId && that_present_receiveTaskId))
        return false;
      if (this.receiveTaskId != that.receiveTaskId)
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sendTaskId = true;
    list.add(present_sendTaskId);
    if (present_sendTaskId)
      list.add(sendTaskId);

    boolean present_receiveTaskId = true;
    list.add(present_receiveTaskId);
    if (present_receiveTaskId)
      list.add(receiveTaskId);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_flag = true;
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileTransmissionStopContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSendTaskId()).compareTo(other.isSetSendTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTaskId, other.sendTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveTaskId()).compareTo(other.isSetReceiveTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTaskId, other.receiveTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileTransmissionStopContent(");
    boolean first = true;

    sb.append("sendTaskId:");
    sb.append(this.sendTaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveTaskId:");
    sb.append(this.receiveTaskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sendTaskId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'receiveTaskId' because it's a primitive and you chose the non-beans generator.
    if (fileName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fileSize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'flag' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileTransmissionStopContentStandardSchemeFactory implements SchemeFactory {
    public FileTransmissionStopContentStandardScheme getScheme() {
      return new FileTransmissionStopContentStandardScheme();
    }
  }

  private static class FileTransmissionStopContentStandardScheme extends StandardScheme<FileTransmissionStopContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileTransmissionStopContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEND_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sendTaskId = iprot.readI64();
              struct.setSendTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIVE_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiveTaskId = iprot.readI64();
              struct.setReceiveTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.flag = iprot.readByte();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSendTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sendTaskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReceiveTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'receiveTaskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFileSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFlag()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'flag' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileTransmissionStopContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEND_TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.sendTaskId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.receiveTaskId);
      oprot.writeFieldEnd();
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fileSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeByte(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileTransmissionStopContentTupleSchemeFactory implements SchemeFactory {
    public FileTransmissionStopContentTupleScheme getScheme() {
      return new FileTransmissionStopContentTupleScheme();
    }
  }

  private static class FileTransmissionStopContentTupleScheme extends TupleScheme<FileTransmissionStopContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileTransmissionStopContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.sendTaskId);
      oprot.writeI64(struct.receiveTaskId);
      oprot.writeString(struct.fileName);
      oprot.writeI64(struct.fileSize);
      oprot.writeByte(struct.flag);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileTransmissionStopContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sendTaskId = iprot.readI64();
      struct.setSendTaskIdIsSet(true);
      struct.receiveTaskId = iprot.readI64();
      struct.setReceiveTaskIdIsSet(true);
      struct.fileName = iprot.readString();
      struct.setFileNameIsSet(true);
      struct.fileSize = iprot.readI64();
      struct.setFileSizeIsSet(true);
      struct.flag = iprot.readByte();
      struct.setFlagIsSet(true);
    }
  }

}

