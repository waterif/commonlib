/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class DeptUpdateContent implements org.apache.thrift.TBase<DeptUpdateContent, DeptUpdateContent._Fields>, java.io.Serializable, Cloneable, Comparable<DeptUpdateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeptUpdateContent");

  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operator_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dept_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OLD_DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("old_dept_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_DEPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("new_dept_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeptUpdateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeptUpdateContentTupleSchemeFactory());
  }

  public int operator_id; // required
  public int dept_id; // required
  public String old_dept_name; // required
  public String new_dept_name; // required
  public String desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATOR_ID((short)1, "operator_id"),
    DEPT_ID((short)2, "dept_id"),
    OLD_DEPT_NAME((short)3, "old_dept_name"),
    NEW_DEPT_NAME((short)4, "new_dept_name"),
    DESC((short)5, "desc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATOR_ID
          return OPERATOR_ID;
        case 2: // DEPT_ID
          return DEPT_ID;
        case 3: // OLD_DEPT_NAME
          return OLD_DEPT_NAME;
        case 4: // NEW_DEPT_NAME
          return NEW_DEPT_NAME;
        case 5: // DESC
          return DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATOR_ID_ISSET_ID = 0;
  private static final int __DEPT_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operator_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("dept_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("old_dept_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_DEPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("new_dept_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeptUpdateContent.class, metaDataMap);
  }

  public DeptUpdateContent() {
  }

  public DeptUpdateContent(
    int operator_id,
    int dept_id,
    String old_dept_name,
    String new_dept_name)
  {
    this();
    this.operator_id = operator_id;
    setOperator_idIsSet(true);
    this.dept_id = dept_id;
    setDept_idIsSet(true);
    this.old_dept_name = old_dept_name;
    this.new_dept_name = new_dept_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeptUpdateContent(DeptUpdateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operator_id = other.operator_id;
    this.dept_id = other.dept_id;
    if (other.isSetOld_dept_name()) {
      this.old_dept_name = other.old_dept_name;
    }
    if (other.isSetNew_dept_name()) {
      this.new_dept_name = other.new_dept_name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
  }

  public DeptUpdateContent deepCopy() {
    return new DeptUpdateContent(this);
  }

  @Override
  public void clear() {
    setOperator_idIsSet(false);
    this.operator_id = 0;
    setDept_idIsSet(false);
    this.dept_id = 0;
    this.old_dept_name = null;
    this.new_dept_name = null;
    this.desc = null;
  }

  public int getOperator_id() {
    return this.operator_id;
  }

  public DeptUpdateContent setOperator_id(int operator_id) {
    this.operator_id = operator_id;
    setOperator_idIsSet(true);
    return this;
  }

  public void unsetOperator_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATOR_ID_ISSET_ID);
  }

  /** Returns true if field operator_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator_id() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATOR_ID_ISSET_ID);
  }

  public void setOperator_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATOR_ID_ISSET_ID, value);
  }

  public int getDept_id() {
    return this.dept_id;
  }

  public DeptUpdateContent setDept_id(int dept_id) {
    this.dept_id = dept_id;
    setDept_idIsSet(true);
    return this;
  }

  public void unsetDept_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPT_ID_ISSET_ID);
  }

  /** Returns true if field dept_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDept_id() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPT_ID_ISSET_ID);
  }

  public void setDept_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPT_ID_ISSET_ID, value);
  }

  public String getOld_dept_name() {
    return this.old_dept_name;
  }

  public DeptUpdateContent setOld_dept_name(String old_dept_name) {
    this.old_dept_name = old_dept_name;
    return this;
  }

  public void unsetOld_dept_name() {
    this.old_dept_name = null;
  }

  /** Returns true if field old_dept_name is set (has been assigned a value) and false otherwise */
  public boolean isSetOld_dept_name() {
    return this.old_dept_name != null;
  }

  public void setOld_dept_nameIsSet(boolean value) {
    if (!value) {
      this.old_dept_name = null;
    }
  }

  public String getNew_dept_name() {
    return this.new_dept_name;
  }

  public DeptUpdateContent setNew_dept_name(String new_dept_name) {
    this.new_dept_name = new_dept_name;
    return this;
  }

  public void unsetNew_dept_name() {
    this.new_dept_name = null;
  }

  /** Returns true if field new_dept_name is set (has been assigned a value) and false otherwise */
  public boolean isSetNew_dept_name() {
    return this.new_dept_name != null;
  }

  public void setNew_dept_nameIsSet(boolean value) {
    if (!value) {
      this.new_dept_name = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public DeptUpdateContent setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATOR_ID:
      if (value == null) {
        unsetOperator_id();
      } else {
        setOperator_id((Integer)value);
      }
      break;

    case DEPT_ID:
      if (value == null) {
        unsetDept_id();
      } else {
        setDept_id((Integer)value);
      }
      break;

    case OLD_DEPT_NAME:
      if (value == null) {
        unsetOld_dept_name();
      } else {
        setOld_dept_name((String)value);
      }
      break;

    case NEW_DEPT_NAME:
      if (value == null) {
        unsetNew_dept_name();
      } else {
        setNew_dept_name((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATOR_ID:
      return Integer.valueOf(getOperator_id());

    case DEPT_ID:
      return Integer.valueOf(getDept_id());

    case OLD_DEPT_NAME:
      return getOld_dept_name();

    case NEW_DEPT_NAME:
      return getNew_dept_name();

    case DESC:
      return getDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATOR_ID:
      return isSetOperator_id();
    case DEPT_ID:
      return isSetDept_id();
    case OLD_DEPT_NAME:
      return isSetOld_dept_name();
    case NEW_DEPT_NAME:
      return isSetNew_dept_name();
    case DESC:
      return isSetDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeptUpdateContent)
      return this.equals((DeptUpdateContent)that);
    return false;
  }

  public boolean equals(DeptUpdateContent that) {
    if (that == null)
      return false;

    boolean this_present_operator_id = true;
    boolean that_present_operator_id = true;
    if (this_present_operator_id || that_present_operator_id) {
      if (!(this_present_operator_id && that_present_operator_id))
        return false;
      if (this.operator_id != that.operator_id)
        return false;
    }

    boolean this_present_dept_id = true;
    boolean that_present_dept_id = true;
    if (this_present_dept_id || that_present_dept_id) {
      if (!(this_present_dept_id && that_present_dept_id))
        return false;
      if (this.dept_id != that.dept_id)
        return false;
    }

    boolean this_present_old_dept_name = true && this.isSetOld_dept_name();
    boolean that_present_old_dept_name = true && that.isSetOld_dept_name();
    if (this_present_old_dept_name || that_present_old_dept_name) {
      if (!(this_present_old_dept_name && that_present_old_dept_name))
        return false;
      if (!this.old_dept_name.equals(that.old_dept_name))
        return false;
    }

    boolean this_present_new_dept_name = true && this.isSetNew_dept_name();
    boolean that_present_new_dept_name = true && that.isSetNew_dept_name();
    if (this_present_new_dept_name || that_present_new_dept_name) {
      if (!(this_present_new_dept_name && that_present_new_dept_name))
        return false;
      if (!this.new_dept_name.equals(that.new_dept_name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operator_id = true;
    list.add(present_operator_id);
    if (present_operator_id)
      list.add(operator_id);

    boolean present_dept_id = true;
    list.add(present_dept_id);
    if (present_dept_id)
      list.add(dept_id);

    boolean present_old_dept_name = true && (isSetOld_dept_name());
    list.add(present_old_dept_name);
    if (present_old_dept_name)
      list.add(old_dept_name);

    boolean present_new_dept_name = true && (isSetNew_dept_name());
    list.add(present_new_dept_name);
    if (present_new_dept_name)
      list.add(new_dept_name);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeptUpdateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperator_id()).compareTo(other.isSetOperator_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator_id, other.operator_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDept_id()).compareTo(other.isSetDept_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDept_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dept_id, other.dept_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOld_dept_name()).compareTo(other.isSetOld_dept_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOld_dept_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_dept_name, other.old_dept_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNew_dept_name()).compareTo(other.isSetNew_dept_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNew_dept_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_dept_name, other.new_dept_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeptUpdateContent(");
    boolean first = true;

    sb.append("operator_id:");
    sb.append(this.operator_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dept_id:");
    sb.append(this.dept_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("old_dept_name:");
    if (this.old_dept_name == null) {
      sb.append("null");
    } else {
      sb.append(this.old_dept_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("new_dept_name:");
    if (this.new_dept_name == null) {
      sb.append("null");
    } else {
      sb.append(this.new_dept_name);
    }
    first = false;
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operator_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dept_id' because it's a primitive and you chose the non-beans generator.
    if (old_dept_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'old_dept_name' was not present! Struct: " + toString());
    }
    if (new_dept_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'new_dept_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeptUpdateContentStandardSchemeFactory implements SchemeFactory {
    public DeptUpdateContentStandardScheme getScheme() {
      return new DeptUpdateContentStandardScheme();
    }
  }

  private static class DeptUpdateContentStandardScheme extends StandardScheme<DeptUpdateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeptUpdateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operator_id = iprot.readI32();
              struct.setOperator_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dept_id = iprot.readI32();
              struct.setDept_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OLD_DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.old_dept_name = iprot.readString();
              struct.setOld_dept_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_DEPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.new_dept_name = iprot.readString();
              struct.setNew_dept_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperator_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operator_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDept_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dept_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeptUpdateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.operator_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPT_ID_FIELD_DESC);
      oprot.writeI32(struct.dept_id);
      oprot.writeFieldEnd();
      if (struct.old_dept_name != null) {
        oprot.writeFieldBegin(OLD_DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.old_dept_name);
        oprot.writeFieldEnd();
      }
      if (struct.new_dept_name != null) {
        oprot.writeFieldBegin(NEW_DEPT_NAME_FIELD_DESC);
        oprot.writeString(struct.new_dept_name);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeptUpdateContentTupleSchemeFactory implements SchemeFactory {
    public DeptUpdateContentTupleScheme getScheme() {
      return new DeptUpdateContentTupleScheme();
    }
  }

  private static class DeptUpdateContentTupleScheme extends TupleScheme<DeptUpdateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeptUpdateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.operator_id);
      oprot.writeI32(struct.dept_id);
      oprot.writeString(struct.old_dept_name);
      oprot.writeString(struct.new_dept_name);
      BitSet optionals = new BitSet();
      if (struct.isSetDesc()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeptUpdateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operator_id = iprot.readI32();
      struct.setOperator_idIsSet(true);
      struct.dept_id = iprot.readI32();
      struct.setDept_idIsSet(true);
      struct.old_dept_name = iprot.readString();
      struct.setOld_dept_nameIsSet(true);
      struct.new_dept_name = iprot.readString();
      struct.setNew_dept_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
    }
  }

}

