/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class JID implements org.apache.thrift.TBase<JID, JID._Fields>, java.io.Serializable, Cloneable, Comparable<JID> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JID");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resID", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JIDStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JIDTupleSchemeFactory());
  }

  public int userID; // required
  public int siteID; // required
  public int resID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userID"),
    SITE_ID((short)2, "siteID"),
    RES_ID((short)3, "resID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // SITE_ID
          return SITE_ID;
        case 3: // RES_ID
          return RES_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __SITEID_ISSET_ID = 1;
  private static final int __RESID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RES_ID, new org.apache.thrift.meta_data.FieldMetaData("resID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JID.class, metaDataMap);
  }

  public JID() {
  }

  public JID(
    int userID,
    int siteID,
    int resID)
  {
    this();
    this.userID = userID;
    setUserIDIsSet(true);
    this.siteID = siteID;
    setSiteIDIsSet(true);
    this.resID = resID;
    setResIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JID(JID other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userID = other.userID;
    this.siteID = other.siteID;
    this.resID = other.resID;
  }

  public JID deepCopy() {
    return new JID(this);
  }

  @Override
  public void clear() {
    setUserIDIsSet(false);
    this.userID = 0;
    setSiteIDIsSet(false);
    this.siteID = 0;
    setResIDIsSet(false);
    this.resID = 0;
  }

  public int getUserID() {
    return this.userID;
  }

  public JID setUserID(int userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getSiteID() {
    return this.siteID;
  }

  public JID setSiteID(int siteID) {
    this.siteID = siteID;
    setSiteIDIsSet(true);
    return this;
  }

  public void unsetSiteID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITEID_ISSET_ID);
  }

  /** Returns true if field siteID is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteID() {
    return EncodingUtils.testBit(__isset_bitfield, __SITEID_ISSET_ID);
  }

  public void setSiteIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITEID_ISSET_ID, value);
  }

  public int getResID() {
    return this.resID;
  }

  public JID setResID(int resID) {
    this.resID = resID;
    setResIDIsSet(true);
    return this;
  }

  public void unsetResID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESID_ISSET_ID);
  }

  /** Returns true if field resID is set (has been assigned a value) and false otherwise */
  public boolean isSetResID() {
    return EncodingUtils.testBit(__isset_bitfield, __RESID_ISSET_ID);
  }

  public void setResIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((Integer)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSiteID();
      } else {
        setSiteID((Integer)value);
      }
      break;

    case RES_ID:
      if (value == null) {
        unsetResID();
      } else {
        setResID((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Integer.valueOf(getUserID());

    case SITE_ID:
      return Integer.valueOf(getSiteID());

    case RES_ID:
      return Integer.valueOf(getResID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserID();
    case SITE_ID:
      return isSetSiteID();
    case RES_ID:
      return isSetResID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JID)
      return this.equals((JID)that);
    return false;
  }

  public boolean equals(JID that) {
    if (that == null)
      return false;

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_siteID = true;
    boolean that_present_siteID = true;
    if (this_present_siteID || that_present_siteID) {
      if (!(this_present_siteID && that_present_siteID))
        return false;
      if (this.siteID != that.siteID)
        return false;
    }

    boolean this_present_resID = true;
    boolean that_present_resID = true;
    if (this_present_resID || that_present_resID) {
      if (!(this_present_resID && that_present_resID))
        return false;
      if (this.resID != that.resID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userID = true;
    list.add(present_userID);
    if (present_userID)
      list.add(userID);

    boolean present_siteID = true;
    list.add(present_siteID);
    if (present_siteID)
      list.add(siteID);

    boolean present_resID = true;
    list.add(present_resID);
    if (present_resID)
      list.add(resID);

    return list.hashCode();
  }

  @Override
  public int compareTo(JID other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserID()).compareTo(other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteID()).compareTo(other.isSetSiteID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteID, other.siteID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResID()).compareTo(other.isSetResID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resID, other.resID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JID(");
    boolean first = true;

    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteID:");
    sb.append(this.siteID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resID:");
    sb.append(this.resID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'siteID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'resID' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JIDStandardSchemeFactory implements SchemeFactory {
    public JIDStandardScheme getScheme() {
      return new JIDStandardScheme();
    }
  }

  private static class JIDStandardScheme extends StandardScheme<JID> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JID struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userID = iprot.readI32();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteID = iprot.readI32();
              struct.setSiteIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resID = iprot.readI32();
              struct.setResIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSiteID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'siteID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetResID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resID' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JID struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
      oprot.writeI32(struct.siteID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RES_ID_FIELD_DESC);
      oprot.writeI32(struct.resID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JIDTupleSchemeFactory implements SchemeFactory {
    public JIDTupleScheme getScheme() {
      return new JIDTupleScheme();
    }
  }

  private static class JIDTupleScheme extends TupleScheme<JID> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JID struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userID);
      oprot.writeI32(struct.siteID);
      oprot.writeI32(struct.resID);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JID struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userID = iprot.readI32();
      struct.setUserIDIsSet(true);
      struct.siteID = iprot.readI32();
      struct.setSiteIDIsSet(true);
      struct.resID = iprot.readI32();
      struct.setResIDIsSet(true);
    }
  }

}

