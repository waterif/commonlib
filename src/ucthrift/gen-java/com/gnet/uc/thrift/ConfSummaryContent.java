/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class ConfSummaryContent implements org.apache.thrift.TBase<ConfSummaryContent, ConfSummaryContent._Fields>, java.io.Serializable, Cloneable, Comparable<ConfSummaryContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfSummaryContent");

  private static final org.apache.thrift.protocol.TField OPERATORID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUMMARY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("summary_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUMMARY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("summary_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField CONF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("confId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONF_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("confName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConfSummaryContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConfSummaryContentTupleSchemeFactory());
  }

  public int operatorid; // required
  public int summary_id; // required
  public String summary_name; // required
  public byte state; // required
  public int confId; // required
  public String confName; // optional
  public int startTime; // optional
  public int updateTime; // optional
  public long eventId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATORID((short)1, "operatorid"),
    SUMMARY_ID((short)2, "summary_id"),
    SUMMARY_NAME((short)3, "summary_name"),
    STATE((short)4, "state"),
    CONF_ID((short)5, "confId"),
    CONF_NAME((short)6, "confName"),
    START_TIME((short)7, "startTime"),
    UPDATE_TIME((short)8, "updateTime"),
    EVENT_ID((short)9, "eventId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATORID
          return OPERATORID;
        case 2: // SUMMARY_ID
          return SUMMARY_ID;
        case 3: // SUMMARY_NAME
          return SUMMARY_NAME;
        case 4: // STATE
          return STATE;
        case 5: // CONF_ID
          return CONF_ID;
        case 6: // CONF_NAME
          return CONF_NAME;
        case 7: // START_TIME
          return START_TIME;
        case 8: // UPDATE_TIME
          return UPDATE_TIME;
        case 9: // EVENT_ID
          return EVENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private static final int __SUMMARY_ID_ISSET_ID = 1;
  private static final int __STATE_ISSET_ID = 2;
  private static final int __CONFID_ISSET_ID = 3;
  private static final int __STARTTIME_ISSET_ID = 4;
  private static final int __UPDATETIME_ISSET_ID = 5;
  private static final int __EVENTID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONF_NAME,_Fields.START_TIME,_Fields.UPDATE_TIME,_Fields.EVENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATORID, new org.apache.thrift.meta_data.FieldMetaData("operatorid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUMMARY_ID, new org.apache.thrift.meta_data.FieldMetaData("summary_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUMMARY_NAME, new org.apache.thrift.meta_data.FieldMetaData("summary_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONF_ID, new org.apache.thrift.meta_data.FieldMetaData("confId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONF_NAME, new org.apache.thrift.meta_data.FieldMetaData("confName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfSummaryContent.class, metaDataMap);
  }

  public ConfSummaryContent() {
  }

  public ConfSummaryContent(
    int operatorid,
    int summary_id,
    String summary_name,
    byte state,
    int confId)
  {
    this();
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    this.summary_id = summary_id;
    setSummary_idIsSet(true);
    this.summary_name = summary_name;
    this.state = state;
    setStateIsSet(true);
    this.confId = confId;
    setConfIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfSummaryContent(ConfSummaryContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operatorid = other.operatorid;
    this.summary_id = other.summary_id;
    if (other.isSetSummary_name()) {
      this.summary_name = other.summary_name;
    }
    this.state = other.state;
    this.confId = other.confId;
    if (other.isSetConfName()) {
      this.confName = other.confName;
    }
    this.startTime = other.startTime;
    this.updateTime = other.updateTime;
    this.eventId = other.eventId;
  }

  public ConfSummaryContent deepCopy() {
    return new ConfSummaryContent(this);
  }

  @Override
  public void clear() {
    setOperatoridIsSet(false);
    this.operatorid = 0;
    setSummary_idIsSet(false);
    this.summary_id = 0;
    this.summary_name = null;
    setStateIsSet(false);
    this.state = 0;
    setConfIdIsSet(false);
    this.confId = 0;
    this.confName = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setEventIdIsSet(false);
    this.eventId = 0;
  }

  public int getOperatorid() {
    return this.operatorid;
  }

  public ConfSummaryContent setOperatorid(int operatorid) {
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    return this;
  }

  public void unsetOperatorid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorid is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorid() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatoridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public int getSummary_id() {
    return this.summary_id;
  }

  public ConfSummaryContent setSummary_id(int summary_id) {
    this.summary_id = summary_id;
    setSummary_idIsSet(true);
    return this;
  }

  public void unsetSummary_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMMARY_ID_ISSET_ID);
  }

  /** Returns true if field summary_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SUMMARY_ID_ISSET_ID);
  }

  public void setSummary_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMMARY_ID_ISSET_ID, value);
  }

  public String getSummary_name() {
    return this.summary_name;
  }

  public ConfSummaryContent setSummary_name(String summary_name) {
    this.summary_name = summary_name;
    return this;
  }

  public void unsetSummary_name() {
    this.summary_name = null;
  }

  /** Returns true if field summary_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary_name() {
    return this.summary_name != null;
  }

  public void setSummary_nameIsSet(boolean value) {
    if (!value) {
      this.summary_name = null;
    }
  }

  public byte getState() {
    return this.state;
  }

  public ConfSummaryContent setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getConfId() {
    return this.confId;
  }

  public ConfSummaryContent setConfId(int confId) {
    this.confId = confId;
    setConfIdIsSet(true);
    return this;
  }

  public void unsetConfId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFID_ISSET_ID);
  }

  /** Returns true if field confId is set (has been assigned a value) and false otherwise */
  public boolean isSetConfId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFID_ISSET_ID);
  }

  public void setConfIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFID_ISSET_ID, value);
  }

  public String getConfName() {
    return this.confName;
  }

  public ConfSummaryContent setConfName(String confName) {
    this.confName = confName;
    return this;
  }

  public void unsetConfName() {
    this.confName = null;
  }

  /** Returns true if field confName is set (has been assigned a value) and false otherwise */
  public boolean isSetConfName() {
    return this.confName != null;
  }

  public void setConfNameIsSet(boolean value) {
    if (!value) {
      this.confName = null;
    }
  }

  public int getStartTime() {
    return this.startTime;
  }

  public ConfSummaryContent setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public int getUpdateTime() {
    return this.updateTime;
  }

  public ConfSummaryContent setUpdateTime(int updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getEventId() {
    return this.eventId;
  }

  public ConfSummaryContent setEventId(long eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATORID:
      if (value == null) {
        unsetOperatorid();
      } else {
        setOperatorid((Integer)value);
      }
      break;

    case SUMMARY_ID:
      if (value == null) {
        unsetSummary_id();
      } else {
        setSummary_id((Integer)value);
      }
      break;

    case SUMMARY_NAME:
      if (value == null) {
        unsetSummary_name();
      } else {
        setSummary_name((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Byte)value);
      }
      break;

    case CONF_ID:
      if (value == null) {
        unsetConfId();
      } else {
        setConfId((Integer)value);
      }
      break;

    case CONF_NAME:
      if (value == null) {
        unsetConfName();
      } else {
        setConfName((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Integer)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATORID:
      return Integer.valueOf(getOperatorid());

    case SUMMARY_ID:
      return Integer.valueOf(getSummary_id());

    case SUMMARY_NAME:
      return getSummary_name();

    case STATE:
      return Byte.valueOf(getState());

    case CONF_ID:
      return Integer.valueOf(getConfId());

    case CONF_NAME:
      return getConfName();

    case START_TIME:
      return Integer.valueOf(getStartTime());

    case UPDATE_TIME:
      return Integer.valueOf(getUpdateTime());

    case EVENT_ID:
      return Long.valueOf(getEventId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATORID:
      return isSetOperatorid();
    case SUMMARY_ID:
      return isSetSummary_id();
    case SUMMARY_NAME:
      return isSetSummary_name();
    case STATE:
      return isSetState();
    case CONF_ID:
      return isSetConfId();
    case CONF_NAME:
      return isSetConfName();
    case START_TIME:
      return isSetStartTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case EVENT_ID:
      return isSetEventId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfSummaryContent)
      return this.equals((ConfSummaryContent)that);
    return false;
  }

  public boolean equals(ConfSummaryContent that) {
    if (that == null)
      return false;

    boolean this_present_operatorid = true;
    boolean that_present_operatorid = true;
    if (this_present_operatorid || that_present_operatorid) {
      if (!(this_present_operatorid && that_present_operatorid))
        return false;
      if (this.operatorid != that.operatorid)
        return false;
    }

    boolean this_present_summary_id = true;
    boolean that_present_summary_id = true;
    if (this_present_summary_id || that_present_summary_id) {
      if (!(this_present_summary_id && that_present_summary_id))
        return false;
      if (this.summary_id != that.summary_id)
        return false;
    }

    boolean this_present_summary_name = true && this.isSetSummary_name();
    boolean that_present_summary_name = true && that.isSetSummary_name();
    if (this_present_summary_name || that_present_summary_name) {
      if (!(this_present_summary_name && that_present_summary_name))
        return false;
      if (!this.summary_name.equals(that.summary_name))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_confId = true;
    boolean that_present_confId = true;
    if (this_present_confId || that_present_confId) {
      if (!(this_present_confId && that_present_confId))
        return false;
      if (this.confId != that.confId)
        return false;
    }

    boolean this_present_confName = true && this.isSetConfName();
    boolean that_present_confName = true && that.isSetConfName();
    if (this_present_confName || that_present_confName) {
      if (!(this_present_confName && that_present_confName))
        return false;
      if (!this.confName.equals(that.confName))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_eventId = true && this.isSetEventId();
    boolean that_present_eventId = true && that.isSetEventId();
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operatorid = true;
    list.add(present_operatorid);
    if (present_operatorid)
      list.add(operatorid);

    boolean present_summary_id = true;
    list.add(present_summary_id);
    if (present_summary_id)
      list.add(summary_id);

    boolean present_summary_name = true && (isSetSummary_name());
    list.add(present_summary_name);
    if (present_summary_name)
      list.add(summary_name);

    boolean present_state = true;
    list.add(present_state);
    if (present_state)
      list.add(state);

    boolean present_confId = true;
    list.add(present_confId);
    if (present_confId)
      list.add(confId);

    boolean present_confName = true && (isSetConfName());
    list.add(present_confName);
    if (present_confName)
      list.add(confName);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_eventId = true && (isSetEventId());
    list.add(present_eventId);
    if (present_eventId)
      list.add(eventId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ConfSummaryContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperatorid()).compareTo(other.isSetOperatorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorid, other.operatorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary_id()).compareTo(other.isSetSummary_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary_id, other.summary_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary_name()).compareTo(other.isSetSummary_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary_name, other.summary_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfId()).compareTo(other.isSetConfId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confId, other.confId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfName()).compareTo(other.isSetConfName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confName, other.confName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfSummaryContent(");
    boolean first = true;

    sb.append("operatorid:");
    sb.append(this.operatorid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary_id:");
    sb.append(this.summary_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary_name:");
    if (this.summary_name == null) {
      sb.append("null");
    } else {
      sb.append(this.summary_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confId:");
    sb.append(this.confId);
    first = false;
    if (isSetConfName()) {
      if (!first) sb.append(", ");
      sb.append("confName:");
      if (this.confName == null) {
        sb.append("null");
      } else {
        sb.append(this.confName);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    if (isSetEventId()) {
      if (!first) sb.append(", ");
      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operatorid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'summary_id' because it's a primitive and you chose the non-beans generator.
    if (summary_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'summary_name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'state' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'confId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfSummaryContentStandardSchemeFactory implements SchemeFactory {
    public ConfSummaryContentStandardScheme getScheme() {
      return new ConfSummaryContentStandardScheme();
    }
  }

  private static class ConfSummaryContentStandardScheme extends StandardScheme<ConfSummaryContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfSummaryContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorid = iprot.readI32();
              struct.setOperatoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUMMARY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.summary_id = iprot.readI32();
              struct.setSummary_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUMMARY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary_name = iprot.readString();
              struct.setSummary_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confId = iprot.readI32();
              struct.setConfIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONF_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confName = iprot.readString();
              struct.setConfNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateTime = iprot.readI32();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventId = iprot.readI64();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperatorid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSummary_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'summary_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConfId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'confId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfSummaryContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATORID_FIELD_DESC);
      oprot.writeI32(struct.operatorid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUMMARY_ID_FIELD_DESC);
      oprot.writeI32(struct.summary_id);
      oprot.writeFieldEnd();
      if (struct.summary_name != null) {
        oprot.writeFieldBegin(SUMMARY_NAME_FIELD_DESC);
        oprot.writeString(struct.summary_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeByte(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONF_ID_FIELD_DESC);
      oprot.writeI32(struct.confId);
      oprot.writeFieldEnd();
      if (struct.confName != null) {
        if (struct.isSetConfName()) {
          oprot.writeFieldBegin(CONF_NAME_FIELD_DESC);
          oprot.writeString(struct.confName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartTime()) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI32(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI32(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEventId()) {
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI64(struct.eventId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfSummaryContentTupleSchemeFactory implements SchemeFactory {
    public ConfSummaryContentTupleScheme getScheme() {
      return new ConfSummaryContentTupleScheme();
    }
  }

  private static class ConfSummaryContentTupleScheme extends TupleScheme<ConfSummaryContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfSummaryContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.operatorid);
      oprot.writeI32(struct.summary_id);
      oprot.writeString(struct.summary_name);
      oprot.writeByte(struct.state);
      oprot.writeI32(struct.confId);
      BitSet optionals = new BitSet();
      if (struct.isSetConfName()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(2);
      }
      if (struct.isSetEventId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetConfName()) {
        oprot.writeString(struct.confName);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI32(struct.startTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI32(struct.updateTime);
      }
      if (struct.isSetEventId()) {
        oprot.writeI64(struct.eventId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfSummaryContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operatorid = iprot.readI32();
      struct.setOperatoridIsSet(true);
      struct.summary_id = iprot.readI32();
      struct.setSummary_idIsSet(true);
      struct.summary_name = iprot.readString();
      struct.setSummary_nameIsSet(true);
      struct.state = iprot.readByte();
      struct.setStateIsSet(true);
      struct.confId = iprot.readI32();
      struct.setConfIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.confName = iprot.readString();
        struct.setConfNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = iprot.readI32();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.updateTime = iprot.readI32();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventId = iprot.readI64();
        struct.setEventIdIsSet(true);
      }
    }
  }

}

