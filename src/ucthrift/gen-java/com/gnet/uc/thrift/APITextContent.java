/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class APITextContent implements org.apache.thrift.TBase<APITextContent, APITextContent._Fields>, java.io.Serializable, Cloneable, Comparable<APITextContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APITextContent");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailType", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField DETAIL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("detailContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DETAIL_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("detailAuth", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APITextContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APITextContentTupleSchemeFactory());
  }

  public String title; // optional
  public String content; // required
  public byte detailType; // optional
  public String detailContent; // optional
  public byte detailAuth; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    CONTENT((short)2, "content"),
    DETAIL_TYPE((short)3, "detailType"),
    DETAIL_CONTENT((short)4, "detailContent"),
    DETAIL_AUTH((short)5, "detailAuth");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // CONTENT
          return CONTENT;
        case 3: // DETAIL_TYPE
          return DETAIL_TYPE;
        case 4: // DETAIL_CONTENT
          return DETAIL_CONTENT;
        case 5: // DETAIL_AUTH
          return DETAIL_AUTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DETAILTYPE_ISSET_ID = 0;
  private static final int __DETAILAUTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TITLE,_Fields.DETAIL_TYPE,_Fields.DETAIL_CONTENT,_Fields.DETAIL_AUTH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("detailType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DETAIL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("detailContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_AUTH, new org.apache.thrift.meta_data.FieldMetaData("detailAuth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APITextContent.class, metaDataMap);
  }

  public APITextContent() {
  }

  public APITextContent(
    String content)
  {
    this();
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APITextContent(APITextContent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.detailType = other.detailType;
    if (other.isSetDetailContent()) {
      this.detailContent = other.detailContent;
    }
    this.detailAuth = other.detailAuth;
  }

  public APITextContent deepCopy() {
    return new APITextContent(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.content = null;
    setDetailTypeIsSet(false);
    this.detailType = 0;
    this.detailContent = null;
    setDetailAuthIsSet(false);
    this.detailAuth = 0;
  }

  public String getTitle() {
    return this.title;
  }

  public APITextContent setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public APITextContent setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public byte getDetailType() {
    return this.detailType;
  }

  public APITextContent setDetailType(byte detailType) {
    this.detailType = detailType;
    setDetailTypeIsSet(true);
    return this;
  }

  public void unsetDetailType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  /** Returns true if field detailType is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailType() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  public void setDetailTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILTYPE_ISSET_ID, value);
  }

  public String getDetailContent() {
    return this.detailContent;
  }

  public APITextContent setDetailContent(String detailContent) {
    this.detailContent = detailContent;
    return this;
  }

  public void unsetDetailContent() {
    this.detailContent = null;
  }

  /** Returns true if field detailContent is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailContent() {
    return this.detailContent != null;
  }

  public void setDetailContentIsSet(boolean value) {
    if (!value) {
      this.detailContent = null;
    }
  }

  public byte getDetailAuth() {
    return this.detailAuth;
  }

  public APITextContent setDetailAuth(byte detailAuth) {
    this.detailAuth = detailAuth;
    setDetailAuthIsSet(true);
    return this;
  }

  public void unsetDetailAuth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILAUTH_ISSET_ID);
  }

  /** Returns true if field detailAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailAuth() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILAUTH_ISSET_ID);
  }

  public void setDetailAuthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILAUTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case DETAIL_TYPE:
      if (value == null) {
        unsetDetailType();
      } else {
        setDetailType((Byte)value);
      }
      break;

    case DETAIL_CONTENT:
      if (value == null) {
        unsetDetailContent();
      } else {
        setDetailContent((String)value);
      }
      break;

    case DETAIL_AUTH:
      if (value == null) {
        unsetDetailAuth();
      } else {
        setDetailAuth((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case DETAIL_TYPE:
      return Byte.valueOf(getDetailType());

    case DETAIL_CONTENT:
      return getDetailContent();

    case DETAIL_AUTH:
      return Byte.valueOf(getDetailAuth());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case DETAIL_TYPE:
      return isSetDetailType();
    case DETAIL_CONTENT:
      return isSetDetailContent();
    case DETAIL_AUTH:
      return isSetDetailAuth();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APITextContent)
      return this.equals((APITextContent)that);
    return false;
  }

  public boolean equals(APITextContent that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_detailType = true && this.isSetDetailType();
    boolean that_present_detailType = true && that.isSetDetailType();
    if (this_present_detailType || that_present_detailType) {
      if (!(this_present_detailType && that_present_detailType))
        return false;
      if (this.detailType != that.detailType)
        return false;
    }

    boolean this_present_detailContent = true && this.isSetDetailContent();
    boolean that_present_detailContent = true && that.isSetDetailContent();
    if (this_present_detailContent || that_present_detailContent) {
      if (!(this_present_detailContent && that_present_detailContent))
        return false;
      if (!this.detailContent.equals(that.detailContent))
        return false;
    }

    boolean this_present_detailAuth = true && this.isSetDetailAuth();
    boolean that_present_detailAuth = true && that.isSetDetailAuth();
    if (this_present_detailAuth || that_present_detailAuth) {
      if (!(this_present_detailAuth && that_present_detailAuth))
        return false;
      if (this.detailAuth != that.detailAuth)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_detailType = true && (isSetDetailType());
    list.add(present_detailType);
    if (present_detailType)
      list.add(detailType);

    boolean present_detailContent = true && (isSetDetailContent());
    list.add(present_detailContent);
    if (present_detailContent)
      list.add(detailContent);

    boolean present_detailAuth = true && (isSetDetailAuth());
    list.add(present_detailAuth);
    if (present_detailAuth)
      list.add(detailAuth);

    return list.hashCode();
  }

  @Override
  public int compareTo(APITextContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailType()).compareTo(other.isSetDetailType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailType, other.detailType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailContent()).compareTo(other.isSetDetailContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailContent, other.detailContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailAuth()).compareTo(other.isSetDetailAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailAuth, other.detailAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APITextContent(");
    boolean first = true;

    if (isSetTitle()) {
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (isSetDetailType()) {
      if (!first) sb.append(", ");
      sb.append("detailType:");
      sb.append(this.detailType);
      first = false;
    }
    if (isSetDetailContent()) {
      if (!first) sb.append(", ");
      sb.append("detailContent:");
      if (this.detailContent == null) {
        sb.append("null");
      } else {
        sb.append(this.detailContent);
      }
      first = false;
    }
    if (isSetDetailAuth()) {
      if (!first) sb.append(", ");
      sb.append("detailAuth:");
      sb.append(this.detailAuth);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APITextContentStandardSchemeFactory implements SchemeFactory {
    public APITextContentStandardScheme getScheme() {
      return new APITextContentStandardScheme();
    }
  }

  private static class APITextContentStandardScheme extends StandardScheme<APITextContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APITextContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DETAIL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.detailType = iprot.readByte();
              struct.setDetailTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DETAIL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailContent = iprot.readString();
              struct.setDetailContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DETAIL_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.detailAuth = iprot.readByte();
              struct.setDetailAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APITextContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDetailType()) {
        oprot.writeFieldBegin(DETAIL_TYPE_FIELD_DESC);
        oprot.writeByte(struct.detailType);
        oprot.writeFieldEnd();
      }
      if (struct.detailContent != null) {
        if (struct.isSetDetailContent()) {
          oprot.writeFieldBegin(DETAIL_CONTENT_FIELD_DESC);
          oprot.writeString(struct.detailContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDetailAuth()) {
        oprot.writeFieldBegin(DETAIL_AUTH_FIELD_DESC);
        oprot.writeByte(struct.detailAuth);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APITextContentTupleSchemeFactory implements SchemeFactory {
    public APITextContentTupleScheme getScheme() {
      return new APITextContentTupleScheme();
    }
  }

  private static class APITextContentTupleScheme extends TupleScheme<APITextContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APITextContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.content);
      BitSet optionals = new BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetDetailType()) {
        optionals.set(1);
      }
      if (struct.isSetDetailContent()) {
        optionals.set(2);
      }
      if (struct.isSetDetailAuth()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDetailType()) {
        oprot.writeByte(struct.detailType);
      }
      if (struct.isSetDetailContent()) {
        oprot.writeString(struct.detailContent);
      }
      if (struct.isSetDetailAuth()) {
        oprot.writeByte(struct.detailAuth);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APITextContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.content = iprot.readString();
      struct.setContentIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.detailType = iprot.readByte();
        struct.setDetailTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.detailContent = iprot.readString();
        struct.setDetailContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.detailAuth = iprot.readByte();
        struct.setDetailAuthIsSet(true);
      }
    }
  }

}

