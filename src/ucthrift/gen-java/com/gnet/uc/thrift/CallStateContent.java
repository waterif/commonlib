/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class CallStateContent implements org.apache.thrift.TBase<CallStateContent, CallStateContent._Fields>, java.io.Serializable, Cloneable, Comparable<CallStateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallStateContent");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partyId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CALL_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("callSeq", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OLD_CALL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldCallState", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NEW_CALL_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("newCallState", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CallStateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CallStateContentTupleSchemeFactory());
  }

  public int userId; // required
  public String partyId; // required
  public String callSeq; // required
  public int oldCallState; // required
  public int newCallState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    PARTY_ID((short)2, "partyId"),
    CALL_SEQ((short)3, "callSeq"),
    OLD_CALL_STATE((short)4, "oldCallState"),
    NEW_CALL_STATE((short)5, "newCallState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // PARTY_ID
          return PARTY_ID;
        case 3: // CALL_SEQ
          return CALL_SEQ;
        case 4: // OLD_CALL_STATE
          return OLD_CALL_STATE;
        case 5: // NEW_CALL_STATE
          return NEW_CALL_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __OLDCALLSTATE_ISSET_ID = 1;
  private static final int __NEWCALLSTATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTY_ID, new org.apache.thrift.meta_data.FieldMetaData("partyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_SEQ, new org.apache.thrift.meta_data.FieldMetaData("callSeq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_CALL_STATE, new org.apache.thrift.meta_data.FieldMetaData("oldCallState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_CALL_STATE, new org.apache.thrift.meta_data.FieldMetaData("newCallState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CallStateContent.class, metaDataMap);
  }

  public CallStateContent() {
  }

  public CallStateContent(
    int userId,
    String partyId,
    String callSeq,
    int oldCallState,
    int newCallState)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.partyId = partyId;
    this.callSeq = callSeq;
    this.oldCallState = oldCallState;
    setOldCallStateIsSet(true);
    this.newCallState = newCallState;
    setNewCallStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CallStateContent(CallStateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetPartyId()) {
      this.partyId = other.partyId;
    }
    if (other.isSetCallSeq()) {
      this.callSeq = other.callSeq;
    }
    this.oldCallState = other.oldCallState;
    this.newCallState = other.newCallState;
  }

  public CallStateContent deepCopy() {
    return new CallStateContent(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.partyId = null;
    this.callSeq = null;
    setOldCallStateIsSet(false);
    this.oldCallState = 0;
    setNewCallStateIsSet(false);
    this.newCallState = 0;
  }

  public int getUserId() {
    return this.userId;
  }

  public CallStateContent setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getPartyId() {
    return this.partyId;
  }

  public CallStateContent setPartyId(String partyId) {
    this.partyId = partyId;
    return this;
  }

  public void unsetPartyId() {
    this.partyId = null;
  }

  /** Returns true if field partyId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartyId() {
    return this.partyId != null;
  }

  public void setPartyIdIsSet(boolean value) {
    if (!value) {
      this.partyId = null;
    }
  }

  public String getCallSeq() {
    return this.callSeq;
  }

  public CallStateContent setCallSeq(String callSeq) {
    this.callSeq = callSeq;
    return this;
  }

  public void unsetCallSeq() {
    this.callSeq = null;
  }

  /** Returns true if field callSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetCallSeq() {
    return this.callSeq != null;
  }

  public void setCallSeqIsSet(boolean value) {
    if (!value) {
      this.callSeq = null;
    }
  }

  public int getOldCallState() {
    return this.oldCallState;
  }

  public CallStateContent setOldCallState(int oldCallState) {
    this.oldCallState = oldCallState;
    setOldCallStateIsSet(true);
    return this;
  }

  public void unsetOldCallState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDCALLSTATE_ISSET_ID);
  }

  /** Returns true if field oldCallState is set (has been assigned a value) and false otherwise */
  public boolean isSetOldCallState() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDCALLSTATE_ISSET_ID);
  }

  public void setOldCallStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDCALLSTATE_ISSET_ID, value);
  }

  public int getNewCallState() {
    return this.newCallState;
  }

  public CallStateContent setNewCallState(int newCallState) {
    this.newCallState = newCallState;
    setNewCallStateIsSet(true);
    return this;
  }

  public void unsetNewCallState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWCALLSTATE_ISSET_ID);
  }

  /** Returns true if field newCallState is set (has been assigned a value) and false otherwise */
  public boolean isSetNewCallState() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWCALLSTATE_ISSET_ID);
  }

  public void setNewCallStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWCALLSTATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case PARTY_ID:
      if (value == null) {
        unsetPartyId();
      } else {
        setPartyId((String)value);
      }
      break;

    case CALL_SEQ:
      if (value == null) {
        unsetCallSeq();
      } else {
        setCallSeq((String)value);
      }
      break;

    case OLD_CALL_STATE:
      if (value == null) {
        unsetOldCallState();
      } else {
        setOldCallState((Integer)value);
      }
      break;

    case NEW_CALL_STATE:
      if (value == null) {
        unsetNewCallState();
      } else {
        setNewCallState((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Integer.valueOf(getUserId());

    case PARTY_ID:
      return getPartyId();

    case CALL_SEQ:
      return getCallSeq();

    case OLD_CALL_STATE:
      return Integer.valueOf(getOldCallState());

    case NEW_CALL_STATE:
      return Integer.valueOf(getNewCallState());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case PARTY_ID:
      return isSetPartyId();
    case CALL_SEQ:
      return isSetCallSeq();
    case OLD_CALL_STATE:
      return isSetOldCallState();
    case NEW_CALL_STATE:
      return isSetNewCallState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CallStateContent)
      return this.equals((CallStateContent)that);
    return false;
  }

  public boolean equals(CallStateContent that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_partyId = true && this.isSetPartyId();
    boolean that_present_partyId = true && that.isSetPartyId();
    if (this_present_partyId || that_present_partyId) {
      if (!(this_present_partyId && that_present_partyId))
        return false;
      if (!this.partyId.equals(that.partyId))
        return false;
    }

    boolean this_present_callSeq = true && this.isSetCallSeq();
    boolean that_present_callSeq = true && that.isSetCallSeq();
    if (this_present_callSeq || that_present_callSeq) {
      if (!(this_present_callSeq && that_present_callSeq))
        return false;
      if (!this.callSeq.equals(that.callSeq))
        return false;
    }

    boolean this_present_oldCallState = true;
    boolean that_present_oldCallState = true;
    if (this_present_oldCallState || that_present_oldCallState) {
      if (!(this_present_oldCallState && that_present_oldCallState))
        return false;
      if (this.oldCallState != that.oldCallState)
        return false;
    }

    boolean this_present_newCallState = true;
    boolean that_present_newCallState = true;
    if (this_present_newCallState || that_present_newCallState) {
      if (!(this_present_newCallState && that_present_newCallState))
        return false;
      if (this.newCallState != that.newCallState)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_partyId = true && (isSetPartyId());
    list.add(present_partyId);
    if (present_partyId)
      list.add(partyId);

    boolean present_callSeq = true && (isSetCallSeq());
    list.add(present_callSeq);
    if (present_callSeq)
      list.add(callSeq);

    boolean present_oldCallState = true;
    list.add(present_oldCallState);
    if (present_oldCallState)
      list.add(oldCallState);

    boolean present_newCallState = true;
    list.add(present_newCallState);
    if (present_newCallState)
      list.add(newCallState);

    return list.hashCode();
  }

  @Override
  public int compareTo(CallStateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartyId()).compareTo(other.isSetPartyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partyId, other.partyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallSeq()).compareTo(other.isSetCallSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callSeq, other.callSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldCallState()).compareTo(other.isSetOldCallState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldCallState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldCallState, other.oldCallState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewCallState()).compareTo(other.isSetNewCallState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewCallState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newCallState, other.newCallState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CallStateContent(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partyId:");
    if (this.partyId == null) {
      sb.append("null");
    } else {
      sb.append(this.partyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callSeq:");
    if (this.callSeq == null) {
      sb.append("null");
    } else {
      sb.append(this.callSeq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldCallState:");
    sb.append(this.oldCallState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newCallState:");
    sb.append(this.newCallState);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    if (partyId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partyId' was not present! Struct: " + toString());
    }
    if (callSeq == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'callSeq' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'oldCallState' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'newCallState' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CallStateContentStandardSchemeFactory implements SchemeFactory {
    public CallStateContentStandardScheme getScheme() {
      return new CallStateContentStandardScheme();
    }
  }

  private static class CallStateContentStandardScheme extends StandardScheme<CallStateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CallStateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partyId = iprot.readString();
              struct.setPartyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CALL_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callSeq = iprot.readString();
              struct.setCallSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OLD_CALL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oldCallState = iprot.readI32();
              struct.setOldCallStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEW_CALL_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newCallState = iprot.readI32();
              struct.setNewCallStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOldCallState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'oldCallState' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNewCallState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'newCallState' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CallStateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.partyId != null) {
        oprot.writeFieldBegin(PARTY_ID_FIELD_DESC);
        oprot.writeString(struct.partyId);
        oprot.writeFieldEnd();
      }
      if (struct.callSeq != null) {
        oprot.writeFieldBegin(CALL_SEQ_FIELD_DESC);
        oprot.writeString(struct.callSeq);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OLD_CALL_STATE_FIELD_DESC);
      oprot.writeI32(struct.oldCallState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_CALL_STATE_FIELD_DESC);
      oprot.writeI32(struct.newCallState);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CallStateContentTupleSchemeFactory implements SchemeFactory {
    public CallStateContentTupleScheme getScheme() {
      return new CallStateContentTupleScheme();
    }
  }

  private static class CallStateContentTupleScheme extends TupleScheme<CallStateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CallStateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.partyId);
      oprot.writeString(struct.callSeq);
      oprot.writeI32(struct.oldCallState);
      oprot.writeI32(struct.newCallState);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CallStateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.partyId = iprot.readString();
      struct.setPartyIdIsSet(true);
      struct.callSeq = iprot.readString();
      struct.setCallSeqIsSet(true);
      struct.oldCallState = iprot.readI32();
      struct.setOldCallStateIsSet(true);
      struct.newCallState = iprot.readI32();
      struct.setNewCallStateIsSet(true);
    }
  }

}

