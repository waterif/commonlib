/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class APIAppChangeNotifyContent implements org.apache.thrift.TBase<APIAppChangeNotifyContent, APIAppChangeNotifyContent._Fields>, java.io.Serializable, Cloneable, Comparable<APIAppChangeNotifyContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APIAppChangeNotifyContent");

  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERNAL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("externalData", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APIAppChangeNotifyContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APIAppChangeNotifyContentTupleSchemeFactory());
  }

  public short event; // required
  public long appId; // required
  public String externalData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT((short)1, "event"),
    APP_ID((short)2, "appId"),
    EXTERNAL_DATA((short)3, "externalData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT
          return EVENT;
        case 2: // APP_ID
          return APP_ID;
        case 3: // EXTERNAL_DATA
          return EXTERNAL_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENT_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXTERNAL_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTERNAL_DATA, new org.apache.thrift.meta_data.FieldMetaData("externalData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APIAppChangeNotifyContent.class, metaDataMap);
  }

  public APIAppChangeNotifyContent() {
  }

  public APIAppChangeNotifyContent(
    short event,
    long appId)
  {
    this();
    this.event = event;
    setEventIsSet(true);
    this.appId = appId;
    setAppIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APIAppChangeNotifyContent(APIAppChangeNotifyContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.event = other.event;
    this.appId = other.appId;
    if (other.isSetExternalData()) {
      this.externalData = other.externalData;
    }
  }

  public APIAppChangeNotifyContent deepCopy() {
    return new APIAppChangeNotifyContent(this);
  }

  @Override
  public void clear() {
    setEventIsSet(false);
    this.event = 0;
    setAppIdIsSet(false);
    this.appId = 0;
    this.externalData = null;
  }

  public short getEvent() {
    return this.event;
  }

  public APIAppChangeNotifyContent setEvent(short event) {
    this.event = event;
    setEventIsSet(true);
    return this;
  }

  public void unsetEvent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENT_ISSET_ID);
  }

  /** Returns true if field event is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENT_ISSET_ID);
  }

  public void setEventIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENT_ISSET_ID, value);
  }

  public long getAppId() {
    return this.appId;
  }

  public APIAppChangeNotifyContent setAppId(long appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public String getExternalData() {
    return this.externalData;
  }

  public APIAppChangeNotifyContent setExternalData(String externalData) {
    this.externalData = externalData;
    return this;
  }

  public void unsetExternalData() {
    this.externalData = null;
  }

  /** Returns true if field externalData is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalData() {
    return this.externalData != null;
  }

  public void setExternalDataIsSet(boolean value) {
    if (!value) {
      this.externalData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((Short)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Long)value);
      }
      break;

    case EXTERNAL_DATA:
      if (value == null) {
        unsetExternalData();
      } else {
        setExternalData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT:
      return Short.valueOf(getEvent());

    case APP_ID:
      return Long.valueOf(getAppId());

    case EXTERNAL_DATA:
      return getExternalData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT:
      return isSetEvent();
    case APP_ID:
      return isSetAppId();
    case EXTERNAL_DATA:
      return isSetExternalData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APIAppChangeNotifyContent)
      return this.equals((APIAppChangeNotifyContent)that);
    return false;
  }

  public boolean equals(APIAppChangeNotifyContent that) {
    if (that == null)
      return false;

    boolean this_present_event = true;
    boolean that_present_event = true;
    if (this_present_event || that_present_event) {
      if (!(this_present_event && that_present_event))
        return false;
      if (this.event != that.event)
        return false;
    }

    boolean this_present_appId = true;
    boolean that_present_appId = true;
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_externalData = true && this.isSetExternalData();
    boolean that_present_externalData = true && that.isSetExternalData();
    if (this_present_externalData || that_present_externalData) {
      if (!(this_present_externalData && that_present_externalData))
        return false;
      if (!this.externalData.equals(that.externalData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_event = true;
    list.add(present_event);
    if (present_event)
      list.add(event);

    boolean present_appId = true;
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_externalData = true && (isSetExternalData());
    list.add(present_externalData);
    if (present_externalData)
      list.add(externalData);

    return list.hashCode();
  }

  @Override
  public int compareTo(APIAppChangeNotifyContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalData()).compareTo(other.isSetExternalData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalData, other.externalData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APIAppChangeNotifyContent(");
    boolean first = true;

    sb.append("event:");
    sb.append(this.event);
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    sb.append(this.appId);
    first = false;
    if (isSetExternalData()) {
      if (!first) sb.append(", ");
      sb.append("externalData:");
      if (this.externalData == null) {
        sb.append("null");
      } else {
        sb.append(this.externalData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'event' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'appId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APIAppChangeNotifyContentStandardSchemeFactory implements SchemeFactory {
    public APIAppChangeNotifyContentStandardScheme getScheme() {
      return new APIAppChangeNotifyContentStandardScheme();
    }
  }

  private static class APIAppChangeNotifyContentStandardScheme extends StandardScheme<APIAppChangeNotifyContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APIAppChangeNotifyContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.event = iprot.readI16();
              struct.setEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appId = iprot.readI64();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTERNAL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalData = iprot.readString();
              struct.setExternalDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEvent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'event' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAppId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APIAppChangeNotifyContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EVENT_FIELD_DESC);
      oprot.writeI16(struct.event);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeI64(struct.appId);
      oprot.writeFieldEnd();
      if (struct.externalData != null) {
        if (struct.isSetExternalData()) {
          oprot.writeFieldBegin(EXTERNAL_DATA_FIELD_DESC);
          oprot.writeString(struct.externalData);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APIAppChangeNotifyContentTupleSchemeFactory implements SchemeFactory {
    public APIAppChangeNotifyContentTupleScheme getScheme() {
      return new APIAppChangeNotifyContentTupleScheme();
    }
  }

  private static class APIAppChangeNotifyContentTupleScheme extends TupleScheme<APIAppChangeNotifyContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APIAppChangeNotifyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.event);
      oprot.writeI64(struct.appId);
      BitSet optionals = new BitSet();
      if (struct.isSetExternalData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetExternalData()) {
        oprot.writeString(struct.externalData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APIAppChangeNotifyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.event = iprot.readI16();
      struct.setEventIsSet(true);
      struct.appId = iprot.readI64();
      struct.setAppIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.externalData = iprot.readString();
        struct.setExternalDataIsSet(true);
      }
    }
  }

}

