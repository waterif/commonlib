/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class CommentCreateContent implements org.apache.thrift.TBase<CommentCreateContent, CommentCreateContent._Fields>, java.io.Serializable, Cloneable, Comparable<CommentCreateContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommentCreateContent");

  private static final org.apache.thrift.protocol.TField OPERATORID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("commentDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contentId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contentName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CLOUD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudType", org.apache.thrift.protocol.TType.I16, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommentCreateContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommentCreateContentTupleSchemeFactory());
  }

  public int operatorid; // required
  public String operatorName; // optional
  public long commentId; // required
  public String commentDesc; // required
  public long contentId; // required
  public String contentName; // required
  public byte contentType; // required
  public long createTime; // required
  public short cloudType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATORID((short)1, "operatorid"),
    OPERATOR_NAME((short)2, "operatorName"),
    COMMENT_ID((short)3, "commentId"),
    COMMENT_DESC((short)4, "commentDesc"),
    CONTENT_ID((short)5, "contentId"),
    CONTENT_NAME((short)6, "contentName"),
    CONTENT_TYPE((short)7, "contentType"),
    CREATE_TIME((short)8, "createTime"),
    CLOUD_TYPE((short)9, "cloudType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATORID
          return OPERATORID;
        case 2: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 3: // COMMENT_ID
          return COMMENT_ID;
        case 4: // COMMENT_DESC
          return COMMENT_DESC;
        case 5: // CONTENT_ID
          return CONTENT_ID;
        case 6: // CONTENT_NAME
          return CONTENT_NAME;
        case 7: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        case 9: // CLOUD_TYPE
          return CLOUD_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATORID_ISSET_ID = 0;
  private static final int __COMMENTID_ISSET_ID = 1;
  private static final int __CONTENTID_ISSET_ID = 2;
  private static final int __CONTENTTYPE_ISSET_ID = 3;
  private static final int __CREATETIME_ISSET_ID = 4;
  private static final int __CLOUDTYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPERATOR_NAME,_Fields.CLOUD_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATORID, new org.apache.thrift.meta_data.FieldMetaData("operatorid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT_DESC, new org.apache.thrift.meta_data.FieldMetaData("commentDesc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_ID, new org.apache.thrift.meta_data.FieldMetaData("contentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contentName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOUD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cloudType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommentCreateContent.class, metaDataMap);
  }

  public CommentCreateContent() {
  }

  public CommentCreateContent(
    int operatorid,
    long commentId,
    String commentDesc,
    long contentId,
    String contentName,
    byte contentType,
    long createTime)
  {
    this();
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    this.commentId = commentId;
    setCommentIdIsSet(true);
    this.commentDesc = commentDesc;
    this.contentId = contentId;
    setContentIdIsSet(true);
    this.contentName = contentName;
    this.contentType = contentType;
    setContentTypeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommentCreateContent(CommentCreateContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operatorid = other.operatorid;
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
    this.commentId = other.commentId;
    if (other.isSetCommentDesc()) {
      this.commentDesc = other.commentDesc;
    }
    this.contentId = other.contentId;
    if (other.isSetContentName()) {
      this.contentName = other.contentName;
    }
    this.contentType = other.contentType;
    this.createTime = other.createTime;
    this.cloudType = other.cloudType;
  }

  public CommentCreateContent deepCopy() {
    return new CommentCreateContent(this);
  }

  @Override
  public void clear() {
    setOperatoridIsSet(false);
    this.operatorid = 0;
    this.operatorName = null;
    setCommentIdIsSet(false);
    this.commentId = 0;
    this.commentDesc = null;
    setContentIdIsSet(false);
    this.contentId = 0;
    this.contentName = null;
    setContentTypeIsSet(false);
    this.contentType = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setCloudTypeIsSet(false);
    this.cloudType = 0;
  }

  public int getOperatorid() {
    return this.operatorid;
  }

  public CommentCreateContent setOperatorid(int operatorid) {
    this.operatorid = operatorid;
    setOperatoridIsSet(true);
    return this;
  }

  public void unsetOperatorid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  /** Returns true if field operatorid is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorid() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATORID_ISSET_ID);
  }

  public void setOperatoridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATORID_ISSET_ID, value);
  }

  public String getOperatorName() {
    return this.operatorName;
  }

  public CommentCreateContent setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  public long getCommentId() {
    return this.commentId;
  }

  public CommentCreateContent setCommentId(long commentId) {
    this.commentId = commentId;
    setCommentIdIsSet(true);
    return this;
  }

  public void unsetCommentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  public void setCommentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTID_ISSET_ID, value);
  }

  public String getCommentDesc() {
    return this.commentDesc;
  }

  public CommentCreateContent setCommentDesc(String commentDesc) {
    this.commentDesc = commentDesc;
    return this;
  }

  public void unsetCommentDesc() {
    this.commentDesc = null;
  }

  /** Returns true if field commentDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentDesc() {
    return this.commentDesc != null;
  }

  public void setCommentDescIsSet(boolean value) {
    if (!value) {
      this.commentDesc = null;
    }
  }

  public long getContentId() {
    return this.contentId;
  }

  public CommentCreateContent setContentId(long contentId) {
    this.contentId = contentId;
    setContentIdIsSet(true);
    return this;
  }

  public void unsetContentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  /** Returns true if field contentId is set (has been assigned a value) and false otherwise */
  public boolean isSetContentId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTID_ISSET_ID);
  }

  public void setContentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTID_ISSET_ID, value);
  }

  public String getContentName() {
    return this.contentName;
  }

  public CommentCreateContent setContentName(String contentName) {
    this.contentName = contentName;
    return this;
  }

  public void unsetContentName() {
    this.contentName = null;
  }

  /** Returns true if field contentName is set (has been assigned a value) and false otherwise */
  public boolean isSetContentName() {
    return this.contentName != null;
  }

  public void setContentNameIsSet(boolean value) {
    if (!value) {
      this.contentName = null;
    }
  }

  public byte getContentType() {
    return this.contentType;
  }

  public CommentCreateContent setContentType(byte contentType) {
    this.contentType = contentType;
    setContentTypeIsSet(true);
    return this;
  }

  public void unsetContentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID);
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID);
  }

  public void setContentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public CommentCreateContent setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public short getCloudType() {
    return this.cloudType;
  }

  public CommentCreateContent setCloudType(short cloudType) {
    this.cloudType = cloudType;
    setCloudTypeIsSet(true);
    return this;
  }

  public void unsetCloudType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOUDTYPE_ISSET_ID);
  }

  /** Returns true if field cloudType is set (has been assigned a value) and false otherwise */
  public boolean isSetCloudType() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOUDTYPE_ISSET_ID);
  }

  public void setCloudTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOUDTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATORID:
      if (value == null) {
        unsetOperatorid();
      } else {
        setOperatorid((Integer)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((Long)value);
      }
      break;

    case COMMENT_DESC:
      if (value == null) {
        unsetCommentDesc();
      } else {
        setCommentDesc((String)value);
      }
      break;

    case CONTENT_ID:
      if (value == null) {
        unsetContentId();
      } else {
        setContentId((Long)value);
      }
      break;

    case CONTENT_NAME:
      if (value == null) {
        unsetContentName();
      } else {
        setContentName((String)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((Byte)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case CLOUD_TYPE:
      if (value == null) {
        unsetCloudType();
      } else {
        setCloudType((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATORID:
      return Integer.valueOf(getOperatorid());

    case OPERATOR_NAME:
      return getOperatorName();

    case COMMENT_ID:
      return Long.valueOf(getCommentId());

    case COMMENT_DESC:
      return getCommentDesc();

    case CONTENT_ID:
      return Long.valueOf(getContentId());

    case CONTENT_NAME:
      return getContentName();

    case CONTENT_TYPE:
      return Byte.valueOf(getContentType());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case CLOUD_TYPE:
      return Short.valueOf(getCloudType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATORID:
      return isSetOperatorid();
    case OPERATOR_NAME:
      return isSetOperatorName();
    case COMMENT_ID:
      return isSetCommentId();
    case COMMENT_DESC:
      return isSetCommentDesc();
    case CONTENT_ID:
      return isSetContentId();
    case CONTENT_NAME:
      return isSetContentName();
    case CONTENT_TYPE:
      return isSetContentType();
    case CREATE_TIME:
      return isSetCreateTime();
    case CLOUD_TYPE:
      return isSetCloudType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommentCreateContent)
      return this.equals((CommentCreateContent)that);
    return false;
  }

  public boolean equals(CommentCreateContent that) {
    if (that == null)
      return false;

    boolean this_present_operatorid = true;
    boolean that_present_operatorid = true;
    if (this_present_operatorid || that_present_operatorid) {
      if (!(this_present_operatorid && that_present_operatorid))
        return false;
      if (this.operatorid != that.operatorid)
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    boolean this_present_commentId = true;
    boolean that_present_commentId = true;
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (this.commentId != that.commentId)
        return false;
    }

    boolean this_present_commentDesc = true && this.isSetCommentDesc();
    boolean that_present_commentDesc = true && that.isSetCommentDesc();
    if (this_present_commentDesc || that_present_commentDesc) {
      if (!(this_present_commentDesc && that_present_commentDesc))
        return false;
      if (!this.commentDesc.equals(that.commentDesc))
        return false;
    }

    boolean this_present_contentId = true;
    boolean that_present_contentId = true;
    if (this_present_contentId || that_present_contentId) {
      if (!(this_present_contentId && that_present_contentId))
        return false;
      if (this.contentId != that.contentId)
        return false;
    }

    boolean this_present_contentName = true && this.isSetContentName();
    boolean that_present_contentName = true && that.isSetContentName();
    if (this_present_contentName || that_present_contentName) {
      if (!(this_present_contentName && that_present_contentName))
        return false;
      if (!this.contentName.equals(that.contentName))
        return false;
    }

    boolean this_present_contentType = true;
    boolean that_present_contentType = true;
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (this.contentType != that.contentType)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_cloudType = true && this.isSetCloudType();
    boolean that_present_cloudType = true && that.isSetCloudType();
    if (this_present_cloudType || that_present_cloudType) {
      if (!(this_present_cloudType && that_present_cloudType))
        return false;
      if (this.cloudType != that.cloudType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_operatorid = true;
    list.add(present_operatorid);
    if (present_operatorid)
      list.add(operatorid);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    boolean present_commentId = true;
    list.add(present_commentId);
    if (present_commentId)
      list.add(commentId);

    boolean present_commentDesc = true && (isSetCommentDesc());
    list.add(present_commentDesc);
    if (present_commentDesc)
      list.add(commentDesc);

    boolean present_contentId = true;
    list.add(present_contentId);
    if (present_contentId)
      list.add(contentId);

    boolean present_contentName = true && (isSetContentName());
    list.add(present_contentName);
    if (present_contentName)
      list.add(contentName);

    boolean present_contentType = true;
    list.add(present_contentType);
    if (present_contentType)
      list.add(contentType);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_cloudType = true && (isSetCloudType());
    list.add(present_cloudType);
    if (present_cloudType)
      list.add(cloudType);

    return list.hashCode();
  }

  @Override
  public int compareTo(CommentCreateContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOperatorid()).compareTo(other.isSetOperatorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorid, other.operatorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentDesc()).compareTo(other.isSetCommentDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentDesc, other.commentDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentId()).compareTo(other.isSetContentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentId, other.contentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentName()).compareTo(other.isSetContentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentName, other.contentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloudType()).compareTo(other.isSetCloudType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloudType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudType, other.cloudType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommentCreateContent(");
    boolean first = true;

    sb.append("operatorid:");
    sb.append(this.operatorid);
    first = false;
    if (isSetOperatorName()) {
      if (!first) sb.append(", ");
      sb.append("operatorName:");
      if (this.operatorName == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("commentId:");
    sb.append(this.commentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentDesc:");
    if (this.commentDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.commentDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentId:");
    sb.append(this.contentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentName:");
    if (this.contentName == null) {
      sb.append("null");
    } else {
      sb.append(this.contentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    sb.append(this.contentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (isSetCloudType()) {
      if (!first) sb.append(", ");
      sb.append("cloudType:");
      sb.append(this.cloudType);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operatorid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'commentId' because it's a primitive and you chose the non-beans generator.
    if (commentDesc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'commentDesc' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'contentId' because it's a primitive and you chose the non-beans generator.
    if (contentName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'contentType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'createTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentCreateContentStandardSchemeFactory implements SchemeFactory {
    public CommentCreateContentStandardScheme getScheme() {
      return new CommentCreateContentStandardScheme();
    }
  }

  private static class CommentCreateContentStandardScheme extends StandardScheme<CommentCreateContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommentCreateContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatorid = iprot.readI32();
              struct.setOperatoridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentId = iprot.readI64();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentDesc = iprot.readString();
              struct.setCommentDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contentId = iprot.readI64();
              struct.setContentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentName = iprot.readString();
              struct.setContentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.contentType = iprot.readByte();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLOUD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.cloudType = iprot.readI16();
              struct.setCloudTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperatorid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCommentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'commentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContentType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreateTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommentCreateContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATORID_FIELD_DESC);
      oprot.writeI32(struct.operatorid);
      oprot.writeFieldEnd();
      if (struct.operatorName != null) {
        if (struct.isSetOperatorName()) {
          oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
          oprot.writeString(struct.operatorName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
      oprot.writeI64(struct.commentId);
      oprot.writeFieldEnd();
      if (struct.commentDesc != null) {
        oprot.writeFieldBegin(COMMENT_DESC_FIELD_DESC);
        oprot.writeString(struct.commentDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTENT_ID_FIELD_DESC);
      oprot.writeI64(struct.contentId);
      oprot.writeFieldEnd();
      if (struct.contentName != null) {
        oprot.writeFieldBegin(CONTENT_NAME_FIELD_DESC);
        oprot.writeString(struct.contentName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
      oprot.writeByte(struct.contentType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.isSetCloudType()) {
        oprot.writeFieldBegin(CLOUD_TYPE_FIELD_DESC);
        oprot.writeI16(struct.cloudType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentCreateContentTupleSchemeFactory implements SchemeFactory {
    public CommentCreateContentTupleScheme getScheme() {
      return new CommentCreateContentTupleScheme();
    }
  }

  private static class CommentCreateContentTupleScheme extends TupleScheme<CommentCreateContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommentCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.operatorid);
      oprot.writeI64(struct.commentId);
      oprot.writeString(struct.commentDesc);
      oprot.writeI64(struct.contentId);
      oprot.writeString(struct.contentName);
      oprot.writeByte(struct.contentType);
      oprot.writeI64(struct.createTime);
      BitSet optionals = new BitSet();
      if (struct.isSetOperatorName()) {
        optionals.set(0);
      }
      if (struct.isSetCloudType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOperatorName()) {
        oprot.writeString(struct.operatorName);
      }
      if (struct.isSetCloudType()) {
        oprot.writeI16(struct.cloudType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommentCreateContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.operatorid = iprot.readI32();
      struct.setOperatoridIsSet(true);
      struct.commentId = iprot.readI64();
      struct.setCommentIdIsSet(true);
      struct.commentDesc = iprot.readString();
      struct.setCommentDescIsSet(true);
      struct.contentId = iprot.readI64();
      struct.setContentIdIsSet(true);
      struct.contentName = iprot.readString();
      struct.setContentNameIsSet(true);
      struct.contentType = iprot.readByte();
      struct.setContentTypeIsSet(true);
      struct.createTime = iprot.readI64();
      struct.setCreateTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.operatorName = iprot.readString();
        struct.setOperatorNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cloudType = iprot.readI16();
        struct.setCloudTypeIsSet(true);
      }
    }
  }

}

