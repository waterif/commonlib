/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.gnet.uc.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-12")
public class GroupMemberInfo implements org.apache.thrift.TBase<GroupMemberInfo, GroupMemberInfo._Fields>, java.io.Serializable, Cloneable, Comparable<GroupMemberInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupMemberInfo");

  private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("join_time", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField JOIN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("join_state", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.BYTE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupMemberInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupMemberInfoTupleSchemeFactory());
  }

  public int memberId; // required
  public int join_time; // required
  public byte join_state; // optional
  public byte role; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMBER_ID((short)1, "memberId"),
    JOIN_TIME((short)2, "join_time"),
    JOIN_STATE((short)3, "join_state"),
    ROLE((short)4, "role");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMBER_ID
          return MEMBER_ID;
        case 2: // JOIN_TIME
          return JOIN_TIME;
        case 3: // JOIN_STATE
          return JOIN_STATE;
        case 4: // ROLE
          return ROLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERID_ISSET_ID = 0;
  private static final int __JOIN_TIME_ISSET_ID = 1;
  private static final int __JOIN_STATE_ISSET_ID = 2;
  private static final int __ROLE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.JOIN_STATE,_Fields.ROLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("join_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JOIN_STATE, new org.apache.thrift.meta_data.FieldMetaData("join_state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupMemberInfo.class, metaDataMap);
  }

  public GroupMemberInfo() {
  }

  public GroupMemberInfo(
    int memberId,
    int join_time)
  {
    this();
    this.memberId = memberId;
    setMemberIdIsSet(true);
    this.join_time = join_time;
    setJoin_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupMemberInfo(GroupMemberInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.memberId = other.memberId;
    this.join_time = other.join_time;
    this.join_state = other.join_state;
    this.role = other.role;
  }

  public GroupMemberInfo deepCopy() {
    return new GroupMemberInfo(this);
  }

  @Override
  public void clear() {
    setMemberIdIsSet(false);
    this.memberId = 0;
    setJoin_timeIsSet(false);
    this.join_time = 0;
    setJoin_stateIsSet(false);
    this.join_state = 0;
    setRoleIsSet(false);
    this.role = 0;
  }

  public int getMemberId() {
    return this.memberId;
  }

  public GroupMemberInfo setMemberId(int memberId) {
    this.memberId = memberId;
    setMemberIdIsSet(true);
    return this;
  }

  public void unsetMemberId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERID_ISSET_ID);
  }

  /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERID_ISSET_ID);
  }

  public void setMemberIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERID_ISSET_ID, value);
  }

  public int getJoin_time() {
    return this.join_time;
  }

  public GroupMemberInfo setJoin_time(int join_time) {
    this.join_time = join_time;
    setJoin_timeIsSet(true);
    return this;
  }

  public void unsetJoin_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOIN_TIME_ISSET_ID);
  }

  /** Returns true if field join_time is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_time() {
    return EncodingUtils.testBit(__isset_bitfield, __JOIN_TIME_ISSET_ID);
  }

  public void setJoin_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOIN_TIME_ISSET_ID, value);
  }

  public byte getJoin_state() {
    return this.join_state;
  }

  public GroupMemberInfo setJoin_state(byte join_state) {
    this.join_state = join_state;
    setJoin_stateIsSet(true);
    return this;
  }

  public void unsetJoin_state() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JOIN_STATE_ISSET_ID);
  }

  /** Returns true if field join_state is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_state() {
    return EncodingUtils.testBit(__isset_bitfield, __JOIN_STATE_ISSET_ID);
  }

  public void setJoin_stateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JOIN_STATE_ISSET_ID, value);
  }

  public byte getRole() {
    return this.role;
  }

  public GroupMemberInfo setRole(byte role) {
    this.role = role;
    setRoleIsSet(true);
    return this;
  }

  public void unsetRole() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLE_ISSET_ID);
  }

  public void setRoleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMBER_ID:
      if (value == null) {
        unsetMemberId();
      } else {
        setMemberId((Integer)value);
      }
      break;

    case JOIN_TIME:
      if (value == null) {
        unsetJoin_time();
      } else {
        setJoin_time((Integer)value);
      }
      break;

    case JOIN_STATE:
      if (value == null) {
        unsetJoin_state();
      } else {
        setJoin_state((Byte)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMBER_ID:
      return Integer.valueOf(getMemberId());

    case JOIN_TIME:
      return Integer.valueOf(getJoin_time());

    case JOIN_STATE:
      return Byte.valueOf(getJoin_state());

    case ROLE:
      return Byte.valueOf(getRole());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMBER_ID:
      return isSetMemberId();
    case JOIN_TIME:
      return isSetJoin_time();
    case JOIN_STATE:
      return isSetJoin_state();
    case ROLE:
      return isSetRole();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupMemberInfo)
      return this.equals((GroupMemberInfo)that);
    return false;
  }

  public boolean equals(GroupMemberInfo that) {
    if (that == null)
      return false;

    boolean this_present_memberId = true;
    boolean that_present_memberId = true;
    if (this_present_memberId || that_present_memberId) {
      if (!(this_present_memberId && that_present_memberId))
        return false;
      if (this.memberId != that.memberId)
        return false;
    }

    boolean this_present_join_time = true;
    boolean that_present_join_time = true;
    if (this_present_join_time || that_present_join_time) {
      if (!(this_present_join_time && that_present_join_time))
        return false;
      if (this.join_time != that.join_time)
        return false;
    }

    boolean this_present_join_state = true && this.isSetJoin_state();
    boolean that_present_join_state = true && that.isSetJoin_state();
    if (this_present_join_state || that_present_join_state) {
      if (!(this_present_join_state && that_present_join_state))
        return false;
      if (this.join_state != that.join_state)
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (this.role != that.role)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memberId = true;
    list.add(present_memberId);
    if (present_memberId)
      list.add(memberId);

    boolean present_join_time = true;
    list.add(present_join_time);
    if (present_join_time)
      list.add(join_time);

    boolean present_join_state = true && (isSetJoin_state());
    list.add(present_join_state);
    if (present_join_state)
      list.add(join_state);

    boolean present_role = true && (isSetRole());
    list.add(present_role);
    if (present_role)
      list.add(role);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupMemberInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemberId()).compareTo(other.isSetMemberId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoin_time()).compareTo(other.isSetJoin_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_time, other.join_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoin_state()).compareTo(other.isSetJoin_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_state, other.join_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupMemberInfo(");
    boolean first = true;

    sb.append("memberId:");
    sb.append(this.memberId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("join_time:");
    sb.append(this.join_time);
    first = false;
    if (isSetJoin_state()) {
      if (!first) sb.append(", ");
      sb.append("join_state:");
      sb.append(this.join_state);
      first = false;
    }
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      sb.append(this.role);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'memberId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'join_time' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupMemberInfoStandardSchemeFactory implements SchemeFactory {
    public GroupMemberInfoStandardScheme getScheme() {
      return new GroupMemberInfoStandardScheme();
    }
  }

  private static class GroupMemberInfoStandardScheme extends StandardScheme<GroupMemberInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupMemberInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMBER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memberId = iprot.readI32();
              struct.setMemberIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_time = iprot.readI32();
              struct.setJoin_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOIN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.join_state = iprot.readByte();
              struct.setJoin_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.role = iprot.readByte();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMemberId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJoin_time()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'join_time' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupMemberInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
      oprot.writeI32(struct.memberId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JOIN_TIME_FIELD_DESC);
      oprot.writeI32(struct.join_time);
      oprot.writeFieldEnd();
      if (struct.isSetJoin_state()) {
        oprot.writeFieldBegin(JOIN_STATE_FIELD_DESC);
        oprot.writeByte(struct.join_state);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRole()) {
        oprot.writeFieldBegin(ROLE_FIELD_DESC);
        oprot.writeByte(struct.role);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupMemberInfoTupleSchemeFactory implements SchemeFactory {
    public GroupMemberInfoTupleScheme getScheme() {
      return new GroupMemberInfoTupleScheme();
    }
  }

  private static class GroupMemberInfoTupleScheme extends TupleScheme<GroupMemberInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupMemberInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.memberId);
      oprot.writeI32(struct.join_time);
      BitSet optionals = new BitSet();
      if (struct.isSetJoin_state()) {
        optionals.set(0);
      }
      if (struct.isSetRole()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetJoin_state()) {
        oprot.writeByte(struct.join_state);
      }
      if (struct.isSetRole()) {
        oprot.writeByte(struct.role);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupMemberInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.memberId = iprot.readI32();
      struct.setMemberIdIsSet(true);
      struct.join_time = iprot.readI32();
      struct.setJoin_timeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.join_state = iprot.readByte();
        struct.setJoin_stateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.role = iprot.readByte();
        struct.setRoleIsSet(true);
      }
    }
  }

}

